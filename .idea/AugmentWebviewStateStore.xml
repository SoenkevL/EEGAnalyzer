<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{"currentConversationId":"39fead9d-0d2a-4bb8-9ebb-222baf09bb25","conversations":{"4e7ac65b-39f7-4e73-8743-a4fb4d848ae2":{"id":"4e7ac65b-39f7-4e73-8743-a4fb4d848ae2","createdAtIso":"2025-04-16T19:08:54.816Z","lastInteractedAtIso":"2025-04-16T19:08:54.816Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"20230d98-6fe2-43ec-a4d1-ce0dd919fea6":{"id":"20230d98-6fe2-43ec-a4d1-ce0dd919fea6","createdAtIso":"2025-04-16T19:08:54.894Z","lastInteractedAtIso":"2025-04-16T19:08:54.894Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"03794746-cd75-46c9-91e4-a2062b369d58":{"id":"03794746-cd75-46c9-91e4-a2062b369d58","createdAtIso":"2025-04-16T19:09:00.120Z","lastInteractedAtIso":"2025-04-16T19:15:50.816Z","chatHistory":[{"request_id":"f9cbe7f9-e2a0-4f05-b2ca-b66674150c91","uuid":"34efac36-35c0-4fee-8a33-f5aca01a048e","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1744830540120,"seen_state":"seen"},{"status":"success","request_id":"7be5a194-e582-4817-9cc6-1f9df473f9af","request_message":"analyze the contents of @gui to understand what it does and how it works","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"analyze the contents of "},{"type":"mention","attrs":{"id":"/gui","label":"gui","data":{"label":"gui","name":"gui","id":"/gui","folder":{"repoRoot":"","pathName":"gui"},"type":"item"}}},{"type":"text","text":" to understand what it does and how it works"}]}]},"mentioned_items":[{"label":"gui","name":"gui","id":"/gui","folder":{"repoRoot":"","pathName":"gui"},"type":"item"}],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01VZ3XQXdfZ7d81f11bTD4AP","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"List all files and directories in the @gui directory. I want to understand the overall structure of the GUI components.\"}"}},{"id":0,"type":0,"content":"I'll analyze the contents of the `@gui` directory to understand its structure, purpose, and functionality. Let me gather information about it.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"analyze the contents of @gui to understand what it does and how it works"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"I'll analyze the contents of the `@gui` directory to understand its structure, purpose, and functionality. Let me gather information about it.\n","workspace_file_chunks":[]},{"status":"success","request_id":"6768a793-5cb7-4b4c-85d8-e4c49a62fca4","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01AsmfDZhzvX25XEd9BkzrBC","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me the structure of the gui directory. What subdirectories and files exist? Also, what are the main components of the GUI application, such as the database_handler, plot_frame, and selection_frame mentioned in app.py?\"}"}},{"id":0,"type":0,"content":"I need to gather more information about the GUI components to understand how they work together.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01VZ3XQXdfZ7d81f11bTD4AP"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"I need to gather more information about the GUI components to understand how they work together.\n","workspace_file_chunks":[]},{"status":"success","request_id":"d1223af2-c25d-4f6f-86fa-b4df6f7f324d","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_0126h4T8Bje9BaPPqx2PNV9A","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me the implementation of DatabaseHandler, MetricsPlotFrame, and SelectionFrame classes that are used in the app.py file. I want to understand what each component does and how they interact.\"}"}},{"id":0,"type":0,"content":"Let me look at the specific components mentioned in the app.py file to understand their functionality:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01AsmfDZhzvX25XEd9BkzrBC"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me look at the specific components mentioned in the app.py file to understand their functionality:\n","workspace_file_chunks":[]},{"status":"success","request_id":"9397dd58-6a1b-4b40-a64a-9437192a4b55","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01ApeWohckDdJPeixbrMbpit","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me the implementation of the DatabaseHandler class from gui/metrics_viewer/database_handler.py\"}"}},{"id":0,"type":0,"content":"Let me look at each component individually:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_0126h4T8Bje9BaPPqx2PNV9A"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me look at each component individually:\n","workspace_file_chunks":[]},{"status":"success","request_id":"293b6187-4227-45b2-b29d-4366e06c94bc","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_0124cWP6VgUqtw8vHuuG5tdU","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me the content of gui/metrics_viewer/database_handler.py\"}"}},{"id":0,"type":0,"content":"Let me try to get the specific implementation files:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01ApeWohckDdJPeixbrMbpit"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me try to get the specific implementation files:\n","workspace_file_chunks":[]},{"status":"success","request_id":"aa94aa3b-0008-41b7-b9de-3065976fb126","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_012KVRt1zPPNXiqhW6ub62vA","tool_name":"launch-process","input_json":"{\"command\": \"find gui -type f | sort\", \"wait\": true, \"max_wait_seconds\": 30}"}},{"id":0,"type":0,"content":"Let me try a different approach to get the structure of the GUI components:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_0124cWP6VgUqtw8vHuuG5tdU"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me try a different approach to get the structure of the GUI components:\n","workspace_file_chunks":[]},{"status":"success","request_id":"2bb7cd0b-c42a-4705-ac1e-d8e9af87706f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01XW7yCgcvTFXkRQcrKERurE","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/database_handler.py\"}"}},{"id":0,"type":0,"content":"Now I'll examine each of the key components of the GUI to understand how they work together. Let me look at the main files in the metrics_viewer package:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here are the results from executing the command.\n        <return-code>\n        0\n        </return-code>\n        <stdout>\n        gui/install_dependencies.py\ngui/metrics_viewer/app.py\ngui/metrics_viewer/database_handler.py\ngui/metrics_viewer/__init__.py\ngui/metrics_viewer/plot_frame.py\ngui/metrics_viewer/__pycache__/app.cpython-313.pyc\ngui/metrics_viewer/__pycache__/database_handler.cpython-313.pyc\ngui/metrics_viewer/__pycache__/__init__.cpython-313.pyc\ngui/metrics_viewer/__pycache__/plot_frame.cpython-313.pyc\ngui/metrics_viewer/__pycache__/selection_frame.cpython-313.pyc\ngui/metrics_viewer/__pycache__/utils.cpython-313.pyc\ngui/metrics_viewer/selection_frame.py\ngui/metrics_viewer/utils.py\ngui/plotting_oneshot.py\ngui/__pycache__/metrics_viewer.cpython-313.pyc\ngui/README.md\ngui/run_metrics_viewer.py\ngui/test_structure.py\n\n        </stdout>\n        <stderr>\n        \n        </stderr>","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_012KVRt1zPPNXiqhW6ub62vA"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Now I'll examine each of the key components of the GUI to understand how they work together. Let me look at the main files in the metrics_viewer package:\n","workspace_file_chunks":[]},{"status":"success","request_id":"3c129abb-1025-4e0a-b2ca-6bc1d5eeeb01","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_0123c8QgzKPqfrHuyLvxMFDa","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/plot_frame.py\"}"}},{"id":0,"type":0,"content":""},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/database_handler.py:\n     1\t\"\"\"\n     2\tDatabase handler for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides functionality for interacting with the SQLite database\n     5\tcontaining EEG metrics data.\n     6\t\"\"\"\n     7\t\n     8\timport os\n     9\timport sys\n    10\tfrom typing import List, Dict, Any, Optional\n    11\timport pandas as pd\n    12\t\n    13\t# Add the parent directory to the path so we can import from OOP_Analyzer\n    14\tsys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))\n    15\tfrom OOP_Analyzer import Alchemist\n    16\t\n    17\tfrom .utils import METADATA_COLUMNS\n    18\t\n    19\t\n    20\tclass DatabaseHandler:\n    21\t    \"\"\"\n    22\t    Handles interactions with the SQLite database containing EEG metrics.\n    23\t    \"\"\"\n    24\t    \n    25\t    def __init__(self, db_path: str):\n    26\t        \"\"\"\n    27\t        Initialize the database handler.\n    28\t        \n    29\t        Args:\n    30\t            db_path: Path to the SQLite database file\n    31\t        \"\"\"\n    32\t        self.db_path = db_path\n    33\t        self.engine = Alchemist.initialize_tables(db_path)\n    34\t        self.session = Alchemist.Session(self.engine)\n    35\t        \n    36\t    def __del__(self):\n    37\t        \"\"\"Close the session when the object is deleted.\"\"\"\n    38\t        if hasattr(self, 'session'):\n    39\t            self.session.close()\n    40\t    \n    41\t    def get_experiments(self) -> List[Dict[str, Any]]:\n    42\t        \"\"\"\n    43\t        Get all experiments from the database.\n    44\t        \n    45\t        Returns:\n    46\t            List of dictionaries containing experiment information\n    47\t        \"\"\"\n    48\t        experiments = Alchemist.find_entries(self.session, Alchemist.Experiment)\n    49\t        return [{'id': exp.id, 'name': exp.metric_set_name, 'run_name': exp.run_name} for exp in experiments]\n    50\t    \n    51\t    def get_eegs_for_experiment(self, experiment_id: str) -> List[Dict[str, Any]]:\n    52\t        \"\"\"\n    53\t        Get all EEGs associated with a specific experiment.\n    54\t        \n    55\t        Args:\n    56\t            experiment_id: ID of the experiment\n    57\t            \n    58\t        Returns:\n    59\t            List of dictionaries containing EEG information\n    60\t        \"\"\"\n    61\t        experiment = self.session.get(Alchemist.Experiment, experiment_id)\n    62\t        if not experiment:\n    63\t            return []\n    64\t        \n    65\t        return [{'id': eeg.id, 'filename': eeg.filename, 'filepath': eeg.filepath} for eeg in experiment.eegs]\n    66\t    \n    67\t    def get_metrics_data(self, experiment_id: str, eeg_id: str) -> pd.DataFrame:\n    68\t        \"\"\"\n    69\t        Get metrics data for a specific experiment and EEG.\n    70\t        \n    71\t        Args:\n    72\t            experiment_id: ID of the experiment\n    73\t            eeg_id: ID of the EEG\n    74\t            \n    75\t        Returns:\n    76\t            DataFrame containing the metrics data\n    77\t        \"\"\"\n    78\t        table_name = f\"data_experiment_{experiment_id}\"\n    79\t        \n    80\t        try:\n    81\t            # Query the data for the specific EEG\n    82\t            query = f\"SELECT * FROM {table_name} WHERE eeg_id = '{eeg_id}'\"\n    83\t            df = pd.read_sql_query(query, self.engine)\n    84\t            return df\n    85\t        except Exception as e:\n    86\t            print(f\"Error retrieving metrics data: {e}\")\n    87\t            return pd.DataFrame()\n    88\t    \n    89\t    def get_available_metrics(self, experiment_id: str, eeg_id: str) -> List[str]:\n    90\t        \"\"\"\n    91\t        Get the unique metric names available for a specific experiment and EEG.\n    92\t        \n    93\t        Args:\n    94\t            experiment_id: ID of the experiment\n    95\t            eeg_id: ID of the EEG\n    96\t            \n    97\t        Returns:\n    98\t            List of unique metric names\n    99\t        \"\"\"\n   100\t        df = self.get_metrics_data(experiment_id, eeg_id)\n   101\t        \n   102\t        if 'metric' in df.columns:\n   103\t            return df['metric'].unique().tolist()\n   104\t        return []\n   105\t    \n   106\t    def get_available_channels(self, experiment_id: str, eeg_id: str) -> List[str]:\n   107\t        \"\"\"\n   108\t        Get the channel names available for a specific experiment and EEG.\n   109\t        \n   110\t        Args:\n   111\t            experiment_id: ID of the experiment\n   112\t            eeg_id: ID of the EEG\n   113\t            \n   114\t        Returns:\n   115\t            List of channel names sorted alphabetically\n   116\t        \"\"\"\n   117\t        df = self.get_metrics_data(experiment_id, eeg_id)\n   118\t        \n   119\t        # Exclude metadata columns\n   120\t        channel_cols = [col for col in df.columns if col not in METADATA_COLUMNS]\n   121\t        \n   122\t        # Sort channels alphabetically\n   123\t        channel_cols.sort()\n   124\t        \n   125\t        return channel_cols\n   126\t\nTotal lines in file: 126\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01XW7yCgcvTFXkRQcrKERurE"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"","workspace_file_chunks":[]},{"status":"success","request_id":"46354fe1-2933-4906-aefa-0783a5ffdc16","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_019FHsBzshwHTEEB6Tqf77on","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/selection_frame.py\"}"}},{"id":0,"type":0,"content":""},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/plot_frame.py:\n     1\t\"\"\"\n     2\tPlot frame for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides the MetricsPlotFrame class for visualizing EEG metrics data.\n     5\t\"\"\"\n     6\t\n     7\tfrom typing import List, Dict, Tuple, Optional, Any, Union\n     8\timport pandas as pd\n     9\timport numpy as np\n    10\timport customtkinter as ctk\n    11\tfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n    12\tfrom matplotlib.figure import Figure\n    13\t\n    14\tfrom .utils import AGGREGATION_COLORS, AGGREGATION_STYLES\n    15\t\n    16\t\n    17\tclass MetricsPlotFrame(ctk.CTkFrame):\n    18\t    \"\"\"\n    19\t    A frame containing a matplotlib figure for plotting metrics.\n    20\t    \"\"\"\n    21\t\n    22\t    def __init__(self, master, title=\"Metrics Plot\", **kwargs):\n    23\t        \"\"\"\n    24\t        Initialize the plot frame.\n    25\t\n    26\t        Args:\n    27\t            master: The parent widget\n    28\t            title: Title for the plot frame\n    29\t            **kwargs: Additional arguments for the CTkFrame constructor\n    30\t        \"\"\"\n    31\t        super().__init__(master, **kwargs)\n    32\t\n    33\t        # Configure grid layout\n    34\t        self.grid_columnconfigure(0, weight=1)\n    35\t        self.grid_rowconfigure(1, weight=1)\n    36\t\n    37\t        # Add title label\n    38\t        self.title_label = ctk.CTkLabel(self, text=title, fg_color=\"gray30\", corner_radius=6)\n    39\t        self.title_label.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"ew\")\n    40\t\n    41\t        # Create matplotlib figure with larger size\n    42\t        self.figure = Figure(figsize=(12, 7), dpi=100)\n    43\t        self.plot = self.figure.add_subplot(111)\n    44\t\n    45\t        # Create canvas for the figure\n    46\t        self.canvas = FigureCanvasTkAgg(self.figure, self)\n    47\t        self.canvas_widget = self.canvas.get_tk_widget()\n    48\t        self.canvas_widget.grid(row=1, column=0, padx=10, pady=10, sticky=\"nsew\")\n    49\t\n    50\t        # Add interactive zooming with mouse drag\n    51\t        self.zoom_start = None\n    52\t        self.canvas.mpl_connect('button_press_event', self.on_mouse_press)\n    53\t        self.canvas.mpl_connect('button_release_event', self.on_mouse_release)\n    54\t        self.canvas.mpl_connect('motion_notify_event', self.on_mouse_motion)\n    55\t\n    56\t        # Store the parent frame for callbacks\n    57\t        self.parent_frame = master\n    58\t\n    59\t        # Initialize with empty plot\n    60\t        self.update_plot()\n    61\t\n    62\t    def update_plot(\n    63\t        self,\n    64\t        data: Optional[pd.DataFrame] = None,\n    65\t        metric: Optional[str] = None,\n    66\t        channels: Optional[List[str]] = None,\n    67\t        title: Optional[str] = None,\n    68\t        xlabel: Optional[str] = None,\n    69\t        ylabel: Optional[str] = None,\n    70\t        time_window: Optional[Tuple[Optional[float], Optional[float]]] = None,\n    71\t        aggregations: Optional[List[str]] = None,\n    72\t        aggregation_only: bool = False\n    73\t    ):\n    74\t        \"\"\"\n    75\t        Update the plot with new data.\n    76\t\n    77\t        Args:\n    78\t            data: DataFrame containing the metrics data\n    79\t            metric: The metric to plot\n    80\t            channels: List of channels to plot\n    81\t            title: Title for the plot\n    82\t            xlabel: Label for the x-axis\n    83\t            ylabel: Label for the y-axis\n    84\t            time_window: Tuple of (start_time, end_time) to focus on a specific time range\n    85\t            aggregations: List of aggregation methods to apply across channels (mean, std, median)\n    86\t            aggregation_only: If True, only show aggregations without individual channels\n    87\t        \"\"\"\n    88\t        self.plot.clear()\n    89\t\n    90\t        if data is None or metric is None or (not channels and not aggregations):\n    91\t            # Display a message if no data is provided\n    92\t            self.plot.text(0.5, 0.5, \"No data selected\",\n    93\t                          horizontalalignment='center',\n    94\t                          verticalalignment='center',\n    95\t                          transform=self.plot.transAxes)\n    96\t        else:\n    97\t            # Filter data for the selected metric\n    98\t            metric_data = data[data['metric'] == metric]\n    99\t\n   100\t            if metric_data.empty:\n   101\t                self.plot.text(0.5, 0.5, f\"No data for metric: {metric}\",\n   102\t                              horizontalalignment='center',\n   103\t                              verticalalignment='center',\n   104\t                              transform=self.plot.transAxes)\n   105\t            else:\n   106\t                # Sort by startDataRecord if available\n   107\t                if 'startDataRecord' in metric_data.columns:\n   108\t                    metric_data = metric_data.sort_values('startDataRecord')\n   109\t                    x_values = metric_data['startDataRecord']\n   110\t                    x_label = 'Time (s)'\n   111\t\n   112\t                    # Apply time window filtering if specified\n   113\t                    if time_window and any(x is not None for x in time_window):\n   114\t                        start_time, end_time = time_window\n   115\t\n   116\t                        # Filter by start time if specified\n   117\t                        if start_time is not None:\n   118\t                            metric_data = metric_data[metric_data['startDataRecord'] >= start_time]\n   119\t                            if metric_data.empty:\n   120\t                                self.plot.text(0.5, 0.5, f\"No data in the specified time range\",\n   121\t                                              horizontalalignment='center',\n   122\t                                              verticalalignment='center',\n   123\t                                              transform=self.plot.transAxes)\n   124\t                                x_label = 'Time (s)'\n   125\t                                self.plot.set_xlabel(x_label)\n   126\t                                self.plot.set_ylabel(metric if metric else 'Value')\n   127\t                                self.figure.tight_layout()\n   128\t                                self.canvas.draw()\n   129\t                                return\n   130\t\n   131\t                        # Filter by end time if specified\n   132\t                        if end_time is not None:\n   133\t                            metric_data = metric_data[metric_data['startDataRecord'] <= end_time]\n   134\t                            if metric_data.empty:\n   135\t                                self.plot.text(0.5, 0.5, f\"No data in the specified time range\",\n   136\t                                              horizontalalignment='center',\n   137\t                                              verticalalignment='center',\n   138\t                                              transform=self.plot.transAxes)\n   139\t                                x_label = 'Time (s)'\n   140\t                                self.plot.set_xlabel(x_label)\n   141\t                                self.plot.set_ylabel(metric if metric else 'Value')\n   142\t                                self.figure.tight_layout()\n   143\t                                self.canvas.draw()\n   144\t                                return\n   145\t\n   146\t                        # Update x_values after filtering\n   147\t                        x_values = metric_data['startDataRecord']\n   148\t                else:\n   149\t                    x_values = range(len(metric_data))\n   150\t                    x_label = 'Sample'\n   151\t\n   152\t                # Get the channel columns for plotting\n   153\t                channel_columns = [col for col in metric_data.columns if col in channels]\n   154\t\n   155\t                # Plot each selected channel if not in aggregation_only mode\n   156\t                if not aggregation_only:\n   157\t                    for channel in channels:\n   158\t                        if channel in metric_data.columns:\n   159\t                            self.plot.plot(x_values, metric_data[channel], label=channel, alpha=0.7)\n   160\t\n   161\t                # Calculate and plot aggregations if requested\n   162\t                if aggregations and channel_columns:\n   163\t                    # Calculate and plot each selected aggregation\n   164\t                    for agg in aggregations:\n   165\t                        if agg == 'mean':\n   166\t                            # Calculate mean across channels\n   167\t                            mean_values = metric_data[channel_columns].mean(axis=1)\n   168\t                            self.plot.plot(x_values, mean_values,\n   169\t                                          label='Mean',\n   170\t                                          color=AGGREGATION_COLORS['mean'],\n   171\t                                          linestyle=AGGREGATION_STYLES['mean'],\n   172\t                                          linewidth=2.5)\n   173\t\n   174\t                        elif agg == 'std':\n   175\t                            # Calculate standard deviation across channels\n   176\t                            std_values = metric_data[channel_columns].std(axis=1)\n   177\t                            self.plot.plot(x_values, std_values,\n   178\t                                          label='Std Dev',\n   179\t                                          color=AGGREGATION_COLORS['std'],\n   180\t                                          linestyle=AGGREGATION_STYLES['std'],\n   181\t                                          linewidth=2.5)\n   182\t\n   183\t                        elif agg == 'median':\n   184\t                            # Calculate median across channels\n   185\t                            median_values = metric_data[channel_columns].median(axis=1)\n   186\t                            self.plot.plot(x_values, median_values,\n   187\t                                          label='Median',\n   188\t                                          color=AGGREGATION_COLORS['median'],\n   189\t                                          linestyle=AGGREGATION_STYLES['median'],\n   190\t                                          linewidth=2.5)\n   191\t\n   192\t                # Add legend if there are multiple items to show\n   193\t                if (not aggregation_only and len(channels) > 1) or \\\n   194\t                   (aggregations and len(aggregations) > 0) or \\\n   195\t                   (not aggregation_only and channels and aggregations):\n   196\t                    self.plot.legend()\n   197\t\n   198\t                # Set x-axis limits if time window is specified\n   199\t                if 'startDataRecord' in metric_data.columns and time_window and any(x is not None for x in time_window):\n   200\t                    start_time, end_time = time_window\n   201\t                    x_min, x_max = None, None\n   202\t\n   203\t                    if start_time is not None:\n   204\t                        x_min = start_time\n   205\t                    else:\n   206\t                        x_min = min(x_values) if len(x_values) > 0 else 0\n   207\t\n   208\t                    if end_time is not None:\n   209\t                        x_max = end_time\n   210\t                    else:\n   211\t                        x_max = max(x_values) if len(x_values) > 0 else 1\n   212\t\n   213\t                    # Add a small padding to the limits\n   214\t                    padding = (x_max - x_min) * 0.05 if x_max > x_min else 0.1\n   215\t                    self.plot.set_xlim(x_min - padding, x_max + padding)\n   216\t\n   217\t        # Set title and labels\n   218\t        if title:\n   219\t            self.plot.set_title(title)\n   220\t        if xlabel:\n   221\t            self.plot.set_xlabel(xlabel)\n   222\t        else:\n   223\t            self.plot.set_xlabel(x_label if 'x_label' in locals() else 'Sample')\n   224\t        if ylabel:\n   225\t            self.plot.set_ylabel(ylabel)\n   226\t        else:\n   227\t            self.plot.set_ylabel(metric if metric else 'Value')\n   228\t\n   229\t        # Adjust layout and redraw\n   230\t        self.figure.tight_layout()\n   231\t        self.canvas.draw()\n   232\t\n   233\t    def on_mouse_press(self, event):\n   234\t        \"\"\"Handle mouse press event for interactive zooming.\"\"\"\n   235\t        # Only handle left button clicks in the plot area\n   236\t        if event.button != 1 or event.inaxes != self.plot:\n   237\t            return\n   238\t\n   239\t        # Store the starting point for the zoom box\n   240\t        self.zoom_start = (event.xdata, event.ydata)\n   241\t\n   242\t        # Create a rectangle for the zoom box if it doesn't exist\n   243\t        if not hasattr(self, 'zoom_rect'):\n   244\t            self.zoom_rect = self.plot.axvspan(event.xdata, event.xdata, alpha=0.3, color='gray')\n   245\t            self.zoom_rect.set_visible(False)\n   246\t\n   247\t    def on_mouse_motion(self, event):\n   248\t        \"\"\"Handle mouse motion event for interactive zooming.\"\"\"\n   249\t        # Only handle motion when we have a zoom start point and we're in the plot area\n   250\t        if self.zoom_start is None or event.inaxes != self.plot or not hasattr(self, 'zoom_rect'):\n   251\t            return\n   252\t\n   253\t        # Update the zoom box\n   254\t        x_start = self.zoom_start[0]\n   255\t        x_current = event.xdata\n   256\t\n   257\t        # Make sure we have valid coordinates\n   258\t        if x_start is None or x_current is None:\n   259\t            return\n   260\t\n   261\t        # Set the zoom box coordinates\n   262\t        x_min = min(x_start, x_current)\n   263\t        x_max = max(x_start, x_current)\n   264\t\n   265\t        # Update the zoom rectangle - use axvspan's xy parameter correctly\n   266\t        self.zoom_rect.set_visible(True)\n   267\t        # Instead of setting xy coordinates directly, update the span\n   268\t        self.zoom_rect.remove()\n   269\t        self.zoom_rect = self.plot.axvspan(x_min, x_max, alpha=0.3, color='gray')\n   270\t\n   271\t        # Redraw the canvas\n   272\t        self.canvas.draw_idle()\n   273\t\n   274\t    def on_mouse_release(self, event):\n   275\t        \"\"\"Handle mouse release event for interactive zooming.\"\"\"\n   276\t        # Only handle left button releases when we have a zoom start point\n   277\t        if event.button != 1 or self.zoom_start is None or event.inaxes != self.plot:\n   278\t            if hasattr(self, 'zoom_rect'):\n   279\t                self.zoom_rect.remove()\n   280\t                delattr(self, 'zoom_rect')\n   281\t                self.canvas.draw_idle()\n   282\t            self.zoom_start = None\n   283\t            return\n   284\t\n   285\t        # Get the start and end points\n   286\t        x_start = self.zoom_start[0]\n   287\t        x_end = event.xdata\n   288\t\n   289\t        # Make sure we have valid coordinates\n   290\t        if x_start is None or x_end is None:\n   291\t            self.zoom_start = None\n   292\t            if hasattr(self, 'zoom_rect'):\n   293\t                self.zoom_rect.remove()\n   294\t                delattr(self, 'zoom_rect')\n   295\t                self.canvas.draw_idle()\n   296\t            return\n   297\t\n   298\t        # Reset the zoom rectangle\n   299\t        if hasattr(self, 'zoom_rect'):\n   300\t            self.zoom_rect.remove()\n   301\t            delattr(self, 'zoom_rect')\n   302\t            self.canvas.draw_idle()\n   303\t\n   304\t        # Only zoom if the drag distance is significant\n   305\t        if abs(x_start - x_end) < 0.01:\n   306\t            self.zoom_start = None\n   307\t            return\n   308\t\n   309\t        # Sort the coordinates\n   310\t        x_min = min(x_start, x_end)\n   311\t        x_max = max(x_start, x_end)\n   312\t\n   313\t        # Update the time window in the selection frame\n   314\t        if hasattr(self, 'parent_frame') and hasattr(self.parent_frame, 'selection_frame'):\n   315\t            selection_frame = self.parent_frame.selection_frame\n   316\t            if hasattr(selection_frame, 'start_time_var') and hasattr(selection_frame, 'end_time_var'):\n   317\t                selection_frame.start_time_var.set(f\"{x_min:.2f}\")\n   318\t                selection_frame.end_time_var.set(f\"{x_max:.2f}\")\n   319\t                selection_frame.update_plot()\n   320\t\n   321\t        # Reset the zoom start point\n   322\t        self.zoom_start = None\n   323\t\nTotal lines in file: 323\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_0123c8QgzKPqfrHuyLvxMFDa"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"","workspace_file_chunks":[]},{"status":"success","request_id":"bb8af92d-0150-4730-8ab7-824abfaa3348","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01WVEme2mGU6a4Fw1pztEwUM","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/utils.py\"}"}},{"id":0,"type":0,"content":""},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n     1\t\"\"\"\n     2\tSelection frame for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport customtkinter as ctk\n    10\t\n    11\tfrom .database_handler import DatabaseHandler\n    12\tfrom .plot_frame import MetricsPlotFrame\n    13\tfrom .utils import (\n    14\t    get_label_font, \n    15\t    get_dropdown_font, \n    16\t    get_button_font,\n    17\t    COMMON_CHANNELS,\n    18\t    ALTERNATIVE_CHANNEL_NAMES\n    19\t)\n    20\t\n    21\t\n    22\tclass SelectionFrame(ctk.CTkFrame):\n    23\t    \"\"\"\n    24\t    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    25\t    \"\"\"\n    26\t    \n    27\t    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n    28\t        \"\"\"\n    29\t        Initialize the selection frame.\n    30\t        \n    31\t        Args:\n    32\t            master: The parent widget\n    33\t            db_handler: DatabaseHandler instance for querying the database\n    34\t            plot_frame: MetricsPlotFrame instance for displaying plots\n    35\t            **kwargs: Additional arguments for the CTkFrame constructor\n    36\t        \"\"\"\n    37\t        super().__init__(master, **kwargs)\n    38\t        \n    39\t        self.db_handler = db_handler\n    40\t        self.plot_frame = plot_frame\n    41\t        \n    42\t        # Configure grid layout\n    43\t        self.grid_columnconfigure(0, weight=1)\n    44\t        self.grid_columnconfigure(1, weight=1)\n    45\t        \n    46\t        # Create fonts\n    47\t        label_font = get_label_font()\n    48\t        dropdown_font = get_dropdown_font()\n    49\t        \n    50\t        # Experiment selection - more compact\n    51\t        self.experiment_label = ctk.CTkLabel(self, text=\"Select Experiment:\", font=label_font)\n    52\t        self.experiment_label.grid(row=0, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    53\t        \n    54\t        self.experiments = self.db_handler.get_experiments()\n    55\t        experiment_names = [f\"{exp['name']} ({exp['run_name']})\" for exp in self.experiments]\n    56\t        \n    57\t        self.experiment_var = ctk.StringVar(value=experiment_names[0] if experiment_names else \"\")\n    58\t        self.experiment_dropdown = ctk.CTkOptionMenu(\n    59\t            self, \n    60\t            values=experiment_names,\n    61\t            variable=self.experiment_var,\n    62\t            command=self.on_experiment_selected,\n    63\t            height=28,\n    64\t            font=dropdown_font,\n    65\t            dropdown_font=dropdown_font\n    66\t        )\n    67\t        self.experiment_dropdown.grid(row=0, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    68\t        \n    69\t        # EEG selection - more compact\n    70\t        self.eeg_label = ctk.CTkLabel(self, text=\"Select EEG:\", font=label_font)\n    71\t        self.eeg_label.grid(row=1, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    72\t        \n    73\t        self.eeg_var = ctk.StringVar()\n    74\t        self.eeg_dropdown = ctk.CTkOptionMenu(\n    75\t            self, \n    76\t            values=[],\n    77\t            variable=self.eeg_var,\n    78\t            command=self.on_eeg_selected,\n    79\t            height=28,\n    80\t            font=dropdown_font,\n    81\t            dropdown_font=dropdown_font\n    82\t        )\n    83\t        self.eeg_dropdown.grid(row=1, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    84\t        \n    85\t        # Metric selection - more compact\n    86\t        self.metric_label = ctk.CTkLabel(self, text=\"Select Metric:\", font=label_font)\n    87\t        self.metric_label.grid(row=2, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    88\t        \n    89\t        self.metric_var = ctk.StringVar()\n    90\t        self.metric_dropdown = ctk.CTkOptionMenu(\n    91\t            self, \n    92\t            values=[],\n    93\t            variable=self.metric_var,\n    94\t            command=self.on_metric_selected,\n    95\t            height=28,\n    96\t            font=dropdown_font,\n    97\t            dropdown_font=dropdown_font\n    98\t        )\n    99\t        self.metric_dropdown.grid(row=2, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   100\t        \n   101\t        # Channels selection with more compact layout\n   102\t        self.channels_label = ctk.CTkLabel(self, text=\"Select Channels:\", font=label_font)\n   103\t        self.channels_label.grid(row=3, column=0, padx=5, pady=(8, 0), sticky=\"nw\")\n   104\t        \n   105\t        # Create a frame for channel selection buttons - more compact layout\n   106\t        self.channel_buttons_frame = ctk.CTkFrame(self)\n   107\t        self.channel_buttons_frame.grid(row=3, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   108\t        self.channel_buttons_frame.grid_columnconfigure(0, weight=1)\n   109\t        self.channel_buttons_frame.grid_columnconfigure(1, weight=1)\n   110\t        self.channel_buttons_frame.grid_columnconfigure(2, weight=1)\n   111\t        \n   112\t        # Add select all and deselect all buttons with smaller font and more compact design\n   113\t        button_font = dropdown_font\n   114\t        \n   115\t        self.select_all_button = ctk.CTkButton(\n   116\t            self.channel_buttons_frame,\n   117\t            text=\"Select All\",\n   118\t            command=self.select_all_channels,\n   119\t            height=22,\n   120\t            font=button_font\n   121\t        )\n   122\t        self.select_all_button.grid(row=0, column=0, padx=2, pady=3, sticky=\"ew\")\n   123\t        \n   124\t        self.deselect_all_button = ctk.CTkButton(\n   125\t            self.channel_buttons_frame,\n   126\t            text=\"Deselect All\",\n   127\t            command=self.deselect_all_channels,\n   128\t            height=22,\n   129\t            font=button_font\n   130\t        )\n   131\t        self.deselect_all_button.grid(row=0, column=1, padx=2, pady=3, sticky=\"ew\")\n   132\t        \n   133\t        # Add select common channels button\n   134\t        self.select_common_button = ctk.CTkButton(\n   135\t            self.channel_buttons_frame,\n   136\t            text=\"Common Channels\",\n   137\t            command=self.select_common_channels,\n   138\t            height=22,\n   139\t            font=button_font\n   140\t        )\n   141\t        self.select_common_button.grid(row=0, column=2, padx=2, pady=3, sticky=\"ew\")\n   142\t        \n   143\t        # Create a scrollable frame for channel checkboxes - increased height for better usability\n   144\t        self.channels_frame = ctk.CTkScrollableFrame(self, width=180, height=200)\n   145\t        self.channels_frame.grid(row=4, column=1, padx=5, pady=(0, 8), sticky=\"ew\")\n   146\t        \n   147\t        # Bind mouse wheel events to ensure scrolling works properly\n   148\t        self.bind_mouse_wheel(self.channels_frame)\n   149\t        \n   150\t        self.channel_vars = {}  # Will hold the checkbox variables\n   151\t        \n   152\t        # Aggregation methods frame\n   153\t        self.aggregation_frame = ctk.CTkFrame(self)\n   154\t        self.aggregation_frame.grid(row=5, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   155\t        self.aggregation_frame.grid_columnconfigure(0, weight=1)\n   156\t        self.aggregation_frame.grid_columnconfigure(1, weight=3)\n   157\t        self.aggregation_frame.grid_rowconfigure(0, weight=1)\n   158\t        self.aggregation_frame.grid_rowconfigure(1, weight=1)\n   159\t        \n   160\t        # Aggregation label\n   161\t        self.aggregation_label = ctk.CTkLabel(\n   162\t            self.aggregation_frame, \n   163\t            text=\"Aggregation:\", \n   164\t            font=label_font\n   165\t        )\n   166\t        self.aggregation_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   167\t        \n   168\t        # Aggregation checkboxes frame\n   169\t        self.aggregation_checkboxes_frame = ctk.CTkFrame(self.aggregation_frame, fg_color=\"transparent\")\n   170\t        self.aggregation_checkboxes_frame.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   171\t        self.aggregation_checkboxes_frame.grid_columnconfigure(0, weight=1)\n   172\t        self.aggregation_checkboxes_frame.grid_columnconfigure(1, weight=1)\n   173\t        self.aggregation_checkboxes_frame.grid_columnconfigure(2, weight=1)\n   174\t        \n   175\t        # Aggregation method checkboxes\n   176\t        self.aggregation_vars = {}\n   177\t        \n   178\t        # Mean checkbox\n   179\t        self.aggregation_vars['mean'] = ctk.BooleanVar(value=False)\n   180\t        self.mean_checkbox = ctk.CTkCheckBox(\n   181\t            self.aggregation_checkboxes_frame,\n   182\t            text=\"Mean\",\n   183\t            variable=self.aggregation_vars['mean'],\n   184\t            onvalue=True,\n   185\t            offvalue=False,\n   186\t            font=dropdown_font,\n   187\t            checkbox_width=16,\n   188\t            checkbox_height=16\n   189\t        )\n   190\t        self.mean_checkbox.grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n   191\t        \n   192\t        # Std checkbox\n   193\t        self.aggregation_vars['std'] = ctk.BooleanVar(value=False)\n   194\t        self.std_checkbox = ctk.CTkCheckBox(\n   195\t            self.aggregation_checkboxes_frame,\n   196\t            text=\"Std Dev\",\n   197\t            variable=self.aggregation_vars['std'],\n   198\t            onvalue=True,\n   199\t            offvalue=False,\n   200\t            font=dropdown_font,\n   201\t            checkbox_width=16,\n   202\t            checkbox_height=16\n   203\t        )\n   204\t        self.std_checkbox.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n   205\t        \n   206\t        # Median checkbox\n   207\t        self.aggregation_vars['median'] = ctk.BooleanVar(value=False)\n   208\t        self.median_checkbox = ctk.CTkCheckBox(\n   209\t            self.aggregation_checkboxes_frame,\n   210\t            text=\"Median\",\n   211\t            variable=self.aggregation_vars['median'],\n   212\t            onvalue=True,\n   213\t            offvalue=False,\n   214\t            font=dropdown_font,\n   215\t            checkbox_width=16,\n   216\t            checkbox_height=16\n   217\t        )\n   218\t        self.median_checkbox.grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n   219\t        \n   220\t        # Aggregation only checkbox\n   221\t        self.aggregation_only_var = ctk.BooleanVar(value=False)\n   222\t        self.aggregation_only_checkbox = ctk.CTkCheckBox(\n   223\t            self.aggregation_frame,\n   224\t            text=\"Show Aggregation Only\",\n   225\t            variable=self.aggregation_only_var,\n   226\t            onvalue=True,\n   227\t            offvalue=False,\n   228\t            font=dropdown_font,\n   229\t            checkbox_width=16,\n   230\t            checkbox_height=16\n   231\t        )\n   232\t        self.aggregation_only_checkbox.grid(row=1, column=1, padx=5, pady=(0, 2), sticky=\"w\")\n   233\t        \n   234\t        # Time window selection frame\n   235\t        self.time_window_frame = ctk.CTkFrame(self)\n   236\t        self.time_window_frame.grid(row=6, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   237\t        self.time_window_frame.grid_columnconfigure(0, weight=1)\n   238\t        self.time_window_frame.grid_columnconfigure(1, weight=1)\n   239\t        self.time_window_frame.grid_columnconfigure(2, weight=1)\n   240\t        self.time_window_frame.grid_columnconfigure(3, weight=1)\n   241\t        \n   242\t        # Time window label\n   243\t        self.time_window_label = ctk.CTkLabel(\n   244\t            self.time_window_frame, \n   245\t            text=\"Time Window (s):\", \n   246\t            font=label_font\n   247\t        )\n   248\t        self.time_window_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   249\t        \n   250\t        # Start time entry\n   251\t        self.start_time_var = ctk.StringVar(value=\"0\")\n   252\t        self.start_time_entry = ctk.CTkEntry(\n   253\t            self.time_window_frame,\n   254\t            textvariable=self.start_time_var,\n   255\t            width=60,\n   256\t            height=25,\n   257\t            font=dropdown_font\n   258\t        )\n   259\t        self.start_time_entry.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   260\t        \n   261\t        # To label\n   262\t        self.to_label = ctk.CTkLabel(\n   263\t            self.time_window_frame, \n   264\t            text=\"to\", \n   265\t            font=label_font\n   266\t        )\n   267\t        self.to_label.grid(row=0, column=2, padx=2, pady=5)\n   268\t        \n   269\t        # End time entry\n   270\t        self.end_time_var = ctk.StringVar(value=\"\")\n   271\t        self.end_time_entry = ctk.CTkEntry(\n   272\t            self.time_window_frame,\n   273\t            textvariable=self.end_time_var,\n   274\t            width=60,\n   275\t            height=25,\n   276\t            font=dropdown_font\n   277\t        )\n   278\t        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n   279\t        \n   280\t        # Reset zoom button\n   281\t        self.reset_zoom_button = ctk.CTkButton(\n   282\t            self, \n   283\t            text=\"Reset Zoom\", \n   284\t            command=self.reset_time_window,\n   285\t            height=25,\n   286\t            font=dropdown_font\n   287\t        )\n   288\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   289\t        \n   290\t        # Update button - more compact\n   291\t        self.update_button = ctk.CTkButton(\n   292\t            self, \n   293\t            text=\"Update Plot\", \n   294\t            command=self.update_plot,\n   295\t            height=30,\n   296\t            font=get_button_font()\n   297\t        )\n   298\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 8), sticky=\"ew\")\n   299\t        \n   300\t        # Initialize with the first experiment if available\n   301\t        if self.experiments:\n   302\t            self.on_experiment_selected(experiment_names[0])\n   303\t    \n   304\t    def on_experiment_selected(self, selection: str):\n   305\t        \"\"\"\n   306\t        Handle experiment selection change.\n   307\t        \n   308\t        Args:\n   309\t            selection: Selected experiment name\n   310\t        \"\"\"\n   311\t        # Find the selected experiment\n   312\t        selected_exp = None\n   313\t        for exp in self.experiments:\n   314\t            if f\"{exp['name']} ({exp['run_name']})\" == selection:\n   315\t                selected_exp = exp\n   316\t                break\n   317\t        \n   318\t        if not selected_exp:\n   319\t            return\n   320\t        \n   321\t        # Update EEG dropdown\n   322\t        self.current_experiment_id = selected_exp['id']\n   323\t        eegs = self.db_handler.get_eegs_for_experiment(self.current_experiment_id)\n   324\t        eeg_names = [eeg['filename'] for eeg in eegs]\n   325\t        \n   326\t        self.eegs = eegs\n   327\t        self.eeg_dropdown.configure(values=eeg_names)\n   328\t        if eeg_names:\n   329\t            self.eeg_var.set(eeg_names[0])\n   330\t            self.on_eeg_selected(eeg_names[0])\n   331\t        else:\n   332\t            self.eeg_var.set(\"\")\n   333\t            self.clear_metrics()\n   334\t            self.clear_channels()\n   335\t    \n   336\t    def on_eeg_selected(self, selection: str):\n   337\t        \"\"\"\n   338\t        Handle EEG selection change.\n   339\t        \n   340\t        Args:\n   341\t            selection: Selected EEG name\n   342\t        \"\"\"\n   343\t        # Find the selected EEG\n   344\t        selected_eeg = None\n   345\t        for eeg in self.eegs:\n   346\t            if eeg['filename'] == selection:\n   347\t                selected_eeg = eeg\n   348\t                break\n   349\t        \n   350\t        if not selected_eeg:\n   351\t            return\n   352\t        \n   353\t        # Update metrics dropdown\n   354\t        self.current_eeg_id = selected_eeg['id']\n   355\t        self.update_metrics_dropdown()\n   356\t        self.update_channels_checkboxes()\n   357\t    \n   358\t    def on_metric_selected(self, selection: str):\n   359\t        \"\"\"\n   360\t        Handle metric selection change.\n   361\t        \n   362\t        Args:\n   363\t            selection: Selected metric name\n   364\t        \"\"\"\n   365\t        self.current_metric = selection\n   366\t    \n   367\t    def update_metrics_dropdown(self):\n   368\t        \"\"\"Update the metrics dropdown based on the selected experiment and EEG.\"\"\"\n   369\t        # Get available metrics\n   370\t        metrics = self.db_handler.get_available_metrics(self.current_experiment_id, self.current_eeg_id)\n   371\t        \n   372\t        # Update dropdown\n   373\t        self.metric_dropdown.configure(values=metrics)\n   374\t        if metrics:\n   375\t            self.metric_var.set(metrics[0])\n   376\t            self.current_metric = metrics[0]\n   377\t        else:\n   378\t            self.metric_var.set(\"\")\n   379\t            self.current_metric = None\n   380\t    \n   381\t    def update_channels_checkboxes(self):\n   382\t        \"\"\"Update the channel checkboxes based on the selected experiment and EEG.\"\"\"\n   383\t        # Clear existing checkboxes\n   384\t        self.clear_channels()\n   385\t        \n   386\t        # Get available channels\n   387\t        self.available_channels = self.db_handler.get_available_channels(self.current_experiment_id, self.current_eeg_id)\n   388\t        \n   389\t        # Add a search entry at the top of the channels frame\n   390\t        self.search_var = ctk.StringVar()\n   391\t        self.search_var.trace_add(\"write\", self.filter_channels)\n   392\t        \n   393\t        self.search_frame = ctk.CTkFrame(self.channels_frame)\n   394\t        self.search_frame.grid(row=0, column=0, padx=5, pady=5, sticky=\"ew\")\n   395\t        self.search_frame.grid_columnconfigure(0, weight=1)\n   396\t        \n   397\t        self.search_entry = ctk.CTkEntry(\n   398\t            self.search_frame,\n   399\t            placeholder_text=\"Search channels...\",\n   400\t            textvariable=self.search_var,\n   401\t            height=25,\n   402\t            font=get_dropdown_font()\n   403\t        )\n   404\t        self.search_entry.grid(row=0, column=0, padx=5, pady=3, sticky=\"ew\")\n   405\t        \n   406\t        # Create the channels container frame\n   407\t        self.channels_container = ctk.CTkFrame(self.channels_frame, fg_color=\"transparent\")\n   408\t        self.channels_container.grid(row=1, column=0, padx=5, pady=5, sticky=\"ew\")\n   409\t        \n   410\t        # Display all channels initially\n   411\t        self.display_channels(self.available_channels)\n   412\t    \n   413\t    def display_channels(self, channels: List[str]):\n   414\t        \"\"\"\n   415\t        Display the given channels as checkboxes.\n   416\t        \n   417\t        Args:\n   418\t            channels: List of channel names to display\n   419\t        \"\"\"\n   420\t        # Clear existing checkboxes in the container\n   421\t        for widget in self.channels_container.winfo_children():\n   422\t            widget.destroy()\n   423\t        \n   424\t        # Configure the container for proper scrolling\n   425\t        self.channels_container.grid_columnconfigure(0, weight=1)\n   426\t        \n   427\t        # Sort channels alphabetically to ensure consistent display\n   428\t        sorted_channels = sorted(channels)\n   429\t        \n   430\t        # Create a checkbox for each channel\n   431\t        for i, channel in enumerate(sorted_channels):\n   432\t            var = self.channel_vars.get(channel, ctk.BooleanVar(value=False))\n   433\t            self.channel_vars[channel] = var\n   434\t            \n   435\t            # Create more compact checkboxes\n   436\t            checkbox = ctk.CTkCheckBox(\n   437\t                self.channels_container, \n   438\t                text=channel, \n   439\t                variable=var,\n   440\t                onvalue=True, \n   441\t                offvalue=False,\n   442\t                height=20,\n   443\t                font=get_dropdown_font(),\n   444\t                checkbox_width=16,\n   445\t                checkbox_height=16\n   446\t            )\n   447\t            checkbox.grid(row=i, column=0, padx=8, pady=3, sticky=\"w\")\n   448\t            \n   449\t            # Bind mouse wheel event to each checkbox for better scrolling\n   450\t            checkbox.bind(\"<MouseWheel>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   451\t            checkbox.bind(\"<Button-4>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   452\t            checkbox.bind(\"<Button-5>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   453\t    \n   454\t    def filter_channels(self, *args):\n   455\t        \"\"\"Filter channels based on search text.\"\"\"\n   456\t        search_text = self.search_var.get().lower()\n   457\t        \n   458\t        if not search_text:\n   459\t            # If search is empty, show all channels\n   460\t            filtered_channels = self.available_channels\n   461\t        else:\n   462\t            # Filter channels that contain the search text\n   463\t            filtered_channels = [ch for ch in self.available_channels if search_text in ch.lower()]\n   464\t            \n   465\t            # Sort the filtered channels alphabetically\n   466\t            filtered_channels.sort()\n   467\t        \n   468\t        # Update the displayed channels\n   469\t        self.display_channels(filtered_channels)\n   470\t    \n   471\t    def bind_mouse_wheel(self, widget):\n   472\t        \"\"\"\n   473\t        Bind mouse wheel events to the widget for scrolling.\n   474\t        \n   475\t        Args:\n   476\t            widget: The widget to bind mouse wheel events to\n   477\t        \"\"\"\n   478\t        # Bind for Windows and Linux (with mouse wheel)\n   479\t        widget.bind_all(\"<MouseWheel>\", lambda event: self._on_mouse_wheel(event, widget))\n   480\t        # Bind for Linux (with touchpad)\n   481\t        widget.bind_all(\"<Button-4>\", lambda event: self._on_mouse_wheel(event, widget))\n   482\t        widget.bind_all(\"<Button-5>\", lambda event: self._on_mouse_wheel(event, widget))\n   483\t    \n   484\t    def _on_mouse_wheel(self, event, widget):\n   485\t        \"\"\"\n   486\t        Handle mouse wheel events for scrolling.\n   487\t        \n   488\t        Args:\n   489\t            event: The mouse wheel event\n   490\t            widget: The widget to scroll\n   491\t        \"\"\"\n   492\t        # Get the widget under the cursor\n   493\t        x, y = event.x_root, event.y_root\n   494\t        target_widget = event.widget.winfo_containing(x, y)\n   495\t        \n   496\t        # Check if the cursor is over our scrollable frame or its children\n   497\t        parent = target_widget\n   498\t        while parent is not None:\n   499\t            if parent == widget or parent == self.channels_container:\n   500\t                break\n   501\t            parent = parent.master\n   502\t        \n   503\t        # If cursor is not over our scrollable area, don't scroll\n   504\t        if parent is None:\n   505\t            return\n   506\t        \n   507\t        # Handle different event types\n   508\t        if event.num == 4 or event.delta > 0:  # Scroll up\n   509\t            widget._parent_canvas.yview_scroll(-1, \"units\")\n   510\t        elif event.num == 5 or event.delta < 0:  # Scroll down\n   511\t            widget._parent_canvas.yview_scroll(1, \"units\")\n   512\t    \n   513\t    def clear_channels(self):\n   514\t        \"\"\"Clear all channel checkboxes and related widgets.\"\"\"\n   515\t        for widget in self.channels_frame.winfo_children():\n   516\t            widget.destroy()\n   517\t        \n   518\t        self.channel_vars = {}\n   519\t        self.available_channels = []\n   520\t    \n   521\t    def clear_metrics(self):\n   522\t        \"\"\"Clear the metrics dropdown.\"\"\"\n   523\t        self.metric_dropdown.configure(values=[])\n   524\t        self.metric_var.set(\"\")\n   525\t        self.current_metric = None\n   526\t    \n   527\t    def select_all_channels(self):\n   528\t        \"\"\"Select all channel checkboxes.\"\"\"\n   529\t        for var in self.channel_vars.values():\n   530\t            var.set(True)\n   531\t    \n   532\t    def deselect_all_channels(self):\n   533\t        \"\"\"Deselect all channel checkboxes.\"\"\"\n   534\t        for var in self.channel_vars.values():\n   535\t            var.set(False)\n   536\t    \n   537\t    def select_common_channels(self):\n   538\t        \"\"\"Select common EEG channels (10-20 system).\"\"\"\n   539\t        # First deselect all\n   540\t        self.deselect_all_channels()\n   541\t        \n   542\t        # Select the channels if they exist in our available channels\n   543\t        for channel in COMMON_CHANNELS:\n   544\t            if channel in self.channel_vars:\n   545\t                self.channel_vars[channel].set(True)\n   546\t            # Try alternative name if the channel doesn't exist\n   547\t            elif channel in ALTERNATIVE_CHANNEL_NAMES and ALTERNATIVE_CHANNEL_NAMES[channel] in self.channel_vars:\n   548\t                self.channel_vars[ALTERNATIVE_CHANNEL_NAMES[channel]].set(True)\n   549\t        \n   550\t        # If we have a search filter active, update the display\n   551\t        if hasattr(self, 'search_var'):\n   552\t            self.filter_channels()\n   553\t    \n   554\t    def reset_time_window(self):\n   555\t        \"\"\"Reset the time window to show all data.\"\"\"\n   556\t        self.start_time_var.set(\"0\")\n   557\t        self.end_time_var.set(\"\")\n   558\t        self.update_plot()\n   559\t    \n   560\t    def update_plot(self):\n   561\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   562\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   563\t            return\n   564\t        \n   565\t        # Get selected channels\n   566\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   567\t        \n   568\t        # Get selected aggregation methods\n   569\t        selected_aggregations = [agg for agg, var in self.aggregation_vars.items() if var.get()]\n   570\t        \n   571\t        # Check if we should show only aggregations\n   572\t        aggregation_only = self.aggregation_only_var.get()\n   573\t        \n   574\t        # Check if we have valid selections\n   575\t        if (not selected_channels and not selected_aggregations) or \\\n   576\t           (aggregation_only and not selected_aggregations):\n   577\t            self.plot_frame.update_plot(None, None, None, \"No channels or aggregations selected\")\n   578\t            return\n   579\t        \n   580\t        # Get data for the selected experiment and EEG\n   581\t        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n   582\t        \n   583\t        if df.empty:\n   584\t            self.plot_frame.update_plot(None, None, None, \"No data available\")\n   585\t            return\n   586\t        \n   587\t        # Get time window values\n   588\t        try:\n   589\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   590\t        except ValueError:\n   591\t            start_time = None\n   592\t            self.start_time_var.set(\"0\")\n   593\t        \n   594\t        try:\n   595\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   596\t        except ValueError:\n   597\t            end_time = None\n   598\t            self.end_time_var.set(\"\")\n   599\t        \n   600\t        # Update the plot\n   601\t        experiment_name = next((exp['name'] for exp in self.experiments if exp['id'] == self.current_experiment_id), \"\")\n   602\t        eeg_name = next((eeg['filename'] for eeg in self.eegs if eeg['id'] == self.current_eeg_id), \"\")\n   603\t        \n   604\t        title = f\"{self.current_metric} for {experiment_name} - {eeg_name}\"\n   605\t        \n   606\t        # Add aggregation-only info to title if specified\n   607\t        if aggregation_only and selected_aggregations:\n   608\t            title += \" (Aggregation Only)\"\n   609\t        \n   610\t        # Add time window info to title if specified\n   611\t        if start_time is not None and end_time is not None:\n   612\t            title += f\" (Time: {start_time}s to {end_time}s)\"\n   613\t        elif start_time is not None:\n   614\t            title += f\" (Time: {start_time}s+)\"\n   615\t        \n   616\t        self.plot_frame.update_plot(\n   617\t            df, \n   618\t            self.current_metric, \n   619\t            selected_channels, \n   620\t            title, \n   621\t            time_window=(start_time, end_time),\n   622\t            aggregations=selected_aggregations,\n   623\t            aggregation_only=aggregation_only\n   624\t        )\n   625\t\nTotal lines in file: 625\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_019FHsBzshwHTEEB6Tqf77on"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"","workspace_file_chunks":[]},{"status":"success","request_id":"5ceeeab7-b0e9-4dd7-b61e-fdc8ef82ee9a","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01C8a4DrVvTqZ4cp6qNrrPwn","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/run_metrics_viewer.py\"}"}},{"id":0,"type":0,"content":""},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/utils.py:\n     1\t\"\"\"\n     2\tUtility functions and constants for the EEG Metrics Viewer.\n     3\t\"\"\"\n     4\t\n     5\tfrom typing import Dict, List, Tuple\n     6\timport customtkinter as ctk\n     7\t\n     8\t# Common metadata columns that are not EEG channels\n     9\tMETADATA_COLUMNS = ['eeg_id', 'label', 'startDataRecord', 'duration', 'metric']\n    10\t\n    11\t# Aggregation colors and styles\n    12\tAGGREGATION_COLORS: Dict[str, str] = {\n    13\t    'mean': 'red',\n    14\t    'std': 'purple',\n    15\t    'median': 'green'\n    16\t}\n    17\t\n    18\tAGGREGATION_STYLES: Dict[str, str] = {\n    19\t    'mean': '-',\n    20\t    'std': '--',\n    21\t    'median': '-.'\n    22\t}\n    23\t\n    24\t# Common 10-20 system channels (in alphabetical order)\n    25\tCOMMON_CHANNELS: List[str] = [\n    26\t    'C3', 'C4', 'Cz', 'F3', 'F4', 'F7', 'F8', 'Fp1', 'Fp2', 'Fz',\n    27\t    'O1', 'O2', 'P3', 'P4', 'P7', 'P8', 'Pz', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8'\n    28\t]\n    29\t\n    30\t# Map of alternative channel names (old -> new and new -> old)\n    31\tALTERNATIVE_CHANNEL_NAMES: Dict[str, str] = {\n    32\t    'T3': 'T7', 'T4': 'T8', 'T5': 'P7', 'T6': 'P8',\n    33\t    'T7': 'T3', 'T8': 'T4', 'P7': 'T5', 'P8': 'T6'\n    34\t}\n    35\t\n    36\t# Font configurations\n    37\tdef get_label_font() -> ctk.CTkFont:\n    38\t    \"\"\"Return a font for labels.\"\"\"\n    39\t    return ctk.CTkFont(size=12)\n    40\t\n    41\tdef get_dropdown_font() -> ctk.CTkFont:\n    42\t    \"\"\"Return a font for dropdowns and smaller text.\"\"\"\n    43\t    return ctk.CTkFont(size=11)\n    44\t\n    45\tdef get_button_font() -> ctk.CTkFont:\n    46\t    \"\"\"Return a font for buttons.\"\"\"\n    47\t    return ctk.CTkFont(size=14, weight=\"bold\")\n    48\t\nTotal lines in file: 48\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01WVEme2mGU6a4Fw1pztEwUM"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"","workspace_file_chunks":[]},{"status":"success","request_id":"34d22d62-6726-402f-beb3-7220007f647c","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"Based on my analysis of the code, I can provide you with a comprehensive overview of the `@gui` directory and how it works:\n\n## Overview of the GUI Components\n\nThe `@gui` directory contains a metrics viewer application for EEG (Electroencephalogram) data analysis. The main components are:\n\n### 1. Main Application Structure\n\nThe GUI is built using `customtkinter`, which is a modern-looking extension of the standard Tkinter library. The application follows a modular design with these key components:\n\n<augment_code_snippet path=\"gui/metrics_viewer/app.py\" mode=\"EXCERPT\">\n```python\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n```\n</augment_code_snippet>\n\n### 2. Database Handler\n\nThe `DatabaseHandler` class manages interactions with a SQLite database containing EEG metrics data:\n\n<augment_code_snippet path=\"gui/metrics_viewer/database_handler.py\" mode=\"EXCERPT\">\n```python\nclass DatabaseHandler:\n    \"\"\"\n    Handles interactions with the SQLite database containing EEG metrics.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        self.db_path = db_path\n        self.engine = Alchemist.initialize_tables(db_path)\n        self.session = Alchemist.Session(self.engine)\n```\n</augment_code_snippet>\n\nKey functionalities:\n- Retrieves experiments, EEGs, and metrics data from the database\n- Provides methods to get available metrics and channels for visualization\n\n### 3. Plot Frame\n\nThe `MetricsPlotFrame` class handles the visualization of EEG metrics data using Matplotlib:\n\n<augment_code_snippet path=\"gui/metrics_viewer/plot_frame.py\" mode=\"EXCERPT\">\n```python\nclass MetricsPlotFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing a matplotlib figure for plotting metrics.\n    \"\"\"\n\n    def __init__(self, master, title=\"Metrics Plot\", **kwargs):\n        # Create matplotlib figure with larger size\n        self.figure = Figure(figsize=(12, 7), dpi=100)\n        self.plot = self.figure.add_subplot(111)\n```\n</augment_code_snippet>\n\nKey features:\n- Displays time-series plots of EEG metrics\n- Supports interactive zooming with mouse drag\n- Can show individual channels and aggregations (mean, median, standard deviation)\n- Allows time window filtering\n\n### 4. Selection Frame\n\nThe `SelectionFrame` class provides the UI for selecting data to visualize:\n\n<augment_code_snippet path=\"gui/metrics_viewer/selection_frame.py\" mode=\"EXCERPT\">\n```python\nclass SelectionFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    \"\"\"\n    \n    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n        self.db_handler = db_handler\n        self.plot_frame = plot_frame\n```\n</augment_code_snippet>\n\nKey components:\n- Dropdown menus for selecting experiments, EEGs, and metrics\n- Checkboxes for selecting channels with search functionality\n- Options for aggregation methods (mean, standard deviation, median)\n- Time window selection for focusing on specific time ranges\n- Buttons for common operations (select all channels, reset zoom, etc.)\n\n### 5. Utilities\n\nThe `utils.py` file contains constants and helper functions:\n\n<augment_code_snippet path=\"gui/metrics_viewer/utils.py\" mode=\"EXCERPT\">\n```python\n# Common metadata columns that are not EEG channels\nMETADATA_COLUMNS = ['eeg_id', 'label', 'startDataRecord', 'duration', 'metric']\n\n# Aggregation colors and styles\nAGGREGATION_COLORS: Dict[str, str] = {\n    'mean': 'red',\n    'std': 'purple',\n    'median': 'green'\n}\n```\n</augment_code_snippet>\n\n### 6. Application Entry Point\n\nThe `run_metrics_viewer.py` script serves as the entry point for the application:\n\n<augment_code_snippet path=\"gui/run_metrics_viewer.py\" mode=\"EXCERPT\">\n```python\ndef main():\n    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    # Check dependencies first\n    if not check_dependencies():\n        sys.exit(1)\n\n    # Import App only after checking dependencies\n    from metrics_viewer import App\n\n    # Check if a database path is provided as a command-line argument\n    if len(sys.argv) > 1:\n        db_path = sys.argv[1]\n    else:\n        # Default database path\n        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                              \"example\", \"EEGAnalyzer.sqlite\")\n```\n</augment_code_snippet>\n\n## How the Application Works\n\n1. **Initialization**: The application starts by initializing the database connection and creating the main UI components.\n\n2. **Data Flow**:\n   - The user selects an experiment from the dropdown menu\n   - This triggers loading of available EEGs for that experiment\n   - When an EEG is selected, available metrics and channels are loaded\n   - The user selects metrics, channels, and visualization options\n   - Clicking \"Update Plot\" retrieves the data and updates the visualization\n\n3. **Interactive Features**:\n   - Users can zoom in on specific time ranges by dragging on the plot\n   - Channel selection includes search functionality and preset options\n   - Aggregation methods can be applied to visualize trends across channels\n\n4. **Dependencies**:\n   - The application relies on external libraries like customtkinter, matplotlib, pandas, and SQLAlchemy\n   - It integrates with an `OOP_Analyzer` module (specifically the `Alchemist` class) for database operations\n\nThis GUI provides a comprehensive tool for visualizing and analyzing EEG metrics data stored in a SQLite database, with a focus on flexibility and user-friendly interaction.\n"},{"id":2,"type":2,"content":"Based on my analysis of the code, I can provide you with a comprehensive overview of the `@gui` directory and how it works:\n\n## Overview of the GUI Components\n\nThe `@gui` directory contains a metrics viewer application for EEG (Electroencephalogram) data analysis. The main components are:\n\n### 1. Main Application Structure\n\nThe GUI is built using `customtkinter`, which is a modern-looking extension of the standard Tkinter library. The application follows a modular design with these key components:\n\n````python path=gui/metrics_viewer/app.py mode=EXCERPT\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n````\n\n### 2. Database Handler\n\nThe `DatabaseHandler` class manages interactions with a SQLite database containing EEG metrics data:\n\n````python path=gui/metrics_viewer/database_handler.py mode=EXCERPT\nclass DatabaseHandler:\n    \"\"\"\n    Handles interactions with the SQLite database containing EEG metrics.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        self.db_path = db_path\n        self.engine = Alchemist.initialize_tables(db_path)\n        self.session = Alchemist.Session(self.engine)\n````\n\nKey functionalities:\n- Retrieves experiments, EEGs, and metrics data from the database\n- Provides methods to get available metrics and channels for visualization\n\n### 3. Plot Frame\n\nThe `MetricsPlotFrame` class handles the visualization of EEG metrics data using Matplotlib:\n\n````python path=gui/metrics_viewer/plot_frame.py mode=EXCERPT\nclass MetricsPlotFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing a matplotlib figure for plotting metrics.\n    \"\"\"\n\n    def __init__(self, master, title=\"Metrics Plot\", **kwargs):\n        # Create matplotlib figure with larger size\n        self.figure = Figure(figsize=(12, 7), dpi=100)\n        self.plot = self.figure.add_subplot(111)\n````\n\nKey features:\n- Displays time-series plots of EEG metrics\n- Supports interactive zooming with mouse drag\n- Can show individual channels and aggregations (mean, median, standard deviation)\n- Allows time window filtering\n\n### 4. Selection Frame\n\nThe `SelectionFrame` class provides the UI for selecting data to visualize:\n\n````python path=gui/metrics_viewer/selection_frame.py mode=EXCERPT\nclass SelectionFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    \"\"\"\n    \n    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n        self.db_handler = db_handler\n        self.plot_frame = plot_frame\n````\n\nKey components:\n- Dropdown menus for selecting experiments, EEGs, and metrics\n- Checkboxes for selecting channels with search functionality\n- Options for aggregation methods (mean, standard deviation, median)\n- Time window selection for focusing on specific time ranges\n- Buttons for common operations (select all channels, reset zoom, etc.)\n\n### 5. Utilities\n\nThe `utils.py` file contains constants and helper functions:\n\n````python path=gui/metrics_viewer/utils.py mode=EXCERPT\n# Common metadata columns that are not EEG channels\nMETADATA_COLUMNS = ['eeg_id', 'label', 'startDataRecord', 'duration', 'metric']\n\n# Aggregation colors and styles\nAGGREGATION_COLORS: Dict[str, str] = {\n    'mean': 'red',\n    'std': 'purple',\n    'median': 'green'\n}\n````\n\n### 6. Application Entry Point\n\nThe `run_metrics_viewer.py` script serves as the entry point for the application:\n\n````python path=gui/run_metrics_viewer.py mode=EXCERPT\ndef main():\n    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    # Check dependencies first\n    if not check_dependencies():\n        sys.exit(1)\n\n    # Import App only after checking dependencies\n    from metrics_viewer import App\n\n    # Check if a database path is provided as a command-line argument\n    if len(sys.argv) > 1:\n        db_path = sys.argv[1]\n    else:\n        # Default database path\n        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                              \"example\", \"EEGAnalyzer.sqlite\")\n````\n\n## How the Application Works\n\n1. **Initialization**: The application starts by initializing the database connection and creating the main UI components.\n\n2. **Data Flow**:\n   - The user selects an experiment from the dropdown menu\n   - This triggers loading of available EEGs for that experiment\n   - When an EEG is selected, available metrics and channels are loaded\n   - The user selects metrics, channels, and visualization options\n   - Clicking \"Update Plot\" retrieves the data and updates the visualization\n\n3. **Interactive Features**:\n   - Users can zoom in on specific time ranges by dragging on the plot\n   - Channel selection includes search functionality and preset options\n   - Aggregation methods can be applied to visualize trends across channels\n\n4. **Dependencies**:\n   - The application relies on external libraries like customtkinter, matplotlib, pandas, and SQLAlchemy\n   - It integrates with an `OOP_Analyzer` module (specifically the `Alchemist` class) for database operations\n\nThis GUI provides a comprehensive tool for visualizing and analyzing EEG metrics data stored in a SQLite database, with a focus on flexibility and user-friendly interaction.\n"},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/run_metrics_viewer.py:\n     1\t#!/usr/bin/env python3\n     2\t\"\"\"\n     3\tRun script for the EEG Metrics Viewer.\n     4\t\n     5\tThis script provides a simple way to launch the EEG Metrics Viewer application\n     6\twith a specified database path.\n     7\t\n     8\tUsage:\n     9\t    python run_metrics_viewer.py [path_to_database]\n    10\t\n    11\tIf no database path is provided, the script will look for the default database\n    12\tat \"../example/EEGAnalyzer.sqlite\".\n    13\t\"\"\"\n    14\t\n    15\timport os\n    16\timport sys\n    17\timport importlib.util\n    18\t\n    19\tdef check_dependencies():\n    20\t    \"\"\"Check if all required dependencies are installed.\"\"\"\n    21\t    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\"]\n    22\t    missing_packages = []\n    23\t\n    24\t    for package in required_packages:\n    25\t        if importlib.util.find_spec(package) is None:\n    26\t            missing_packages.append(package)\n    27\t\n    28\t    if missing_packages:\n    29\t        print(\"The following required packages are missing:\")\n    30\t        for package in missing_packages:\n    31\t            print(f\"  - {package}\")\n    32\t        print(\"\\nPlease install them using:\")\n    33\t        print(\"  python install_dependencies.py\")\n    34\t        print(\"or\")\n    35\t        print(f\"  pip install {' '.join(missing_packages)}\")\n    36\t        return False\n    37\t\n    38\t    return True\n    39\t\n    40\tdef main():\n    41\t    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    42\t    # Check dependencies first\n    43\t    if not check_dependencies():\n    44\t        sys.exit(1)\n    45\t\n    46\t    # Import App only after checking dependencies\n    47\t    from metrics_viewer import App\n    48\t\n    49\t    # Check if a database path is provided as a command-line argument\n    50\t    if len(sys.argv) > 1:\n    51\t        db_path = sys.argv[1]\n    52\t    else:\n    53\t        # Default database path\n    54\t        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n    55\t                              \"example\", \"EEGAnalyzer.sqlite\")\n    56\t\n    57\t    # Ensure the database file exists\n    58\t    if not os.path.exists(db_path):\n    59\t        print(f\"Error: Database file not found at {db_path}\")\n    60\t        print(\"Please provide a valid path to the EEGAnalyzer.sqlite database.\")\n    61\t        sys.exit(1)\n    62\t\n    63\t    print(f\"Starting EEG Metrics Viewer with database: {db_path}\")\n    64\t\n    65\t    # Start the application\n    66\t    app = App(db_path)\n    67\t    app.mainloop()\n    68\t\n    69\tif __name__ == \"__main__\":\n    70\t    main()\n    71\t\nTotal lines in file: 71\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01C8a4DrVvTqZ4cp6qNrrPwn"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Based on my analysis of the code, I can provide you with a comprehensive overview of the `@gui` directory and how it works:\n\n## Overview of the GUI Components\n\nThe `@gui` directory contains a metrics viewer application for EEG (Electroencephalogram) data analysis. The main components are:\n\n### 1. Main Application Structure\n\nThe GUI is built using `customtkinter`, which is a modern-looking extension of the standard Tkinter library. The application follows a modular design with these key components:\n\n````python path=gui/metrics_viewer/app.py mode=EXCERPT\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n````\n\n### 2. Database Handler\n\nThe `DatabaseHandler` class manages interactions with a SQLite database containing EEG metrics data:\n\n````python path=gui/metrics_viewer/database_handler.py mode=EXCERPT\nclass DatabaseHandler:\n    \"\"\"\n    Handles interactions with the SQLite database containing EEG metrics.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        self.db_path = db_path\n        self.engine = Alchemist.initialize_tables(db_path)\n        self.session = Alchemist.Session(self.engine)\n````\n\nKey functionalities:\n- Retrieves experiments, EEGs, and metrics data from the database\n- Provides methods to get available metrics and channels for visualization\n\n### 3. Plot Frame\n\nThe `MetricsPlotFrame` class handles the visualization of EEG metrics data using Matplotlib:\n\n````python path=gui/metrics_viewer/plot_frame.py mode=EXCERPT\nclass MetricsPlotFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing a matplotlib figure for plotting metrics.\n    \"\"\"\n\n    def __init__(self, master, title=\"Metrics Plot\", **kwargs):\n        # Create matplotlib figure with larger size\n        self.figure = Figure(figsize=(12, 7), dpi=100)\n        self.plot = self.figure.add_subplot(111)\n````\n\nKey features:\n- Displays time-series plots of EEG metrics\n- Supports interactive zooming with mouse drag\n- Can show individual channels and aggregations (mean, median, standard deviation)\n- Allows time window filtering\n\n### 4. Selection Frame\n\nThe `SelectionFrame` class provides the UI for selecting data to visualize:\n\n````python path=gui/metrics_viewer/selection_frame.py mode=EXCERPT\nclass SelectionFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    \"\"\"\n    \n    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n        self.db_handler = db_handler\n        self.plot_frame = plot_frame\n````\n\nKey components:\n- Dropdown menus for selecting experiments, EEGs, and metrics\n- Checkboxes for selecting channels with search functionality\n- Options for aggregation methods (mean, standard deviation, median)\n- Time window selection for focusing on specific time ranges\n- Buttons for common operations (select all channels, reset zoom, etc.)\n\n### 5. Utilities\n\nThe `utils.py` file contains constants and helper functions:\n\n````python path=gui/metrics_viewer/utils.py mode=EXCERPT\n# Common metadata columns that are not EEG channels\nMETADATA_COLUMNS = ['eeg_id', 'label', 'startDataRecord', 'duration', 'metric']\n\n# Aggregation colors and styles\nAGGREGATION_COLORS: Dict[str, str] = {\n    'mean': 'red',\n    'std': 'purple',\n    'median': 'green'\n}\n````\n\n### 6. Application Entry Point\n\nThe `run_metrics_viewer.py` script serves as the entry point for the application:\n\n````python path=gui/run_metrics_viewer.py mode=EXCERPT\ndef main():\n    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    # Check dependencies first\n    if not check_dependencies():\n        sys.exit(1)\n\n    # Import App only after checking dependencies\n    from metrics_viewer import App\n\n    # Check if a database path is provided as a command-line argument\n    if len(sys.argv) > 1:\n        db_path = sys.argv[1]\n    else:\n        # Default database path\n        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                              \"example\", \"EEGAnalyzer.sqlite\")\n````\n\n## How the Application Works\n\n1. **Initialization**: The application starts by initializing the database connection and creating the main UI components.\n\n2. **Data Flow**:\n   - The user selects an experiment from the dropdown menu\n   - This triggers loading of available EEGs for that experiment\n   - When an EEG is selected, available metrics and channels are loaded\n   - The user selects metrics, channels, and visualization options\n   - Clicking \"Update Plot\" retrieves the data and updates the visualization\n\n3. **Interactive Features**:\n   - Users can zoom in on specific time ranges by dragging on the plot\n   - Channel selection includes search functionality and preset options\n   - Aggregation methods can be applied to visualize trends across channels\n\n4. **Dependencies**:\n   - The application relies on external libraries like customtkinter, matplotlib, pandas, and SQLAlchemy\n   - It integrates with an `OOP_Analyzer` module (specifically the `Alchemist` class) for database operations\n\nThis GUI provides a comprehensive tool for visualizing and analyzing EEG metrics data stored in a SQLite database, with a focus on flexibility and user-friendly interaction.\n","workspace_file_chunks":[]},{"request_id":"e958de21-3e4d-44ad-a8c0-0f9b9432cd0d","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"de1ca3f8-2373-4182-8617-09760e7625ab","request_message":"ok, lets continue on its development. The next feature we implement is a button which uses mne to render the eeg file from which we created the metrics. The file should automatically display the current zoomed section of the metrics within the gui","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"ok, lets continue on its development. The next feature we implement is a button which uses mne to render the eeg file from which we created the metrics. The file should automatically display the current zoomed section of the metrics within the gui"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_018yGvEyXamkvQByy7xSoyA3","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Search for any existing MNE imports or usage in the codebase, particularly in relation to EEG file handling or visualization.\"}"}},{"id":0,"type":0,"content":"I'll help you implement a button that uses MNE to render the EEG file from which the metrics were created, and ensure it displays the current zoomed section of the metrics. Let me first gather information about the current codebase and MNE integration possibilities.\n\n## Planning\n\nLet me first check if MNE is already being used in the codebase:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"ok, lets continue on its development. The next feature we implement is a button which uses mne to render the eeg file from which we created the metrics. The file should automatically display the current zoomed section of the metrics within the gui"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"I'll help you implement a button that uses MNE to render the EEG file from which the metrics were created, and ensure it displays the current zoomed section of the metrics. Let me first gather information about the current codebase and MNE integration possibilities.\n\n## Planning\n\nLet me first check if MNE is already being used in the codebase:\n","workspace_file_chunks":[]},{"status":"success","request_id":"89f0a4e3-0c6a-478d-998e-6e46de8b2634","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01K4GdFbTThxDYa96ZrNwkpd","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/install_dependencies.py\"}"}},{"id":0,"type":0,"content":"Let me check if MNE is listed as a dependency:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_018yGvEyXamkvQByy7xSoyA3"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let me check if MNE is listed as a dependency:\n","workspace_file_chunks":[]},{"status":"success","request_id":"c8841e01-7194-4e2d-8353-764fd900d9b9","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01DdAo7KxKMiDh6yJVfzLRR4","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me how EEG files are referenced in the database. Look for filepath or filename fields in the database_handler.py or related files.\"}"}},{"id":0,"type":0,"content":"Now, let me check how the EEG files are referenced in the database to understand how to access them:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/install_dependencies.py:\n     1\t#!/usr/bin/env python3\n     2\t\"\"\"\n     3\tScript to install the required dependencies for the EEG Metrics Viewer.\n     4\t\n     5\tThis script checks if the required packages are installed and installs them if needed.\n     6\t\"\"\"\n     7\t\n     8\timport sys\n     9\timport subprocess\n    10\timport importlib.util\n    11\t\n    12\tdef check_package(package_name):\n    13\t    \"\"\"Check if a package is installed.\"\"\"\n    14\t    return importlib.util.find_spec(package_name) is not None\n    15\t\n    16\tdef install_package(package_name):\n    17\t    \"\"\"Install a package using pip.\"\"\"\n    18\t    print(f\"Installing {package_name}...\")\n    19\t    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package_name])\n    20\t    print(f\"{package_name} installed successfully.\")\n    21\t\n    22\tdef main():\n    23\t    \"\"\"Check and install required packages.\"\"\"\n    24\t    required_packages = [\n    25\t        \"customtkinter\",\n    26\t        \"matplotlib\",\n    27\t        \"numpy\",\n    28\t        \"pandas\",\n    29\t        \"sqlalchemy\"\n    30\t    ]\n    31\t    \n    32\t    missing_packages = []\n    33\t    \n    34\t    # Check which packages are missing\n    35\t    for package in required_packages:\n    36\t        if not check_package(package):\n    37\t            missing_packages.append(package)\n    38\t    \n    39\t    # Install missing packages\n    40\t    if missing_packages:\n    41\t        print(f\"The following packages need to be installed: {', '.join(missing_packages)}\")\n    42\t        try:\n    43\t            for package in missing_packages:\n    44\t                install_package(package)\n    45\t            print(\"All required packages have been installed.\")\n    46\t        except Exception as e:\n    47\t            print(f\"Error installing packages: {e}\")\n    48\t            print(\"Please install the required packages manually:\")\n    49\t            for package in missing_packages:\n    50\t                print(f\"  pip install {package}\")\n    51\t            sys.exit(1)\n    52\t    else:\n    53\t        print(\"All required packages are already installed.\")\n    54\t\n    55\tif __name__ == \"__main__\":\n    56\t    main()\n    57\t\nTotal lines in file: 57\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01K4GdFbTThxDYa96ZrNwkpd"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Now, let me check how the EEG files are referenced in the database to understand how to access them:\n","workspace_file_chunks":[]},{"status":"success","request_id":"43c7e231-94de-4f2d-a5f9-ee2144f23230","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01K29GR2jCGK2GD5rHBEBi3v","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me the get_eegs_for_experiment method in the DatabaseHandler class and any other methods that retrieve EEG file information.\"}"}},{"id":0,"type":0,"content":"Let me look at the database handler more specifically:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01DdAo7KxKMiDh6yJVfzLRR4"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let me look at the database handler more specifically:\n","workspace_file_chunks":[]},{"status":"success","request_id":"9d0c5801-8cd3-4af9-b0d0-f07e9b98c631","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01EWoWpPcmUzoZU2fHGvWHiz","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/database_handler.py\", \"view_range\": [50, 70]}"}},{"id":0,"type":0,"content":"Let me look at the database handler directly:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01K29GR2jCGK2GD5rHBEBi3v"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let me look at the database handler directly:\n","workspace_file_chunks":[]},{"status":"success","request_id":"d4dd3f42-cab1-4dae-8867-b34fd52a9eae","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_018FmspwBGmEV9CSyKnuG6Da","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"view_range\": [280, 300]}"}},{"id":0,"type":0,"content":"Great! I can see that the EEG files have both a filename and filepath stored in the database. Now let's check how the selection frame is structured to understand where to add our new button:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/database_handler.py:\n    50\t    \n    51\t    def get_eegs_for_experiment(self, experiment_id: str) -> List[Dict[str, Any]]:\n    52\t        \"\"\"\n    53\t        Get all EEGs associated with a specific experiment.\n    54\t        \n    55\t        Args:\n    56\t            experiment_id: ID of the experiment\n    57\t            \n    58\t        Returns:\n    59\t            List of dictionaries containing EEG information\n    60\t        \"\"\"\n    61\t        experiment = self.session.get(Alchemist.Experiment, experiment_id)\n    62\t        if not experiment:\n    63\t            return []\n    64\t        \n    65\t        return [{'id': eeg.id, 'filename': eeg.filename, 'filepath': eeg.filepath} for eeg in experiment.eegs]\n    66\t    \n    67\t    def get_metrics_data(self, experiment_id: str, eeg_id: str) -> pd.DataFrame:\n    68\t        \"\"\"\n    69\t        Get metrics data for a specific experiment and EEG.\n    70\t        \nTotal lines in file: 126\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01EWoWpPcmUzoZU2fHGvWHiz"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Great! I can see that the EEG files have both a filename and filepath stored in the database. Now let's check how the selection frame is structured to understand where to add our new button:\n","workspace_file_chunks":[]},{"status":"success","request_id":"fef3f673-80cc-464b-afd2-24dce6df6a01","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_016KYRrGbDHfhmcRUcCn7iQ8","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Show me how the current EEG file is stored or referenced in the SelectionFrame class. Look for variables like current_eeg_id, selected_eeg, or similar.\"}"}},{"id":0,"type":0,"content":"Now, let's check if we have access to the current EEG file information in the selection frame:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   280\t        # Reset zoom button\n   281\t        self.reset_zoom_button = ctk.CTkButton(\n   282\t            self, \n   283\t            text=\"Reset Zoom\", \n   284\t            command=self.reset_time_window,\n   285\t            height=25,\n   286\t            font=dropdown_font\n   287\t        )\n   288\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   289\t        \n   290\t        # Update button - more compact\n   291\t        self.update_button = ctk.CTkButton(\n   292\t            self, \n   293\t            text=\"Update Plot\", \n   294\t            command=self.update_plot,\n   295\t            height=30,\n   296\t            font=get_button_font()\n   297\t        )\n   298\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 8), sticky=\"ew\")\n   299\t        \n   300\t        # Initialize with the first experiment if available\nTotal lines in file: 625\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_018FmspwBGmEV9CSyKnuG6Da"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Now, let's check if we have access to the current EEG file information in the selection frame:\n","workspace_file_chunks":[]},{"status":"success","request_id":"9e858512-6674-45c8-af87-7de6c9d9272a","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_013FoKbyPsXckNeTxV3LFCq8","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"view_range\": [336, 356]}"}},{"id":0,"type":0,"content":"Let me look at the selection frame's on_eeg_selected method:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_016KYRrGbDHfhmcRUcCn7iQ8"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let me look at the selection frame's on_eeg_selected method:\n","workspace_file_chunks":[]},{"status":"success","request_id":"d14fdbf5-1caa-4234-a058-4970853b4567","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01MYeYNLBGSK14wnwLBGrBf7","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"view_range\": [560, 580]}"}},{"id":0,"type":0,"content":"Let me also check how the time window is handled:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   336\t    def on_eeg_selected(self, selection: str):\n   337\t        \"\"\"\n   338\t        Handle EEG selection change.\n   339\t        \n   340\t        Args:\n   341\t            selection: Selected EEG name\n   342\t        \"\"\"\n   343\t        # Find the selected EEG\n   344\t        selected_eeg = None\n   345\t        for eeg in self.eegs:\n   346\t            if eeg['filename'] == selection:\n   347\t                selected_eeg = eeg\n   348\t                break\n   349\t        \n   350\t        if not selected_eeg:\n   351\t            return\n   352\t        \n   353\t        # Update metrics dropdown\n   354\t        self.current_eeg_id = selected_eeg['id']\n   355\t        self.update_metrics_dropdown()\n   356\t        self.update_channels_checkboxes()\nTotal lines in file: 625\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_013FoKbyPsXckNeTxV3LFCq8"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let me also check how the time window is handled:\n","workspace_file_chunks":[]},{"status":"success","request_id":"1d3c243d-8260-4e5a-bbff-60a0ae342161","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01KyM8L8tmYFTeRkAHuJjq1n","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"view_range\": [580, 600]}"}},{"id":0,"type":0,"content":""},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   560\t    def update_plot(self):\n   561\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   562\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   563\t            return\n   564\t        \n   565\t        # Get selected channels\n   566\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   567\t        \n   568\t        # Get selected aggregation methods\n   569\t        selected_aggregations = [agg for agg, var in self.aggregation_vars.items() if var.get()]\n   570\t        \n   571\t        # Check if we should show only aggregations\n   572\t        aggregation_only = self.aggregation_only_var.get()\n   573\t        \n   574\t        # Check if we have valid selections\n   575\t        if (not selected_channels and not selected_aggregations) or \\\n   576\t           (aggregation_only and not selected_aggregations):\n   577\t            self.plot_frame.update_plot(None, None, None, \"No channels or aggregations selected\")\n   578\t            return\n   579\t        \n   580\t        # Get data for the selected experiment and EEG\nTotal lines in file: 625\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01MYeYNLBGSK14wnwLBGrBf7"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"","workspace_file_chunks":[]},{"status":"success","request_id":"249913fa-ac0e-45b8-ab23-d6f60f245b21","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01CsR8Ke7cf43aamr8gRhrqj","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/install_dependencies.py\", \"str_replace_entries\": [{\"old_str\": \"    required_packages = [\\n        \\\"customtkinter\\\",\\n        \\\"matplotlib\\\",\\n        \\\"numpy\\\",\\n        \\\"pandas\\\",\\n        \\\"sqlalchemy\\\"\\n    ]\", \"old_str_start_line_number\": 24, \"old_str_end_line_number\": 30, \"new_str\": \"    required_packages = [\\n        \\\"customtkinter\\\",\\n        \\\"matplotlib\\\",\\n        \\\"numpy\\\",\\n        \\\"pandas\\\",\\n        \\\"sqlalchemy\\\",\\n        \\\"mne\\\"\\n    ]\"}]}"}},{"id":0,"type":0,"content":"Now I have a good understanding of the codebase. Let's create a detailed plan for implementing the MNE EEG viewer button:\n\n## Detailed Implementation Plan\n\n1. **Add MNE as a dependency**\n   - Update `install_dependencies.py` to include MNE\n\n2. **Create an EEG Viewer Function**\n   - Create a new method in the `SelectionFrame` class to handle opening the EEG file with MNE\n   - This method will:\n     - Get the current EEG file path from the database\n     - Load the EEG file using MNE\n     - Get the current time window from the selection frame\n     - Display the EEG data in a new window, focused on the selected time window\n\n3. **Add a \"View EEG\" Button**\n   - Add a new button to the selection frame UI\n   - Position it near the \"Reset Zoom\" and \"Update Plot\" buttons\n   - Connect it to the new EEG viewer method\n\nLet's start implementing these changes:\n\n### 1. Add MNE as a dependency\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   580\t        # Get data for the selected experiment and EEG\n   581\t        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n   582\t        \n   583\t        if df.empty:\n   584\t            self.plot_frame.update_plot(None, None, None, \"No data available\")\n   585\t            return\n   586\t        \n   587\t        # Get time window values\n   588\t        try:\n   589\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   590\t        except ValueError:\n   591\t            start_time = None\n   592\t            self.start_time_var.set(\"0\")\n   593\t        \n   594\t        try:\n   595\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   596\t        except ValueError:\n   597\t            end_time = None\n   598\t            self.end_time_var.set(\"\")\n   599\t        \n   600\t        # Update the plot\nTotal lines in file: 625\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01KyM8L8tmYFTeRkAHuJjq1n"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Now I have a good understanding of the codebase. Let's create a detailed plan for implementing the MNE EEG viewer button:\n\n## Detailed Implementation Plan\n\n1. **Add MNE as a dependency**\n   - Update `install_dependencies.py` to include MNE\n\n2. **Create an EEG Viewer Function**\n   - Create a new method in the `SelectionFrame` class to handle opening the EEG file with MNE\n   - This method will:\n     - Get the current EEG file path from the database\n     - Load the EEG file using MNE\n     - Get the current time window from the selection frame\n     - Display the EEG data in a new window, focused on the selected time window\n\n3. **Add a \"View EEG\" Button**\n   - Add a new button to the selection frame UI\n   - Position it near the \"Reset Zoom\" and \"Update Plot\" buttons\n   - Connect it to the new EEG viewer method\n\nLet's start implementing these changes:\n\n### 1. Add MNE as a dependency\n","workspace_file_chunks":[]},{"status":"success","request_id":"242a338c-162b-4ebb-a1f9-991c635a38f3","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01N8D4SsBbcjo4gQxkskDfbt","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/run_metrics_viewer.py\", \"str_replace_entries\": [{\"old_str\": \"    \\\"Check if all required dependencies are installed.\\\"\\\"\\\"\\n    required_packages = [\\\"customtkinter\\\", \\\"matplotlib\\\", \\\"numpy\\\", \\\"pandas\\\", \\\"sqlalchemy\\\"]\", \"old_str_start_line_number\": 20, \"old_str_end_line_number\": 21, \"new_str\": \"    \\\"Check if all required dependencies are installed.\\\"\\\"\\\"\\n    required_packages = [\\\"customtkinter\\\", \\\"matplotlib\\\", \\\"numpy\\\", \\\"pandas\\\", \\\"sqlalchemy\\\", \\\"mne\\\"]\"}]}"}},{"id":0,"type":0,"content":"### 2. Update run_metrics_viewer.py to check for MNE\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/install_dependencies.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    20\t    print(f\"{package_name} installed successfully.\")\n    21\t\n    22\tdef main():\n    23\t    \"\"\"Check and install required packages.\"\"\"\n    24\t    required_packages = [\n    25\t        \"customtkinter\",\n    26\t        \"matplotlib\",\n    27\t        \"numpy\",\n    28\t        \"pandas\",\n    29\t        \"sqlalchemy\",\n    30\t        \"mne\"\n    31\t    ]\n    32\t\n    33\t    missing_packages = []\n    34\t\n    35\t    # Check which packages are missing\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01CsR8Ke7cf43aamr8gRhrqj"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"### 2. Update run_metrics_viewer.py to check for MNE\n","workspace_file_chunks":[]},{"status":"success","request_id":"caa2ce42-c23d-480b-ab32-40d665eb0d5a","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_017Rqn2TYNdy69zCSt6oWmkA","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/run_metrics_viewer.py\", \"str_replace_entries\": [{\"old_str\": \"    required_packages = [\\\"customtkinter\\\", \\\"matplotlib\\\", \\\"numpy\\\", \\\"pandas\\\", \\\"sqlalchemy\\\"]\", \"old_str_start_line_number\": 21, \"old_str_end_line_number\": 21, \"new_str\": \"    required_packages = [\\\"customtkinter\\\", \\\"matplotlib\\\", \\\"numpy\\\", \\\"pandas\\\", \\\"sqlalchemy\\\", \\\"mne\\\"]\"}]}"}},{"id":0,"type":0,"content":"Let me fix that:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Failed to edit the file gui/run_metrics_viewer.py. See below for details.\nResult for str_replace_entries[0]:\nNo replacement was performed, oldStr did not appear verbatim in gui/run_metrics_viewer.py.\nThe content in the specified region is:\n    16\timport sys\n    17\timport importlib.util\n    18\t\n    19\tdef check_dependencies():\n    20\t    \"\"\"Check if all required dependencies are installed.\"\"\"\n    21\t    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\"]\n    22\t    missing_packages = []\n    23\t\n    24\t    for package in required_packages:\n    25\t        if importlib.util.find_spec(package) is None:\n\nDiff between oldStr and the specified region is:\n===================================================================\n--- oldStr\n+++ regionContent\n@@ -1,2 +1,2 @@\n-    \"Check if all required dependencies are installed.\"\"\"\n+    \"\"\"Check if all required dependencies are installed.\"\"\"\n     required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\"]\n\n\nFix failed str_replace_entries accordingly and try again.\n","is_error":true,"request_id":"","tool_use_id":"toolu_vrtx_01N8D4SsBbcjo4gQxkskDfbt"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let me fix that:\n","workspace_file_chunks":[]},{"status":"success","request_id":"1cb98c1b-0160-48ed-a77a-41f01497b16a","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01KFFUrK2kre7zy6gfx9UScP","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"from typing import List, Dict, Tuple, Optional, Any, Callable\\nimport customtkinter as ctk\\n\\nfrom .database_handler import DatabaseHandler\\nfrom .plot_frame import MetricsPlotFrame\\nfrom .utils import (\\n    get_label_font, \\n    get_dropdown_font, \\n    get_button_font,\\n    COMMON_CHANNELS,\\n    ALTERNATIVE_CHANNEL_NAMES\\n)\", \"old_str_start_line_number\": 8, \"old_str_end_line_number\": 19, \"new_str\": \"from typing import List, Dict, Tuple, Optional, Any, Callable\\nimport os\\nimport customtkinter as ctk\\nimport tkinter as tk\\nfrom tkinter import messagebox\\nimport mne\\nimport numpy as np\\n\\nfrom .database_handler import DatabaseHandler\\nfrom .plot_frame import MetricsPlotFrame\\nfrom .utils import (\\n    get_label_font, \\n    get_dropdown_font, \\n    get_button_font,\\n    COMMON_CHANNELS,\\n    ALTERNATIVE_CHANNEL_NAMES\\n)\"}]}"}},{"id":0,"type":0,"content":"### 3. Create a new EEG viewer method in the SelectionFrame class\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/run_metrics_viewer.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    17\timport importlib.util\n    18\t\n    19\tdef check_dependencies():\n    20\t    \"\"\"Check if all required dependencies are installed.\"\"\"\n    21\t    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\", \"mne\"]\n    22\t    missing_packages = []\n    23\t\n    24\t    for package in required_packages:\n    25\t        if importlib.util.find_spec(package) is None:\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_017Rqn2TYNdy69zCSt6oWmkA"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"### 3. Create a new EEG viewer method in the SelectionFrame class\n","workspace_file_chunks":[]},{"status":"success","request_id":"411025e3-39d2-48a8-9ed1-7435df69610c","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_015KTSawzc3xWaQDYBKM5dMb","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"    def update_plot(self):\\n        \\\"\\\"\\\"Update the plot with the selected metric and channels.\\\"\\\"\\\"\\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\\n            return\", \"old_str_start_line_number\": 560, \"old_str_end_line_number\": 563, \"new_str\": \"    def view_eeg(self):\\n        \\\"\\\"\\\"Open the current EEG file with MNE and display it in a new window.\\\"\\\"\\\"\\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\\n            messagebox.showinfo(\\\"No EEG Selected\\\", \\\"Please select an experiment and EEG file first.\\\")\\n            return\\n        \\n        # Find the selected EEG to get its filepath\\n        selected_eeg = None\\n        for eeg in self.eegs:\\n            if eeg['id'] == self.current_eeg_id:\\n                selected_eeg = eeg\\n                break\\n        \\n        if not selected_eeg or not selected_eeg.get('filepath'):\\n            messagebox.showerror(\\\"Error\\\", \\\"Could not find the EEG file path.\\\")\\n            return\\n        \\n        eeg_filepath = selected_eeg['filepath']\\n        \\n        # Check if the file exists\\n        if not os.path.exists(eeg_filepath):\\n            messagebox.showerror(\\\"File Not Found\\\", f\\\"The EEG file was not found at:\\\\n{eeg_filepath}\\\")\\n            return\\n        \\n        # Get the current time window\\n        try:\\n            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\\n        except ValueError:\\n            start_time = None\\n        \\n        try:\\n            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\\n        except ValueError:\\n            end_time = None\\n        \\n        # Try to load the EEG file with MNE\\n        try:\\n            # Show a loading message\\n            self.loading_window = tk.Toplevel(self)\\n            self.loading_window.title(\\\"Loading EEG\\\")\\n            self.loading_window.geometry(\\\"300x100\\\")\\n            self.loading_window.transient(self.master)\\n            self.loading_window.grab_set()\\n            \\n            loading_label = tk.Label(self.loading_window, text=\\\"Loading EEG file...\\\\nThis may take a moment.\\\")\\n            loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\\n            \\n            self.loading_window.update()\\n            \\n            # Load the EEG file\\n            raw = mne.io.read_raw(eeg_filepath, preload=True)\\n            \\n            # Close the loading window\\n            self.loading_window.destroy()\\n            \\n            # Set the time window if specified\\n            if start_time is not None and end_time is not None:\\n                # Convert from seconds to points if needed\\n                start_idx = max(0, int(start_time * raw.info['sfreq']))\\n                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\\n                \\n                # Create a plot with the specified time window\\n                fig = raw.plot(start=start_idx, duration=(end_idx-start_idx)/raw.info['sfreq'],\\n                              scalings='auto', block=False, show=False)\\n                \\n                # Set the window title to include the EEG filename\\n                fig.canvas.manager.set_window_title(f\\\"MNE EEG Viewer - {selected_eeg['filename']}\\\")\\n                \\n                # Show the plot\\n                fig.show()\\n            else:\\n                # Just show the whole EEG\\n                fig = raw.plot(scalings='auto', block=False, show=False)\\n                fig.canvas.manager.set_window_title(f\\\"MNE EEG Viewer - {selected_eeg['filename']}\\\")\\n                fig.show()\\n                \\n        except Exception as e:\\n            messagebox.showerror(\\\"Error\\\", f\\\"Failed to open the EEG file with MNE:\\\\n{str(e)}\\\")\\n            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\\n                self.loading_window.destroy()\\n    \\n    def update_plot(self):\\n        \\\"\\\"\\\"Update the plot with the selected metric and channels.\\\"\\\"\\\"\\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\\n            return\"}]}"}},{"id":0,"type":0,"content":"Now, let's add the view_eeg method to the SelectionFrame class:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport os\n    10\timport customtkinter as ctk\n    11\timport tkinter as tk\n    12\tfrom tkinter import messagebox\n    13\timport mne\n    14\timport numpy as np\n    15\t\n    16\tfrom .database_handler import DatabaseHandler\n    17\tfrom .plot_frame import MetricsPlotFrame\n    18\tfrom .utils import (\n    19\t    get_label_font,\n    20\t    get_dropdown_font,\n    21\t    get_button_font,\n    22\t    COMMON_CHANNELS,\n    23\t    ALTERNATIVE_CHANNEL_NAMES\n    24\t)\n    25\t\n    26\t\n    27\tclass SelectionFrame(ctk.CTkFrame):\n    28\t    \"\"\"\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01KFFUrK2kre7zy6gfx9UScP"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Now, let's add the view_eeg method to the SelectionFrame class:\n","workspace_file_chunks":[]},{"status":"success","request_id":"3281a6dd-7e69-49ec-8af3-899287a5a063","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_011opMEsSVWoiEXrnQXUWhab","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"        # Reset zoom button\\n        self.reset_zoom_button = ctk.CTkButton(\\n            self, \\n            text=\\\"Reset Zoom\\\", \\n            command=self.reset_time_window,\\n            height=25,\\n            font=dropdown_font\\n        )\\n        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\\\"ew\\\")\\n        \\n        # Update button - more compact\\n        self.update_button = ctk.CTkButton(\\n            self, \\n            text=\\\"Update Plot\\\", \\n            command=self.update_plot,\\n            height=30,\\n            font=get_button_font()\\n        )\\n        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 8), sticky=\\\"ew\\\")\", \"old_str_start_line_number\": 280, \"old_str_end_line_number\": 298, \"new_str\": \"        # Reset zoom button\\n        self.reset_zoom_button = ctk.CTkButton(\\n            self, \\n            text=\\\"Reset Zoom\\\", \\n            command=self.reset_time_window,\\n            height=25,\\n            font=dropdown_font\\n        )\\n        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\\\"ew\\\")\\n        \\n        # Update button - more compact\\n        self.update_button = ctk.CTkButton(\\n            self, \\n            text=\\\"Update Plot\\\", \\n            command=self.update_plot,\\n            height=30,\\n            font=get_button_font()\\n        )\\n        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\\\"ew\\\")\\n        \\n        # View EEG button\\n        self.view_eeg_button = ctk.CTkButton(\\n            self,\\n            text=\\\"View EEG\\\",\\n            command=self.view_eeg,\\n            height=30,\\n            font=get_button_font(),\\n            fg_color=\\\"#2a6099\\\"  # Different color to distinguish it\\n        )\\n        self.view_eeg_button.grid(row=8, column=0, columnspan=2, padx=5, pady=(5, 8), sticky=\\\"ew\\\")\"}]}"}},{"id":0,"type":0,"content":"### 4. Add the \"View EEG\" button to the UI\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   561\t        self.start_time_var.set(\"0\")\n   562\t        self.end_time_var.set(\"\")\n   563\t        self.update_plot()\n   564\t\n   565\t    def view_eeg(self):\n   566\t        \"\"\"Open the current EEG file with MNE and display it in a new window.\"\"\"\n   567\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n   568\t            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n   569\t            return\n   570\t\n   571\t        # Find the selected EEG to get its filepath\n   572\t        selected_eeg = None\n   573\t        for eeg in self.eegs:\n   574\t            if eeg['id'] == self.current_eeg_id:\n   575\t                selected_eeg = eeg\n   576\t                break\n   577\t\n   578\t        if not selected_eeg or not selected_eeg.get('filepath'):\n   579\t            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n   580\t            return\n   581\t\n   582\t        eeg_filepath = selected_eeg['filepath']\n   583\t\n   584\t        # Check if the file exists\n   585\t        if not os.path.exists(eeg_filepath):\n   586\t            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n   587\t            return\n   588\t\n   589\t        # Get the current time window\n   590\t        try:\n   591\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   592\t        except ValueError:\n   593\t            start_time = None\n   594\t\n   595\t        try:\n   596\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   597\t        except ValueError:\n   598\t            end_time = None\n   599\t\n   600\t        # Try to load the EEG file with MNE\n   601\t        try:\n   602\t            # Show a loading message\n   603\t            self.loading_window = tk.Toplevel(self)\n   604\t            self.loading_window.title(\"Loading EEG\")\n   605\t            self.loading_window.geometry(\"300x100\")\n   606\t            self.loading_window.transient(self.master)\n   607\t            self.loading_window.grab_set()\n   608\t\n   609\t            loading_label = tk.Label(self.loading_window, text=\"Loading EEG file...\\nThis may take a moment.\")\n   610\t            loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   611\t\n   612\t            self.loading_window.update()\n   613\t\n   614\t            # Load the EEG file\n   615\t            raw = mne.io.read_raw(eeg_filepath, preload=True)\n   616\t\n   617\t            # Close the loading window\n   618\t            self.loading_window.destroy()\n   619\t\n   620\t            # Set the time window if specified\n   621\t            if start_time is not None and end_time is not None:\n   622\t                # Convert from seconds to points if needed\n   623\t                start_idx = max(0, int(start_time * raw.info['sfreq']))\n   624\t                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\n   625\t\n   626\t                # Create a plot with the specified time window\n   627\t                fig = raw.plot(start=start_idx, duration=(end_idx-start_idx)/raw.info['sfreq'],\n   628\t                              scalings='auto', block=False, show=False)\n   629\t\n   630\t                # Set the window title to include the EEG filename\n   631\t                fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   632\t\n   633\t                # Show the plot\n   634\t                fig.show()\n   635\t            else:\n   636\t                # Just show the whole EEG\n   637\t                fig = raw.plot(scalings='auto', block=False, show=False)\n   638\t                fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   639\t                fig.show()\n   640\t\n   641\t        except Exception as e:\n   642\t            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n   643\t            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\n   644\t                self.loading_window.destroy()\n   645\t\n   646\t    def update_plot(self):\n   647\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   648\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   649\t            return\n   650\t\n   651\t        # Get selected channels\n   652\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   653\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_015KTSawzc3xWaQDYBKM5dMb"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"### 4. Add the \"View EEG\" button to the UI\n","workspace_file_chunks":[]},{"status":"success","request_id":"ad19e314-2730-4ddb-8d83-4b73ebde6d17","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_017UvQFVGLGFCnY4Un7mxwPh","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"        # Configure grid layout\\n        self.grid_columnconfigure(0, weight=1)\\n        self.grid_columnconfigure(1, weight=1)\", \"old_str_start_line_number\": 42, \"old_str_end_line_number\": 44, \"new_str\": \"        # Configure grid layout\\n        self.grid_columnconfigure(0, weight=1)\\n        self.grid_columnconfigure(1, weight=1)\\n        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\"}]}"}},{"id":0,"type":0,"content":"Now let's make sure the grid layout is properly adjusted to accommodate the new button:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   281\t            font=dropdown_font\n   282\t        )\n   283\t        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n   284\t\n   285\t        # Reset zoom button\n   286\t        self.reset_zoom_button = ctk.CTkButton(\n   287\t            self,\n   288\t            text=\"Reset Zoom\",\n   289\t            command=self.reset_time_window,\n   290\t            height=25,\n   291\t            font=dropdown_font\n   292\t        )\n   293\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   294\t\n   295\t        # Update button - more compact\n   296\t        self.update_button = ctk.CTkButton(\n   297\t            self,\n   298\t            text=\"Update Plot\",\n   299\t            command=self.update_plot,\n   300\t            height=30,\n   301\t            font=get_button_font()\n   302\t        )\n   303\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\"ew\")\n   304\t\n   305\t        # View EEG button\n   306\t        self.view_eeg_button = ctk.CTkButton(\n   307\t            self,\n   308\t            text=\"View EEG\",\n   309\t            command=self.view_eeg,\n   310\t            height=30,\n   311\t            font=get_button_font(),\n   312\t            fg_color=\"#2a6099\"  # Different color to distinguish it\n   313\t        )\n   314\t        self.view_eeg_button.grid(row=8, column=0, columnspan=2, padx=5, pady=(5, 8), sticky=\"ew\")\n   315\t\n   316\t        # Initialize with the first experiment if available\n   317\t        if self.experiments:\n   318\t            self.on_experiment_selected(experiment_names[0])\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_011opMEsSVWoiEXrnQXUWhab"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Now let's make sure the grid layout is properly adjusted to accommodate the new button:\n","workspace_file_chunks":[]},{"status":"success","request_id":"1eea3188-37dd-4c41-aeaa-3c2e8484e88c","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01A11bwGqxZ9fGwfzZJqd1Zm","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"class SelectionFrame(ctk.CTkFrame):\\n    \\\"\\\"\\\"\\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\\n    \\\"\\\"\\\"\", \"old_str_start_line_number\": 22, \"old_str_end_line_number\": 25, \"new_str\": \"class SelectionFrame(ctk.CTkFrame):\\n    \\\"\\\"\\\"\\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\\n    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\\n    \\\"\\\"\\\"\"}]}"}},{"id":0,"type":0,"content":"Let's also update the docstring of the SelectionFrame class to mention the new functionality:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    43\t\n    44\t        self.db_handler = db_handler\n    45\t        self.plot_frame = plot_frame\n    46\t\n    47\t        # Configure grid layout\n    48\t        self.grid_columnconfigure(0, weight=1)\n    49\t        self.grid_columnconfigure(1, weight=1)\n    50\t        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\n    51\t\n    52\t        # Create fonts\n    53\t        label_font = get_label_font()\n    54\t        dropdown_font = get_dropdown_font()\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_017UvQFVGLGFCnY4Un7mxwPh"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let's also update the docstring of the SelectionFrame class to mention the new functionality:\n","workspace_file_chunks":[]},{"status":"success","request_id":"741b8e19-2805-48ae-844f-14ffa7eae3a8","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01MrX6iEJQB4zw7dAH4G8VMA","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"            # Load the EEG file\\n            raw = mne.io.read_raw(eeg_filepath, preload=True)\", \"old_str_start_line_number\": 614, \"old_str_end_line_number\": 615, \"new_str\": \"            # Load the EEG file - try different readers based on file extension\\n            file_ext = os.path.splitext(eeg_filepath)[1].lower()\\n            \\n            if file_ext == '.edf':\\n                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\\n            elif file_ext == '.bdf':\\n                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\\n            elif file_ext == '.gdf':\\n                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\\n            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\\n                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\\n            elif file_ext == '.cnt':\\n                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\\n            elif file_ext == '.set':\\n                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\\n            else:\\n                # Try the generic reader as a fallback\\n                try:\\n                    raw = mne.io.read_raw(eeg_filepath, preload=True)\\n                except Exception as e:\\n                    raise ValueError(f\\\"Unsupported file format: {file_ext}. Error: {str(e)}\\\")\"}]}"}},{"id":0,"type":0,"content":"Let's make one final improvement to handle the case where the EEG file format might not be directly supported by MNE:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    23\t    ALTERNATIVE_CHANNEL_NAMES\n    24\t)\n    25\t\n    26\t\n    27\tclass SelectionFrame(ctk.CTkFrame):\n    28\t    \"\"\"\n    29\t    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    30\t    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\n    31\t    \"\"\"\n    32\t\n    33\t    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n    34\t        \"\"\"\n    35\t        Initialize the selection frame.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01A11bwGqxZ9fGwfzZJqd1Zm"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"Let's make one final improvement to handle the case where the EEG file format might not be directly supported by MNE:\n","workspace_file_chunks":[]},{"status":"success","request_id":"04094d6f-ffae-4e04-8fd3-3c029b09bd11","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"## Summary of Changes\n\nI've implemented the requested feature to add a button that uses MNE to render the EEG file from which the metrics were created. Here's a summary of the changes:\n\n1. **Added MNE as a dependency**:\n   - Updated `install_dependencies.py` to include MNE\n   - Updated `run_metrics_viewer.py` to check for MNE\n\n2. **Created an EEG Viewer Function**:\n   - Added a `view_eeg` method to the `SelectionFrame` class\n   - The method retrieves the EEG file path from the database\n   - It loads the EEG file using MNE with support for various file formats\n   - It gets the current time window from the selection frame\n   - It displays the EEG data in a new window, focused on the selected time window\n\n3. **Added a \"View EEG\" Button**:\n   - Added a new button to the selection frame UI\n   - Positioned it below the \"Reset Zoom\" and \"Update Plot\" buttons\n   - Connected it to the new EEG viewer method\n   - Used a distinctive color to make it stand out\n\n4. **Added Error Handling**:\n   - Added checks for file existence\n   - Added a loading dialog to indicate when the EEG file is being loaded\n   - Added support for different EEG file formats\n   - Added error messages for various failure scenarios\n\n## How to Test\n\nTo test this new feature:\n\n1. Install MNE if you haven't already:\n   ```\n   python gui/install_dependencies.py\n   ```\n\n2. Run the metrics viewer:\n   ```\n   python gui/run_metrics_viewer.py\n   ```\n\n3. Select an experiment and EEG file\n\n4. Optionally, select a time window by either:\n   - Entering values in the time window fields\n   - Using the interactive zoom feature on the plot\n\n5. Click the \"View EEG\" button to open the EEG file in MNE's viewer\n\nThe MNE viewer will open and display the EEG data, focused on the time window you selected in the metrics viewer.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   623\t            loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   624\t\n   625\t            self.loading_window.update()\n   626\t\n   627\t            # Load the EEG file - try different readers based on file extension\n   628\t            file_ext = os.path.splitext(eeg_filepath)[1].lower()\n   629\t\n   630\t            if file_ext == '.edf':\n   631\t                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\n   632\t            elif file_ext == '.bdf':\n   633\t                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\n   634\t            elif file_ext == '.gdf':\n   635\t                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\n   636\t            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\n   637\t                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\n   638\t            elif file_ext == '.cnt':\n   639\t                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\n   640\t            elif file_ext == '.set':\n   641\t                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\n   642\t            else:\n   643\t                # Try the generic reader as a fallback\n   644\t                try:\n   645\t                    raw = mne.io.read_raw(eeg_filepath, preload=True)\n   646\t                except Exception as e:\n   647\t                    raise ValueError(f\"Unsupported file format: {file_ext}. Error: {str(e)}\")\n   648\t\n   649\t            # Close the loading window\n   650\t            self.loading_window.destroy()\n   651\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01MrX6iEJQB4zw7dAH4G8VMA"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":4,"currentWorkingDirectory":"/home/soenkevl/Documents/EEGAnalyzer"}}}],"response_text":"## Summary of Changes\n\nI've implemented the requested feature to add a button that uses MNE to render the EEG file from which the metrics were created. Here's a summary of the changes:\n\n1. **Added MNE as a dependency**:\n   - Updated `install_dependencies.py` to include MNE\n   - Updated `run_metrics_viewer.py` to check for MNE\n\n2. **Created an EEG Viewer Function**:\n   - Added a `view_eeg` method to the `SelectionFrame` class\n   - The method retrieves the EEG file path from the database\n   - It loads the EEG file using MNE with support for various file formats\n   - It gets the current time window from the selection frame\n   - It displays the EEG data in a new window, focused on the selected time window\n\n3. **Added a \"View EEG\" Button**:\n   - Added a new button to the selection frame UI\n   - Positioned it below the \"Reset Zoom\" and \"Update Plot\" buttons\n   - Connected it to the new EEG viewer method\n   - Used a distinctive color to make it stand out\n\n4. **Added Error Handling**:\n   - Added checks for file existence\n   - Added a loading dialog to indicate when the EEG file is being loaded\n   - Added support for different EEG file formats\n   - Added error messages for various failure scenarios\n\n## How to Test\n\nTo test this new feature:\n\n1. Install MNE if you haven't already:\n   ```\n   python gui/install_dependencies.py\n   ```\n\n2. Run the metrics viewer:\n   ```\n   python gui/run_metrics_viewer.py\n   ```\n\n3. Select an experiment and EEG file\n\n4. Optionally, select a time window by either:\n   - Entering values in the time window fields\n   - Using the interactive zoom feature on the plot\n\n5. Click the \"View EEG\" button to open the EEG file in MNE's viewer\n\nThe MNE viewer will open and display the EEG data, focused on the time window you selected in the metrics viewer.\n","workspace_file_chunks":[]},{"request_id":"6e834e86-30da-445e-aa9a-002833918f7f","uuid":"a52e6095-87ce-4252-8944-ad7813d9fa4e","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":1744830540120,"toTimestamp":1744830962382,"seen_state":"seen"}],"feedbackStates":{"temp-fe-2eb88ed8-743c-4540-917a-737dad701f02":{"selectedRating":0,"feedbackNote":""},"temp-fe-58adb34c-ceab-4ca2-a30a-52ded66c58ec":{"selectedRating":0,"feedbackNote":""},"temp-fe-81286f97-4cb1-4b5f-9ab5-55ded7d86fd2":{"selectedRating":0,"feedbackNote":""},"temp-fe-5c050594-54b9-4e1c-88ec-afea04362352":{"selectedRating":0,"feedbackNote":""},"temp-fe-1e41faec-5172-4c46-89be-41b527bb7ad8":{"selectedRating":0,"feedbackNote":""},"temp-fe-20a414d2-dd2b-4d83-b14b-62698e86f922":{"selectedRating":0,"feedbackNote":""},"temp-fe-cb1e7316-9100-486c-8670-ccf2fee99c7d":{"selectedRating":0,"feedbackNote":""},"temp-fe-6eb75f51-f63b-4904-9e89-11c207fb096d":{"selectedRating":0,"feedbackNote":""},"temp-fe-440de2aa-d844-4ffc-b1dd-b484d90cccfc":{"selectedRating":0,"feedbackNote":""},"temp-fe-c63137ac-d4b8-483a-9444-1b06dab7d63d":{"selectedRating":0,"feedbackNote":""},"temp-fe-3830d933-3715-4576-9746-080390b51614":{"selectedRating":0,"feedbackNote":""},"temp-fe-80d2e0d5-153a-4243-89db-d8c5f9106321":{"selectedRating":0,"feedbackNote":""},"temp-fe-55e0ad25-6ca4-4e9e-bbf6-77a8ec31c5f8":{"selectedRating":0,"feedbackNote":""},"temp-fe-040a189d-58ba-4c2b-93b3-5c596a8d3c20":{"selectedRating":0,"feedbackNote":""},"temp-fe-ee86206e-997e-4129-a8ea-0238d7191c7c":{"selectedRating":0,"feedbackNote":""},"temp-fe-11ac213c-5cdb-4564-9bda-08295337faa4":{"selectedRating":0,"feedbackNote":""},"temp-fe-a44bf21c-254f-4416-ac76-be6ac4b08ff4":{"selectedRating":0,"feedbackNote":""},"temp-fe-d277df5e-8228-4136-9c50-de2d59568e69":{"selectedRating":0,"feedbackNote":""},"temp-fe-63481518-f0a3-4be3-8349-492da3595269":{"selectedRating":0,"feedbackNote":""},"temp-fe-c77d948a-dc77-479d-bda0-dc9949c5238a":{"selectedRating":0,"feedbackNote":""},"temp-fe-060e5fad-388b-4ba5-ae1a-7894d7943974":{"selectedRating":0,"feedbackNote":""},"temp-fe-671637c5-2b9d-46d8-84cd-29ab38f0e817":{"selectedRating":0,"feedbackNote":""},"temp-fe-7b49a355-73bb-461e-bc2b-8613f2bded6a":{"selectedRating":0,"feedbackNote":""},"temp-fe-37385d85-fd9c-4860-bdbc-cef3fa536ecd":{"selectedRating":0,"feedbackNote":""},"temp-fe-99ce431d-4528-4154-8816-dcbda3f0994e":{"selectedRating":0,"feedbackNote":""},"temp-fe-062e4dc7-5aed-4565-a00f-2fb29c35727b":{"selectedRating":0,"feedbackNote":""},"temp-fe-83c15b8a-a011-4c17-8c06-07957cb17d00":{"selectedRating":0,"feedbackNote":""},"temp-fe-e3ec9c20-4e55-4dce-a29c-475f27fc3dc5":{"selectedRating":0,"feedbackNote":""},"temp-fe-6e36081b-f2a8-4341-a501-0426d951645f":{"selectedRating":0,"feedbackNote":""},"temp-fe-c263cec4-3ee8-455f-baad-4a803335170d":{"selectedRating":0,"feedbackNote":""},"temp-fe-82f5b800-3c73-4a31-8145-ca31ed1e1cdd":{"selectedRating":0,"feedbackNote":""},"temp-fe-95d6286d-5bf7-43ea-8505-eb50c5819e3d":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"7be5a194-e582-4817-9cc6-1f9df473f9af;toolu_vrtx_01VZ3XQXdfZ7d81f11bTD4AP":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"6768a793-5cb7-4b4c-85d8-e4c49a62fca4;toolu_vrtx_01AsmfDZhzvX25XEd9BkzrBC":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"d1223af2-c25d-4f6f-86fa-b4df6f7f324d;toolu_vrtx_0126h4T8Bje9BaPPqx2PNV9A":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"9397dd58-6a1b-4b40-a64a-9437192a4b55;toolu_vrtx_01ApeWohckDdJPeixbrMbpit":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"293b6187-4227-45b2-b29d-4366e06c94bc;toolu_vrtx_0124cWP6VgUqtw8vHuuG5tdU":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"aa94aa3b-0008-41b7-b9de-3065976fb126;toolu_vrtx_012KVRt1zPPNXiqhW6ub62vA":{"phase":5,"result":{"text":"Here are the results from executing the command.\n        <return-code>\n        0\n        </return-code>\n        <stdout>\n        gui/install_dependencies.py\ngui/metrics_viewer/app.py\ngui/metrics_viewer/database_handler.py\ngui/metrics_viewer/__init__.py\ngui/metrics_viewer/plot_frame.py\ngui/metrics_viewer/__pycache__/app.cpython-313.pyc\ngui/metrics_viewer/__pycache__/database_handler.cpython-313.pyc\ngui/metrics_viewer/__pycache__/__init__.cpython-313.pyc\ngui/metrics_viewer/__pycache__/plot_frame.cpython-313.pyc\ngui/metrics_viewer/__pycache__/selection_frame.cpython-313.pyc\ngui/metrics_viewer/__pycache__/utils.cpython-313.pyc\ngui/metrics_viewer/selection_frame.py\ngui/metrics_viewer/utils.py\ngui/plotting_oneshot.py\ngui/__pycache__/metrics_viewer.cpython-313.pyc\ngui/README.md\ngui/run_metrics_viewer.py\ngui/test_structure.py\n\n        </stdout>\n        <stderr>\n        \n        </stderr>","isError":false,"requestId":""}},"2bb7cd0b-c42a-4705-ac1e-d8e9af87706f;toolu_vrtx_01XW7yCgcvTFXkRQcrKERurE":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/database_handler.py:\n     1\t\"\"\"\n     2\tDatabase handler for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides functionality for interacting with the SQLite database\n     5\tcontaining EEG metrics data.\n     6\t\"\"\"\n     7\t\n     8\timport os\n     9\timport sys\n    10\tfrom typing import List, Dict, Any, Optional\n    11\timport pandas as pd\n    12\t\n    13\t# Add the parent directory to the path so we can import from OOP_Analyzer\n    14\tsys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))\n    15\tfrom OOP_Analyzer import Alchemist\n    16\t\n    17\tfrom .utils import METADATA_COLUMNS\n    18\t\n    19\t\n    20\tclass DatabaseHandler:\n    21\t    \"\"\"\n    22\t    Handles interactions with the SQLite database containing EEG metrics.\n    23\t    \"\"\"\n    24\t    \n    25\t    def __init__(self, db_path: str):\n    26\t        \"\"\"\n    27\t        Initialize the database handler.\n    28\t        \n    29\t        Args:\n    30\t            db_path: Path to the SQLite database file\n    31\t        \"\"\"\n    32\t        self.db_path = db_path\n    33\t        self.engine = Alchemist.initialize_tables(db_path)\n    34\t        self.session = Alchemist.Session(self.engine)\n    35\t        \n    36\t    def __del__(self):\n    37\t        \"\"\"Close the session when the object is deleted.\"\"\"\n    38\t        if hasattr(self, 'session'):\n    39\t            self.session.close()\n    40\t    \n    41\t    def get_experiments(self) -> List[Dict[str, Any]]:\n    42\t        \"\"\"\n    43\t        Get all experiments from the database.\n    44\t        \n    45\t        Returns:\n    46\t            List of dictionaries containing experiment information\n    47\t        \"\"\"\n    48\t        experiments = Alchemist.find_entries(self.session, Alchemist.Experiment)\n    49\t        return [{'id': exp.id, 'name': exp.metric_set_name, 'run_name': exp.run_name} for exp in experiments]\n    50\t    \n    51\t    def get_eegs_for_experiment(self, experiment_id: str) -> List[Dict[str, Any]]:\n    52\t        \"\"\"\n    53\t        Get all EEGs associated with a specific experiment.\n    54\t        \n    55\t        Args:\n    56\t            experiment_id: ID of the experiment\n    57\t            \n    58\t        Returns:\n    59\t            List of dictionaries containing EEG information\n    60\t        \"\"\"\n    61\t        experiment = self.session.get(Alchemist.Experiment, experiment_id)\n    62\t        if not experiment:\n    63\t            return []\n    64\t        \n    65\t        return [{'id': eeg.id, 'filename': eeg.filename, 'filepath': eeg.filepath} for eeg in experiment.eegs]\n    66\t    \n    67\t    def get_metrics_data(self, experiment_id: str, eeg_id: str) -> pd.DataFrame:\n    68\t        \"\"\"\n    69\t        Get metrics data for a specific experiment and EEG.\n    70\t        \n    71\t        Args:\n    72\t            experiment_id: ID of the experiment\n    73\t            eeg_id: ID of the EEG\n    74\t            \n    75\t        Returns:\n    76\t            DataFrame containing the metrics data\n    77\t        \"\"\"\n    78\t        table_name = f\"data_experiment_{experiment_id}\"\n    79\t        \n    80\t        try:\n    81\t            # Query the data for the specific EEG\n    82\t            query = f\"SELECT * FROM {table_name} WHERE eeg_id = '{eeg_id}'\"\n    83\t            df = pd.read_sql_query(query, self.engine)\n    84\t            return df\n    85\t        except Exception as e:\n    86\t            print(f\"Error retrieving metrics data: {e}\")\n    87\t            return pd.DataFrame()\n    88\t    \n    89\t    def get_available_metrics(self, experiment_id: str, eeg_id: str) -> List[str]:\n    90\t        \"\"\"\n    91\t        Get the unique metric names available for a specific experiment and EEG.\n    92\t        \n    93\t        Args:\n    94\t            experiment_id: ID of the experiment\n    95\t            eeg_id: ID of the EEG\n    96\t            \n    97\t        Returns:\n    98\t            List of unique metric names\n    99\t        \"\"\"\n   100\t        df = self.get_metrics_data(experiment_id, eeg_id)\n   101\t        \n   102\t        if 'metric' in df.columns:\n   103\t            return df['metric'].unique().tolist()\n   104\t        return []\n   105\t    \n   106\t    def get_available_channels(self, experiment_id: str, eeg_id: str) -> List[str]:\n   107\t        \"\"\"\n   108\t        Get the channel names available for a specific experiment and EEG.\n   109\t        \n   110\t        Args:\n   111\t            experiment_id: ID of the experiment\n   112\t            eeg_id: ID of the EEG\n   113\t            \n   114\t        Returns:\n   115\t            List of channel names sorted alphabetically\n   116\t        \"\"\"\n   117\t        df = self.get_metrics_data(experiment_id, eeg_id)\n   118\t        \n   119\t        # Exclude metadata columns\n   120\t        channel_cols = [col for col in df.columns if col not in METADATA_COLUMNS]\n   121\t        \n   122\t        # Sort channels alphabetically\n   123\t        channel_cols.sort()\n   124\t        \n   125\t        return channel_cols\n   126\t\nTotal lines in file: 126\n","isError":false,"requestId":""}},"3c129abb-1025-4e0a-b2ca-6bc1d5eeeb01;toolu_vrtx_0123c8QgzKPqfrHuyLvxMFDa":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/plot_frame.py:\n     1\t\"\"\"\n     2\tPlot frame for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides the MetricsPlotFrame class for visualizing EEG metrics data.\n     5\t\"\"\"\n     6\t\n     7\tfrom typing import List, Dict, Tuple, Optional, Any, Union\n     8\timport pandas as pd\n     9\timport numpy as np\n    10\timport customtkinter as ctk\n    11\tfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n    12\tfrom matplotlib.figure import Figure\n    13\t\n    14\tfrom .utils import AGGREGATION_COLORS, AGGREGATION_STYLES\n    15\t\n    16\t\n    17\tclass MetricsPlotFrame(ctk.CTkFrame):\n    18\t    \"\"\"\n    19\t    A frame containing a matplotlib figure for plotting metrics.\n    20\t    \"\"\"\n    21\t\n    22\t    def __init__(self, master, title=\"Metrics Plot\", **kwargs):\n    23\t        \"\"\"\n    24\t        Initialize the plot frame.\n    25\t\n    26\t        Args:\n    27\t            master: The parent widget\n    28\t            title: Title for the plot frame\n    29\t            **kwargs: Additional arguments for the CTkFrame constructor\n    30\t        \"\"\"\n    31\t        super().__init__(master, **kwargs)\n    32\t\n    33\t        # Configure grid layout\n    34\t        self.grid_columnconfigure(0, weight=1)\n    35\t        self.grid_rowconfigure(1, weight=1)\n    36\t\n    37\t        # Add title label\n    38\t        self.title_label = ctk.CTkLabel(self, text=title, fg_color=\"gray30\", corner_radius=6)\n    39\t        self.title_label.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"ew\")\n    40\t\n    41\t        # Create matplotlib figure with larger size\n    42\t        self.figure = Figure(figsize=(12, 7), dpi=100)\n    43\t        self.plot = self.figure.add_subplot(111)\n    44\t\n    45\t        # Create canvas for the figure\n    46\t        self.canvas = FigureCanvasTkAgg(self.figure, self)\n    47\t        self.canvas_widget = self.canvas.get_tk_widget()\n    48\t        self.canvas_widget.grid(row=1, column=0, padx=10, pady=10, sticky=\"nsew\")\n    49\t\n    50\t        # Add interactive zooming with mouse drag\n    51\t        self.zoom_start = None\n    52\t        self.canvas.mpl_connect('button_press_event', self.on_mouse_press)\n    53\t        self.canvas.mpl_connect('button_release_event', self.on_mouse_release)\n    54\t        self.canvas.mpl_connect('motion_notify_event', self.on_mouse_motion)\n    55\t\n    56\t        # Store the parent frame for callbacks\n    57\t        self.parent_frame = master\n    58\t\n    59\t        # Initialize with empty plot\n    60\t        self.update_plot()\n    61\t\n    62\t    def update_plot(\n    63\t        self,\n    64\t        data: Optional[pd.DataFrame] = None,\n    65\t        metric: Optional[str] = None,\n    66\t        channels: Optional[List[str]] = None,\n    67\t        title: Optional[str] = None,\n    68\t        xlabel: Optional[str] = None,\n    69\t        ylabel: Optional[str] = None,\n    70\t        time_window: Optional[Tuple[Optional[float], Optional[float]]] = None,\n    71\t        aggregations: Optional[List[str]] = None,\n    72\t        aggregation_only: bool = False\n    73\t    ):\n    74\t        \"\"\"\n    75\t        Update the plot with new data.\n    76\t\n    77\t        Args:\n    78\t            data: DataFrame containing the metrics data\n    79\t            metric: The metric to plot\n    80\t            channels: List of channels to plot\n    81\t            title: Title for the plot\n    82\t            xlabel: Label for the x-axis\n    83\t            ylabel: Label for the y-axis\n    84\t            time_window: Tuple of (start_time, end_time) to focus on a specific time range\n    85\t            aggregations: List of aggregation methods to apply across channels (mean, std, median)\n    86\t            aggregation_only: If True, only show aggregations without individual channels\n    87\t        \"\"\"\n    88\t        self.plot.clear()\n    89\t\n    90\t        if data is None or metric is None or (not channels and not aggregations):\n    91\t            # Display a message if no data is provided\n    92\t            self.plot.text(0.5, 0.5, \"No data selected\",\n    93\t                          horizontalalignment='center',\n    94\t                          verticalalignment='center',\n    95\t                          transform=self.plot.transAxes)\n    96\t        else:\n    97\t            # Filter data for the selected metric\n    98\t            metric_data = data[data['metric'] == metric]\n    99\t\n   100\t            if metric_data.empty:\n   101\t                self.plot.text(0.5, 0.5, f\"No data for metric: {metric}\",\n   102\t                              horizontalalignment='center',\n   103\t                              verticalalignment='center',\n   104\t                              transform=self.plot.transAxes)\n   105\t            else:\n   106\t                # Sort by startDataRecord if available\n   107\t                if 'startDataRecord' in metric_data.columns:\n   108\t                    metric_data = metric_data.sort_values('startDataRecord')\n   109\t                    x_values = metric_data['startDataRecord']\n   110\t                    x_label = 'Time (s)'\n   111\t\n   112\t                    # Apply time window filtering if specified\n   113\t                    if time_window and any(x is not None for x in time_window):\n   114\t                        start_time, end_time = time_window\n   115\t\n   116\t                        # Filter by start time if specified\n   117\t                        if start_time is not None:\n   118\t                            metric_data = metric_data[metric_data['startDataRecord'] >= start_time]\n   119\t                            if metric_data.empty:\n   120\t                                self.plot.text(0.5, 0.5, f\"No data in the specified time range\",\n   121\t                                              horizontalalignment='center',\n   122\t                                              verticalalignment='center',\n   123\t                                              transform=self.plot.transAxes)\n   124\t                                x_label = 'Time (s)'\n   125\t                                self.plot.set_xlabel(x_label)\n   126\t                                self.plot.set_ylabel(metric if metric else 'Value')\n   127\t                                self.figure.tight_layout()\n   128\t                                self.canvas.draw()\n   129\t                                return\n   130\t\n   131\t                        # Filter by end time if specified\n   132\t                        if end_time is not None:\n   133\t                            metric_data = metric_data[metric_data['startDataRecord'] <= end_time]\n   134\t                            if metric_data.empty:\n   135\t                                self.plot.text(0.5, 0.5, f\"No data in the specified time range\",\n   136\t                                              horizontalalignment='center',\n   137\t                                              verticalalignment='center',\n   138\t                                              transform=self.plot.transAxes)\n   139\t                                x_label = 'Time (s)'\n   140\t                                self.plot.set_xlabel(x_label)\n   141\t                                self.plot.set_ylabel(metric if metric else 'Value')\n   142\t                                self.figure.tight_layout()\n   143\t                                self.canvas.draw()\n   144\t                                return\n   145\t\n   146\t                        # Update x_values after filtering\n   147\t                        x_values = metric_data['startDataRecord']\n   148\t                else:\n   149\t                    x_values = range(len(metric_data))\n   150\t                    x_label = 'Sample'\n   151\t\n   152\t                # Get the channel columns for plotting\n   153\t                channel_columns = [col for col in metric_data.columns if col in channels]\n   154\t\n   155\t                # Plot each selected channel if not in aggregation_only mode\n   156\t                if not aggregation_only:\n   157\t                    for channel in channels:\n   158\t                        if channel in metric_data.columns:\n   159\t                            self.plot.plot(x_values, metric_data[channel], label=channel, alpha=0.7)\n   160\t\n   161\t                # Calculate and plot aggregations if requested\n   162\t                if aggregations and channel_columns:\n   163\t                    # Calculate and plot each selected aggregation\n   164\t                    for agg in aggregations:\n   165\t                        if agg == 'mean':\n   166\t                            # Calculate mean across channels\n   167\t                            mean_values = metric_data[channel_columns].mean(axis=1)\n   168\t                            self.plot.plot(x_values, mean_values,\n   169\t                                          label='Mean',\n   170\t                                          color=AGGREGATION_COLORS['mean'],\n   171\t                                          linestyle=AGGREGATION_STYLES['mean'],\n   172\t                                          linewidth=2.5)\n   173\t\n   174\t                        elif agg == 'std':\n   175\t                            # Calculate standard deviation across channels\n   176\t                            std_values = metric_data[channel_columns].std(axis=1)\n   177\t                            self.plot.plot(x_values, std_values,\n   178\t                                          label='Std Dev',\n   179\t                                          color=AGGREGATION_COLORS['std'],\n   180\t                                          linestyle=AGGREGATION_STYLES['std'],\n   181\t                                          linewidth=2.5)\n   182\t\n   183\t                        elif agg == 'median':\n   184\t                            # Calculate median across channels\n   185\t                            median_values = metric_data[channel_columns].median(axis=1)\n   186\t                            self.plot.plot(x_values, median_values,\n   187\t                                          label='Median',\n   188\t                                          color=AGGREGATION_COLORS['median'],\n   189\t                                          linestyle=AGGREGATION_STYLES['median'],\n   190\t                                          linewidth=2.5)\n   191\t\n   192\t                # Add legend if there are multiple items to show\n   193\t                if (not aggregation_only and len(channels) > 1) or \\\n   194\t                   (aggregations and len(aggregations) > 0) or \\\n   195\t                   (not aggregation_only and channels and aggregations):\n   196\t                    self.plot.legend()\n   197\t\n   198\t                # Set x-axis limits if time window is specified\n   199\t                if 'startDataRecord' in metric_data.columns and time_window and any(x is not None for x in time_window):\n   200\t                    start_time, end_time = time_window\n   201\t                    x_min, x_max = None, None\n   202\t\n   203\t                    if start_time is not None:\n   204\t                        x_min = start_time\n   205\t                    else:\n   206\t                        x_min = min(x_values) if len(x_values) > 0 else 0\n   207\t\n   208\t                    if end_time is not None:\n   209\t                        x_max = end_time\n   210\t                    else:\n   211\t                        x_max = max(x_values) if len(x_values) > 0 else 1\n   212\t\n   213\t                    # Add a small padding to the limits\n   214\t                    padding = (x_max - x_min) * 0.05 if x_max > x_min else 0.1\n   215\t                    self.plot.set_xlim(x_min - padding, x_max + padding)\n   216\t\n   217\t        # Set title and labels\n   218\t        if title:\n   219\t            self.plot.set_title(title)\n   220\t        if xlabel:\n   221\t            self.plot.set_xlabel(xlabel)\n   222\t        else:\n   223\t            self.plot.set_xlabel(x_label if 'x_label' in locals() else 'Sample')\n   224\t        if ylabel:\n   225\t            self.plot.set_ylabel(ylabel)\n   226\t        else:\n   227\t            self.plot.set_ylabel(metric if metric else 'Value')\n   228\t\n   229\t        # Adjust layout and redraw\n   230\t        self.figure.tight_layout()\n   231\t        self.canvas.draw()\n   232\t\n   233\t    def on_mouse_press(self, event):\n   234\t        \"\"\"Handle mouse press event for interactive zooming.\"\"\"\n   235\t        # Only handle left button clicks in the plot area\n   236\t        if event.button != 1 or event.inaxes != self.plot:\n   237\t            return\n   238\t\n   239\t        # Store the starting point for the zoom box\n   240\t        self.zoom_start = (event.xdata, event.ydata)\n   241\t\n   242\t        # Create a rectangle for the zoom box if it doesn't exist\n   243\t        if not hasattr(self, 'zoom_rect'):\n   244\t            self.zoom_rect = self.plot.axvspan(event.xdata, event.xdata, alpha=0.3, color='gray')\n   245\t            self.zoom_rect.set_visible(False)\n   246\t\n   247\t    def on_mouse_motion(self, event):\n   248\t        \"\"\"Handle mouse motion event for interactive zooming.\"\"\"\n   249\t        # Only handle motion when we have a zoom start point and we're in the plot area\n   250\t        if self.zoom_start is None or event.inaxes != self.plot or not hasattr(self, 'zoom_rect'):\n   251\t            return\n   252\t\n   253\t        # Update the zoom box\n   254\t        x_start = self.zoom_start[0]\n   255\t        x_current = event.xdata\n   256\t\n   257\t        # Make sure we have valid coordinates\n   258\t        if x_start is None or x_current is None:\n   259\t            return\n   260\t\n   261\t        # Set the zoom box coordinates\n   262\t        x_min = min(x_start, x_current)\n   263\t        x_max = max(x_start, x_current)\n   264\t\n   265\t        # Update the zoom rectangle - use axvspan's xy parameter correctly\n   266\t        self.zoom_rect.set_visible(True)\n   267\t        # Instead of setting xy coordinates directly, update the span\n   268\t        self.zoom_rect.remove()\n   269\t        self.zoom_rect = self.plot.axvspan(x_min, x_max, alpha=0.3, color='gray')\n   270\t\n   271\t        # Redraw the canvas\n   272\t        self.canvas.draw_idle()\n   273\t\n   274\t    def on_mouse_release(self, event):\n   275\t        \"\"\"Handle mouse release event for interactive zooming.\"\"\"\n   276\t        # Only handle left button releases when we have a zoom start point\n   277\t        if event.button != 1 or self.zoom_start is None or event.inaxes != self.plot:\n   278\t            if hasattr(self, 'zoom_rect'):\n   279\t                self.zoom_rect.remove()\n   280\t                delattr(self, 'zoom_rect')\n   281\t                self.canvas.draw_idle()\n   282\t            self.zoom_start = None\n   283\t            return\n   284\t\n   285\t        # Get the start and end points\n   286\t        x_start = self.zoom_start[0]\n   287\t        x_end = event.xdata\n   288\t\n   289\t        # Make sure we have valid coordinates\n   290\t        if x_start is None or x_end is None:\n   291\t            self.zoom_start = None\n   292\t            if hasattr(self, 'zoom_rect'):\n   293\t                self.zoom_rect.remove()\n   294\t                delattr(self, 'zoom_rect')\n   295\t                self.canvas.draw_idle()\n   296\t            return\n   297\t\n   298\t        # Reset the zoom rectangle\n   299\t        if hasattr(self, 'zoom_rect'):\n   300\t            self.zoom_rect.remove()\n   301\t            delattr(self, 'zoom_rect')\n   302\t            self.canvas.draw_idle()\n   303\t\n   304\t        # Only zoom if the drag distance is significant\n   305\t        if abs(x_start - x_end) < 0.01:\n   306\t            self.zoom_start = None\n   307\t            return\n   308\t\n   309\t        # Sort the coordinates\n   310\t        x_min = min(x_start, x_end)\n   311\t        x_max = max(x_start, x_end)\n   312\t\n   313\t        # Update the time window in the selection frame\n   314\t        if hasattr(self, 'parent_frame') and hasattr(self.parent_frame, 'selection_frame'):\n   315\t            selection_frame = self.parent_frame.selection_frame\n   316\t            if hasattr(selection_frame, 'start_time_var') and hasattr(selection_frame, 'end_time_var'):\n   317\t                selection_frame.start_time_var.set(f\"{x_min:.2f}\")\n   318\t                selection_frame.end_time_var.set(f\"{x_max:.2f}\")\n   319\t                selection_frame.update_plot()\n   320\t\n   321\t        # Reset the zoom start point\n   322\t        self.zoom_start = None\n   323\t\nTotal lines in file: 323\n","isError":false,"requestId":""}},"46354fe1-2933-4906-aefa-0783a5ffdc16;toolu_vrtx_019FHsBzshwHTEEB6Tqf77on":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n     1\t\"\"\"\n     2\tSelection frame for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport customtkinter as ctk\n    10\t\n    11\tfrom .database_handler import DatabaseHandler\n    12\tfrom .plot_frame import MetricsPlotFrame\n    13\tfrom .utils import (\n    14\t    get_label_font, \n    15\t    get_dropdown_font, \n    16\t    get_button_font,\n    17\t    COMMON_CHANNELS,\n    18\t    ALTERNATIVE_CHANNEL_NAMES\n    19\t)\n    20\t\n    21\t\n    22\tclass SelectionFrame(ctk.CTkFrame):\n    23\t    \"\"\"\n    24\t    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    25\t    \"\"\"\n    26\t    \n    27\t    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n    28\t        \"\"\"\n    29\t        Initialize the selection frame.\n    30\t        \n    31\t        Args:\n    32\t            master: The parent widget\n    33\t            db_handler: DatabaseHandler instance for querying the database\n    34\t            plot_frame: MetricsPlotFrame instance for displaying plots\n    35\t            **kwargs: Additional arguments for the CTkFrame constructor\n    36\t        \"\"\"\n    37\t        super().__init__(master, **kwargs)\n    38\t        \n    39\t        self.db_handler = db_handler\n    40\t        self.plot_frame = plot_frame\n    41\t        \n    42\t        # Configure grid layout\n    43\t        self.grid_columnconfigure(0, weight=1)\n    44\t        self.grid_columnconfigure(1, weight=1)\n    45\t        \n    46\t        # Create fonts\n    47\t        label_font = get_label_font()\n    48\t        dropdown_font = get_dropdown_font()\n    49\t        \n    50\t        # Experiment selection - more compact\n    51\t        self.experiment_label = ctk.CTkLabel(self, text=\"Select Experiment:\", font=label_font)\n    52\t        self.experiment_label.grid(row=0, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    53\t        \n    54\t        self.experiments = self.db_handler.get_experiments()\n    55\t        experiment_names = [f\"{exp['name']} ({exp['run_name']})\" for exp in self.experiments]\n    56\t        \n    57\t        self.experiment_var = ctk.StringVar(value=experiment_names[0] if experiment_names else \"\")\n    58\t        self.experiment_dropdown = ctk.CTkOptionMenu(\n    59\t            self, \n    60\t            values=experiment_names,\n    61\t            variable=self.experiment_var,\n    62\t            command=self.on_experiment_selected,\n    63\t            height=28,\n    64\t            font=dropdown_font,\n    65\t            dropdown_font=dropdown_font\n    66\t        )\n    67\t        self.experiment_dropdown.grid(row=0, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    68\t        \n    69\t        # EEG selection - more compact\n    70\t        self.eeg_label = ctk.CTkLabel(self, text=\"Select EEG:\", font=label_font)\n    71\t        self.eeg_label.grid(row=1, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    72\t        \n    73\t        self.eeg_var = ctk.StringVar()\n    74\t        self.eeg_dropdown = ctk.CTkOptionMenu(\n    75\t            self, \n    76\t            values=[],\n    77\t            variable=self.eeg_var,\n    78\t            command=self.on_eeg_selected,\n    79\t            height=28,\n    80\t            font=dropdown_font,\n    81\t            dropdown_font=dropdown_font\n    82\t        )\n    83\t        self.eeg_dropdown.grid(row=1, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    84\t        \n    85\t        # Metric selection - more compact\n    86\t        self.metric_label = ctk.CTkLabel(self, text=\"Select Metric:\", font=label_font)\n    87\t        self.metric_label.grid(row=2, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    88\t        \n    89\t        self.metric_var = ctk.StringVar()\n    90\t        self.metric_dropdown = ctk.CTkOptionMenu(\n    91\t            self, \n    92\t            values=[],\n    93\t            variable=self.metric_var,\n    94\t            command=self.on_metric_selected,\n    95\t            height=28,\n    96\t            font=dropdown_font,\n    97\t            dropdown_font=dropdown_font\n    98\t        )\n    99\t        self.metric_dropdown.grid(row=2, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   100\t        \n   101\t        # Channels selection with more compact layout\n   102\t        self.channels_label = ctk.CTkLabel(self, text=\"Select Channels:\", font=label_font)\n   103\t        self.channels_label.grid(row=3, column=0, padx=5, pady=(8, 0), sticky=\"nw\")\n   104\t        \n   105\t        # Create a frame for channel selection buttons - more compact layout\n   106\t        self.channel_buttons_frame = ctk.CTkFrame(self)\n   107\t        self.channel_buttons_frame.grid(row=3, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   108\t        self.channel_buttons_frame.grid_columnconfigure(0, weight=1)\n   109\t        self.channel_buttons_frame.grid_columnconfigure(1, weight=1)\n   110\t        self.channel_buttons_frame.grid_columnconfigure(2, weight=1)\n   111\t        \n   112\t        # Add select all and deselect all buttons with smaller font and more compact design\n   113\t        button_font = dropdown_font\n   114\t        \n   115\t        self.select_all_button = ctk.CTkButton(\n   116\t            self.channel_buttons_frame,\n   117\t            text=\"Select All\",\n   118\t            command=self.select_all_channels,\n   119\t            height=22,\n   120\t            font=button_font\n   121\t        )\n   122\t        self.select_all_button.grid(row=0, column=0, padx=2, pady=3, sticky=\"ew\")\n   123\t        \n   124\t        self.deselect_all_button = ctk.CTkButton(\n   125\t            self.channel_buttons_frame,\n   126\t            text=\"Deselect All\",\n   127\t            command=self.deselect_all_channels,\n   128\t            height=22,\n   129\t            font=button_font\n   130\t        )\n   131\t        self.deselect_all_button.grid(row=0, column=1, padx=2, pady=3, sticky=\"ew\")\n   132\t        \n   133\t        # Add select common channels button\n   134\t        self.select_common_button = ctk.CTkButton(\n   135\t            self.channel_buttons_frame,\n   136\t            text=\"Common Channels\",\n   137\t            command=self.select_common_channels,\n   138\t            height=22,\n   139\t            font=button_font\n   140\t        )\n   141\t        self.select_common_button.grid(row=0, column=2, padx=2, pady=3, sticky=\"ew\")\n   142\t        \n   143\t        # Create a scrollable frame for channel checkboxes - increased height for better usability\n   144\t        self.channels_frame = ctk.CTkScrollableFrame(self, width=180, height=200)\n   145\t        self.channels_frame.grid(row=4, column=1, padx=5, pady=(0, 8), sticky=\"ew\")\n   146\t        \n   147\t        # Bind mouse wheel events to ensure scrolling works properly\n   148\t        self.bind_mouse_wheel(self.channels_frame)\n   149\t        \n   150\t        self.channel_vars = {}  # Will hold the checkbox variables\n   151\t        \n   152\t        # Aggregation methods frame\n   153\t        self.aggregation_frame = ctk.CTkFrame(self)\n   154\t        self.aggregation_frame.grid(row=5, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   155\t        self.aggregation_frame.grid_columnconfigure(0, weight=1)\n   156\t        self.aggregation_frame.grid_columnconfigure(1, weight=3)\n   157\t        self.aggregation_frame.grid_rowconfigure(0, weight=1)\n   158\t        self.aggregation_frame.grid_rowconfigure(1, weight=1)\n   159\t        \n   160\t        # Aggregation label\n   161\t        self.aggregation_label = ctk.CTkLabel(\n   162\t            self.aggregation_frame, \n   163\t            text=\"Aggregation:\", \n   164\t            font=label_font\n   165\t        )\n   166\t        self.aggregation_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   167\t        \n   168\t        # Aggregation checkboxes frame\n   169\t        self.aggregation_checkboxes_frame = ctk.CTkFrame(self.aggregation_frame, fg_color=\"transparent\")\n   170\t        self.aggregation_checkboxes_frame.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   171\t        self.aggregation_checkboxes_frame.grid_columnconfigure(0, weight=1)\n   172\t        self.aggregation_checkboxes_frame.grid_columnconfigure(1, weight=1)\n   173\t        self.aggregation_checkboxes_frame.grid_columnconfigure(2, weight=1)\n   174\t        \n   175\t        # Aggregation method checkboxes\n   176\t        self.aggregation_vars = {}\n   177\t        \n   178\t        # Mean checkbox\n   179\t        self.aggregation_vars['mean'] = ctk.BooleanVar(value=False)\n   180\t        self.mean_checkbox = ctk.CTkCheckBox(\n   181\t            self.aggregation_checkboxes_frame,\n   182\t            text=\"Mean\",\n   183\t            variable=self.aggregation_vars['mean'],\n   184\t            onvalue=True,\n   185\t            offvalue=False,\n   186\t            font=dropdown_font,\n   187\t            checkbox_width=16,\n   188\t            checkbox_height=16\n   189\t        )\n   190\t        self.mean_checkbox.grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n   191\t        \n   192\t        # Std checkbox\n   193\t        self.aggregation_vars['std'] = ctk.BooleanVar(value=False)\n   194\t        self.std_checkbox = ctk.CTkCheckBox(\n   195\t            self.aggregation_checkboxes_frame,\n   196\t            text=\"Std Dev\",\n   197\t            variable=self.aggregation_vars['std'],\n   198\t            onvalue=True,\n   199\t            offvalue=False,\n   200\t            font=dropdown_font,\n   201\t            checkbox_width=16,\n   202\t            checkbox_height=16\n   203\t        )\n   204\t        self.std_checkbox.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n   205\t        \n   206\t        # Median checkbox\n   207\t        self.aggregation_vars['median'] = ctk.BooleanVar(value=False)\n   208\t        self.median_checkbox = ctk.CTkCheckBox(\n   209\t            self.aggregation_checkboxes_frame,\n   210\t            text=\"Median\",\n   211\t            variable=self.aggregation_vars['median'],\n   212\t            onvalue=True,\n   213\t            offvalue=False,\n   214\t            font=dropdown_font,\n   215\t            checkbox_width=16,\n   216\t            checkbox_height=16\n   217\t        )\n   218\t        self.median_checkbox.grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n   219\t        \n   220\t        # Aggregation only checkbox\n   221\t        self.aggregation_only_var = ctk.BooleanVar(value=False)\n   222\t        self.aggregation_only_checkbox = ctk.CTkCheckBox(\n   223\t            self.aggregation_frame,\n   224\t            text=\"Show Aggregation Only\",\n   225\t            variable=self.aggregation_only_var,\n   226\t            onvalue=True,\n   227\t            offvalue=False,\n   228\t            font=dropdown_font,\n   229\t            checkbox_width=16,\n   230\t            checkbox_height=16\n   231\t        )\n   232\t        self.aggregation_only_checkbox.grid(row=1, column=1, padx=5, pady=(0, 2), sticky=\"w\")\n   233\t        \n   234\t        # Time window selection frame\n   235\t        self.time_window_frame = ctk.CTkFrame(self)\n   236\t        self.time_window_frame.grid(row=6, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   237\t        self.time_window_frame.grid_columnconfigure(0, weight=1)\n   238\t        self.time_window_frame.grid_columnconfigure(1, weight=1)\n   239\t        self.time_window_frame.grid_columnconfigure(2, weight=1)\n   240\t        self.time_window_frame.grid_columnconfigure(3, weight=1)\n   241\t        \n   242\t        # Time window label\n   243\t        self.time_window_label = ctk.CTkLabel(\n   244\t            self.time_window_frame, \n   245\t            text=\"Time Window (s):\", \n   246\t            font=label_font\n   247\t        )\n   248\t        self.time_window_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   249\t        \n   250\t        # Start time entry\n   251\t        self.start_time_var = ctk.StringVar(value=\"0\")\n   252\t        self.start_time_entry = ctk.CTkEntry(\n   253\t            self.time_window_frame,\n   254\t            textvariable=self.start_time_var,\n   255\t            width=60,\n   256\t            height=25,\n   257\t            font=dropdown_font\n   258\t        )\n   259\t        self.start_time_entry.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   260\t        \n   261\t        # To label\n   262\t        self.to_label = ctk.CTkLabel(\n   263\t            self.time_window_frame, \n   264\t            text=\"to\", \n   265\t            font=label_font\n   266\t        )\n   267\t        self.to_label.grid(row=0, column=2, padx=2, pady=5)\n   268\t        \n   269\t        # End time entry\n   270\t        self.end_time_var = ctk.StringVar(value=\"\")\n   271\t        self.end_time_entry = ctk.CTkEntry(\n   272\t            self.time_window_frame,\n   273\t            textvariable=self.end_time_var,\n   274\t            width=60,\n   275\t            height=25,\n   276\t            font=dropdown_font\n   277\t        )\n   278\t        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n   279\t        \n   280\t        # Reset zoom button\n   281\t        self.reset_zoom_button = ctk.CTkButton(\n   282\t            self, \n   283\t            text=\"Reset Zoom\", \n   284\t            command=self.reset_time_window,\n   285\t            height=25,\n   286\t            font=dropdown_font\n   287\t        )\n   288\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   289\t        \n   290\t        # Update button - more compact\n   291\t        self.update_button = ctk.CTkButton(\n   292\t            self, \n   293\t            text=\"Update Plot\", \n   294\t            command=self.update_plot,\n   295\t            height=30,\n   296\t            font=get_button_font()\n   297\t        )\n   298\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 8), sticky=\"ew\")\n   299\t        \n   300\t        # Initialize with the first experiment if available\n   301\t        if self.experiments:\n   302\t            self.on_experiment_selected(experiment_names[0])\n   303\t    \n   304\t    def on_experiment_selected(self, selection: str):\n   305\t        \"\"\"\n   306\t        Handle experiment selection change.\n   307\t        \n   308\t        Args:\n   309\t            selection: Selected experiment name\n   310\t        \"\"\"\n   311\t        # Find the selected experiment\n   312\t        selected_exp = None\n   313\t        for exp in self.experiments:\n   314\t            if f\"{exp['name']} ({exp['run_name']})\" == selection:\n   315\t                selected_exp = exp\n   316\t                break\n   317\t        \n   318\t        if not selected_exp:\n   319\t            return\n   320\t        \n   321\t        # Update EEG dropdown\n   322\t        self.current_experiment_id = selected_exp['id']\n   323\t        eegs = self.db_handler.get_eegs_for_experiment(self.current_experiment_id)\n   324\t        eeg_names = [eeg['filename'] for eeg in eegs]\n   325\t        \n   326\t        self.eegs = eegs\n   327\t        self.eeg_dropdown.configure(values=eeg_names)\n   328\t        if eeg_names:\n   329\t            self.eeg_var.set(eeg_names[0])\n   330\t            self.on_eeg_selected(eeg_names[0])\n   331\t        else:\n   332\t            self.eeg_var.set(\"\")\n   333\t            self.clear_metrics()\n   334\t            self.clear_channels()\n   335\t    \n   336\t    def on_eeg_selected(self, selection: str):\n   337\t        \"\"\"\n   338\t        Handle EEG selection change.\n   339\t        \n   340\t        Args:\n   341\t            selection: Selected EEG name\n   342\t        \"\"\"\n   343\t        # Find the selected EEG\n   344\t        selected_eeg = None\n   345\t        for eeg in self.eegs:\n   346\t            if eeg['filename'] == selection:\n   347\t                selected_eeg = eeg\n   348\t                break\n   349\t        \n   350\t        if not selected_eeg:\n   351\t            return\n   352\t        \n   353\t        # Update metrics dropdown\n   354\t        self.current_eeg_id = selected_eeg['id']\n   355\t        self.update_metrics_dropdown()\n   356\t        self.update_channels_checkboxes()\n   357\t    \n   358\t    def on_metric_selected(self, selection: str):\n   359\t        \"\"\"\n   360\t        Handle metric selection change.\n   361\t        \n   362\t        Args:\n   363\t            selection: Selected metric name\n   364\t        \"\"\"\n   365\t        self.current_metric = selection\n   366\t    \n   367\t    def update_metrics_dropdown(self):\n   368\t        \"\"\"Update the metrics dropdown based on the selected experiment and EEG.\"\"\"\n   369\t        # Get available metrics\n   370\t        metrics = self.db_handler.get_available_metrics(self.current_experiment_id, self.current_eeg_id)\n   371\t        \n   372\t        # Update dropdown\n   373\t        self.metric_dropdown.configure(values=metrics)\n   374\t        if metrics:\n   375\t            self.metric_var.set(metrics[0])\n   376\t            self.current_metric = metrics[0]\n   377\t        else:\n   378\t            self.metric_var.set(\"\")\n   379\t            self.current_metric = None\n   380\t    \n   381\t    def update_channels_checkboxes(self):\n   382\t        \"\"\"Update the channel checkboxes based on the selected experiment and EEG.\"\"\"\n   383\t        # Clear existing checkboxes\n   384\t        self.clear_channels()\n   385\t        \n   386\t        # Get available channels\n   387\t        self.available_channels = self.db_handler.get_available_channels(self.current_experiment_id, self.current_eeg_id)\n   388\t        \n   389\t        # Add a search entry at the top of the channels frame\n   390\t        self.search_var = ctk.StringVar()\n   391\t        self.search_var.trace_add(\"write\", self.filter_channels)\n   392\t        \n   393\t        self.search_frame = ctk.CTkFrame(self.channels_frame)\n   394\t        self.search_frame.grid(row=0, column=0, padx=5, pady=5, sticky=\"ew\")\n   395\t        self.search_frame.grid_columnconfigure(0, weight=1)\n   396\t        \n   397\t        self.search_entry = ctk.CTkEntry(\n   398\t            self.search_frame,\n   399\t            placeholder_text=\"Search channels...\",\n   400\t            textvariable=self.search_var,\n   401\t            height=25,\n   402\t            font=get_dropdown_font()\n   403\t        )\n   404\t        self.search_entry.grid(row=0, column=0, padx=5, pady=3, sticky=\"ew\")\n   405\t        \n   406\t        # Create the channels container frame\n   407\t        self.channels_container = ctk.CTkFrame(self.channels_frame, fg_color=\"transparent\")\n   408\t        self.channels_container.grid(row=1, column=0, padx=5, pady=5, sticky=\"ew\")\n   409\t        \n   410\t        # Display all channels initially\n   411\t        self.display_channels(self.available_channels)\n   412\t    \n   413\t    def display_channels(self, channels: List[str]):\n   414\t        \"\"\"\n   415\t        Display the given channels as checkboxes.\n   416\t        \n   417\t        Args:\n   418\t            channels: List of channel names to display\n   419\t        \"\"\"\n   420\t        # Clear existing checkboxes in the container\n   421\t        for widget in self.channels_container.winfo_children():\n   422\t            widget.destroy()\n   423\t        \n   424\t        # Configure the container for proper scrolling\n   425\t        self.channels_container.grid_columnconfigure(0, weight=1)\n   426\t        \n   427\t        # Sort channels alphabetically to ensure consistent display\n   428\t        sorted_channels = sorted(channels)\n   429\t        \n   430\t        # Create a checkbox for each channel\n   431\t        for i, channel in enumerate(sorted_channels):\n   432\t            var = self.channel_vars.get(channel, ctk.BooleanVar(value=False))\n   433\t            self.channel_vars[channel] = var\n   434\t            \n   435\t            # Create more compact checkboxes\n   436\t            checkbox = ctk.CTkCheckBox(\n   437\t                self.channels_container, \n   438\t                text=channel, \n   439\t                variable=var,\n   440\t                onvalue=True, \n   441\t                offvalue=False,\n   442\t                height=20,\n   443\t                font=get_dropdown_font(),\n   444\t                checkbox_width=16,\n   445\t                checkbox_height=16\n   446\t            )\n   447\t            checkbox.grid(row=i, column=0, padx=8, pady=3, sticky=\"w\")\n   448\t            \n   449\t            # Bind mouse wheel event to each checkbox for better scrolling\n   450\t            checkbox.bind(\"<MouseWheel>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   451\t            checkbox.bind(\"<Button-4>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   452\t            checkbox.bind(\"<Button-5>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   453\t    \n   454\t    def filter_channels(self, *args):\n   455\t        \"\"\"Filter channels based on search text.\"\"\"\n   456\t        search_text = self.search_var.get().lower()\n   457\t        \n   458\t        if not search_text:\n   459\t            # If search is empty, show all channels\n   460\t            filtered_channels = self.available_channels\n   461\t        else:\n   462\t            # Filter channels that contain the search text\n   463\t            filtered_channels = [ch for ch in self.available_channels if search_text in ch.lower()]\n   464\t            \n   465\t            # Sort the filtered channels alphabetically\n   466\t            filtered_channels.sort()\n   467\t        \n   468\t        # Update the displayed channels\n   469\t        self.display_channels(filtered_channels)\n   470\t    \n   471\t    def bind_mouse_wheel(self, widget):\n   472\t        \"\"\"\n   473\t        Bind mouse wheel events to the widget for scrolling.\n   474\t        \n   475\t        Args:\n   476\t            widget: The widget to bind mouse wheel events to\n   477\t        \"\"\"\n   478\t        # Bind for Windows and Linux (with mouse wheel)\n   479\t        widget.bind_all(\"<MouseWheel>\", lambda event: self._on_mouse_wheel(event, widget))\n   480\t        # Bind for Linux (with touchpad)\n   481\t        widget.bind_all(\"<Button-4>\", lambda event: self._on_mouse_wheel(event, widget))\n   482\t        widget.bind_all(\"<Button-5>\", lambda event: self._on_mouse_wheel(event, widget))\n   483\t    \n   484\t    def _on_mouse_wheel(self, event, widget):\n   485\t        \"\"\"\n   486\t        Handle mouse wheel events for scrolling.\n   487\t        \n   488\t        Args:\n   489\t            event: The mouse wheel event\n   490\t            widget: The widget to scroll\n   491\t        \"\"\"\n   492\t        # Get the widget under the cursor\n   493\t        x, y = event.x_root, event.y_root\n   494\t        target_widget = event.widget.winfo_containing(x, y)\n   495\t        \n   496\t        # Check if the cursor is over our scrollable frame or its children\n   497\t        parent = target_widget\n   498\t        while parent is not None:\n   499\t            if parent == widget or parent == self.channels_container:\n   500\t                break\n   501\t            parent = parent.master\n   502\t        \n   503\t        # If cursor is not over our scrollable area, don't scroll\n   504\t        if parent is None:\n   505\t            return\n   506\t        \n   507\t        # Handle different event types\n   508\t        if event.num == 4 or event.delta > 0:  # Scroll up\n   509\t            widget._parent_canvas.yview_scroll(-1, \"units\")\n   510\t        elif event.num == 5 or event.delta < 0:  # Scroll down\n   511\t            widget._parent_canvas.yview_scroll(1, \"units\")\n   512\t    \n   513\t    def clear_channels(self):\n   514\t        \"\"\"Clear all channel checkboxes and related widgets.\"\"\"\n   515\t        for widget in self.channels_frame.winfo_children():\n   516\t            widget.destroy()\n   517\t        \n   518\t        self.channel_vars = {}\n   519\t        self.available_channels = []\n   520\t    \n   521\t    def clear_metrics(self):\n   522\t        \"\"\"Clear the metrics dropdown.\"\"\"\n   523\t        self.metric_dropdown.configure(values=[])\n   524\t        self.metric_var.set(\"\")\n   525\t        self.current_metric = None\n   526\t    \n   527\t    def select_all_channels(self):\n   528\t        \"\"\"Select all channel checkboxes.\"\"\"\n   529\t        for var in self.channel_vars.values():\n   530\t            var.set(True)\n   531\t    \n   532\t    def deselect_all_channels(self):\n   533\t        \"\"\"Deselect all channel checkboxes.\"\"\"\n   534\t        for var in self.channel_vars.values():\n   535\t            var.set(False)\n   536\t    \n   537\t    def select_common_channels(self):\n   538\t        \"\"\"Select common EEG channels (10-20 system).\"\"\"\n   539\t        # First deselect all\n   540\t        self.deselect_all_channels()\n   541\t        \n   542\t        # Select the channels if they exist in our available channels\n   543\t        for channel in COMMON_CHANNELS:\n   544\t            if channel in self.channel_vars:\n   545\t                self.channel_vars[channel].set(True)\n   546\t            # Try alternative name if the channel doesn't exist\n   547\t            elif channel in ALTERNATIVE_CHANNEL_NAMES and ALTERNATIVE_CHANNEL_NAMES[channel] in self.channel_vars:\n   548\t                self.channel_vars[ALTERNATIVE_CHANNEL_NAMES[channel]].set(True)\n   549\t        \n   550\t        # If we have a search filter active, update the display\n   551\t        if hasattr(self, 'search_var'):\n   552\t            self.filter_channels()\n   553\t    \n   554\t    def reset_time_window(self):\n   555\t        \"\"\"Reset the time window to show all data.\"\"\"\n   556\t        self.start_time_var.set(\"0\")\n   557\t        self.end_time_var.set(\"\")\n   558\t        self.update_plot()\n   559\t    \n   560\t    def update_plot(self):\n   561\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   562\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   563\t            return\n   564\t        \n   565\t        # Get selected channels\n   566\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   567\t        \n   568\t        # Get selected aggregation methods\n   569\t        selected_aggregations = [agg for agg, var in self.aggregation_vars.items() if var.get()]\n   570\t        \n   571\t        # Check if we should show only aggregations\n   572\t        aggregation_only = self.aggregation_only_var.get()\n   573\t        \n   574\t        # Check if we have valid selections\n   575\t        if (not selected_channels and not selected_aggregations) or \\\n   576\t           (aggregation_only and not selected_aggregations):\n   577\t            self.plot_frame.update_plot(None, None, None, \"No channels or aggregations selected\")\n   578\t            return\n   579\t        \n   580\t        # Get data for the selected experiment and EEG\n   581\t        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n   582\t        \n   583\t        if df.empty:\n   584\t            self.plot_frame.update_plot(None, None, None, \"No data available\")\n   585\t            return\n   586\t        \n   587\t        # Get time window values\n   588\t        try:\n   589\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   590\t        except ValueError:\n   591\t            start_time = None\n   592\t            self.start_time_var.set(\"0\")\n   593\t        \n   594\t        try:\n   595\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   596\t        except ValueError:\n   597\t            end_time = None\n   598\t            self.end_time_var.set(\"\")\n   599\t        \n   600\t        # Update the plot\n   601\t        experiment_name = next((exp['name'] for exp in self.experiments if exp['id'] == self.current_experiment_id), \"\")\n   602\t        eeg_name = next((eeg['filename'] for eeg in self.eegs if eeg['id'] == self.current_eeg_id), \"\")\n   603\t        \n   604\t        title = f\"{self.current_metric} for {experiment_name} - {eeg_name}\"\n   605\t        \n   606\t        # Add aggregation-only info to title if specified\n   607\t        if aggregation_only and selected_aggregations:\n   608\t            title += \" (Aggregation Only)\"\n   609\t        \n   610\t        # Add time window info to title if specified\n   611\t        if start_time is not None and end_time is not None:\n   612\t            title += f\" (Time: {start_time}s to {end_time}s)\"\n   613\t        elif start_time is not None:\n   614\t            title += f\" (Time: {start_time}s+)\"\n   615\t        \n   616\t        self.plot_frame.update_plot(\n   617\t            df, \n   618\t            self.current_metric, \n   619\t            selected_channels, \n   620\t            title, \n   621\t            time_window=(start_time, end_time),\n   622\t            aggregations=selected_aggregations,\n   623\t            aggregation_only=aggregation_only\n   624\t        )\n   625\t\nTotal lines in file: 625\n","isError":false,"requestId":""}},"bb8af92d-0150-4730-8ab7-824abfaa3348;toolu_vrtx_01WVEme2mGU6a4Fw1pztEwUM":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/utils.py:\n     1\t\"\"\"\n     2\tUtility functions and constants for the EEG Metrics Viewer.\n     3\t\"\"\"\n     4\t\n     5\tfrom typing import Dict, List, Tuple\n     6\timport customtkinter as ctk\n     7\t\n     8\t# Common metadata columns that are not EEG channels\n     9\tMETADATA_COLUMNS = ['eeg_id', 'label', 'startDataRecord', 'duration', 'metric']\n    10\t\n    11\t# Aggregation colors and styles\n    12\tAGGREGATION_COLORS: Dict[str, str] = {\n    13\t    'mean': 'red',\n    14\t    'std': 'purple',\n    15\t    'median': 'green'\n    16\t}\n    17\t\n    18\tAGGREGATION_STYLES: Dict[str, str] = {\n    19\t    'mean': '-',\n    20\t    'std': '--',\n    21\t    'median': '-.'\n    22\t}\n    23\t\n    24\t# Common 10-20 system channels (in alphabetical order)\n    25\tCOMMON_CHANNELS: List[str] = [\n    26\t    'C3', 'C4', 'Cz', 'F3', 'F4', 'F7', 'F8', 'Fp1', 'Fp2', 'Fz',\n    27\t    'O1', 'O2', 'P3', 'P4', 'P7', 'P8', 'Pz', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8'\n    28\t]\n    29\t\n    30\t# Map of alternative channel names (old -> new and new -> old)\n    31\tALTERNATIVE_CHANNEL_NAMES: Dict[str, str] = {\n    32\t    'T3': 'T7', 'T4': 'T8', 'T5': 'P7', 'T6': 'P8',\n    33\t    'T7': 'T3', 'T8': 'T4', 'P7': 'T5', 'P8': 'T6'\n    34\t}\n    35\t\n    36\t# Font configurations\n    37\tdef get_label_font() -> ctk.CTkFont:\n    38\t    \"\"\"Return a font for labels.\"\"\"\n    39\t    return ctk.CTkFont(size=12)\n    40\t\n    41\tdef get_dropdown_font() -> ctk.CTkFont:\n    42\t    \"\"\"Return a font for dropdowns and smaller text.\"\"\"\n    43\t    return ctk.CTkFont(size=11)\n    44\t\n    45\tdef get_button_font() -> ctk.CTkFont:\n    46\t    \"\"\"Return a font for buttons.\"\"\"\n    47\t    return ctk.CTkFont(size=14, weight=\"bold\")\n    48\t\nTotal lines in file: 48\n","isError":false,"requestId":""}},"5ceeeab7-b0e9-4dd7-b61e-fdc8ef82ee9a;toolu_vrtx_01C8a4DrVvTqZ4cp6qNrrPwn":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/run_metrics_viewer.py:\n     1\t#!/usr/bin/env python3\n     2\t\"\"\"\n     3\tRun script for the EEG Metrics Viewer.\n     4\t\n     5\tThis script provides a simple way to launch the EEG Metrics Viewer application\n     6\twith a specified database path.\n     7\t\n     8\tUsage:\n     9\t    python run_metrics_viewer.py [path_to_database]\n    10\t\n    11\tIf no database path is provided, the script will look for the default database\n    12\tat \"../example/EEGAnalyzer.sqlite\".\n    13\t\"\"\"\n    14\t\n    15\timport os\n    16\timport sys\n    17\timport importlib.util\n    18\t\n    19\tdef check_dependencies():\n    20\t    \"\"\"Check if all required dependencies are installed.\"\"\"\n    21\t    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\"]\n    22\t    missing_packages = []\n    23\t\n    24\t    for package in required_packages:\n    25\t        if importlib.util.find_spec(package) is None:\n    26\t            missing_packages.append(package)\n    27\t\n    28\t    if missing_packages:\n    29\t        print(\"The following required packages are missing:\")\n    30\t        for package in missing_packages:\n    31\t            print(f\"  - {package}\")\n    32\t        print(\"\\nPlease install them using:\")\n    33\t        print(\"  python install_dependencies.py\")\n    34\t        print(\"or\")\n    35\t        print(f\"  pip install {' '.join(missing_packages)}\")\n    36\t        return False\n    37\t\n    38\t    return True\n    39\t\n    40\tdef main():\n    41\t    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    42\t    # Check dependencies first\n    43\t    if not check_dependencies():\n    44\t        sys.exit(1)\n    45\t\n    46\t    # Import App only after checking dependencies\n    47\t    from metrics_viewer import App\n    48\t\n    49\t    # Check if a database path is provided as a command-line argument\n    50\t    if len(sys.argv) > 1:\n    51\t        db_path = sys.argv[1]\n    52\t    else:\n    53\t        # Default database path\n    54\t        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n    55\t                              \"example\", \"EEGAnalyzer.sqlite\")\n    56\t\n    57\t    # Ensure the database file exists\n    58\t    if not os.path.exists(db_path):\n    59\t        print(f\"Error: Database file not found at {db_path}\")\n    60\t        print(\"Please provide a valid path to the EEGAnalyzer.sqlite database.\")\n    61\t        sys.exit(1)\n    62\t\n    63\t    print(f\"Starting EEG Metrics Viewer with database: {db_path}\")\n    64\t\n    65\t    # Start the application\n    66\t    app = App(db_path)\n    67\t    app.mainloop()\n    68\t\n    69\tif __name__ == \"__main__\":\n    70\t    main()\n    71\t\nTotal lines in file: 71\n","isError":false,"requestId":""}},"de1ca3f8-2373-4182-8617-09760e7625ab;toolu_vrtx_018yGvEyXamkvQByy7xSoyA3":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"89f0a4e3-0c6a-478d-998e-6e46de8b2634;toolu_vrtx_01K4GdFbTThxDYa96ZrNwkpd":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/install_dependencies.py:\n     1\t#!/usr/bin/env python3\n     2\t\"\"\"\n     3\tScript to install the required dependencies for the EEG Metrics Viewer.\n     4\t\n     5\tThis script checks if the required packages are installed and installs them if needed.\n     6\t\"\"\"\n     7\t\n     8\timport sys\n     9\timport subprocess\n    10\timport importlib.util\n    11\t\n    12\tdef check_package(package_name):\n    13\t    \"\"\"Check if a package is installed.\"\"\"\n    14\t    return importlib.util.find_spec(package_name) is not None\n    15\t\n    16\tdef install_package(package_name):\n    17\t    \"\"\"Install a package using pip.\"\"\"\n    18\t    print(f\"Installing {package_name}...\")\n    19\t    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package_name])\n    20\t    print(f\"{package_name} installed successfully.\")\n    21\t\n    22\tdef main():\n    23\t    \"\"\"Check and install required packages.\"\"\"\n    24\t    required_packages = [\n    25\t        \"customtkinter\",\n    26\t        \"matplotlib\",\n    27\t        \"numpy\",\n    28\t        \"pandas\",\n    29\t        \"sqlalchemy\"\n    30\t    ]\n    31\t    \n    32\t    missing_packages = []\n    33\t    \n    34\t    # Check which packages are missing\n    35\t    for package in required_packages:\n    36\t        if not check_package(package):\n    37\t            missing_packages.append(package)\n    38\t    \n    39\t    # Install missing packages\n    40\t    if missing_packages:\n    41\t        print(f\"The following packages need to be installed: {', '.join(missing_packages)}\")\n    42\t        try:\n    43\t            for package in missing_packages:\n    44\t                install_package(package)\n    45\t            print(\"All required packages have been installed.\")\n    46\t        except Exception as e:\n    47\t            print(f\"Error installing packages: {e}\")\n    48\t            print(\"Please install the required packages manually:\")\n    49\t            for package in missing_packages:\n    50\t                print(f\"  pip install {package}\")\n    51\t            sys.exit(1)\n    52\t    else:\n    53\t        print(\"All required packages are already installed.\")\n    54\t\n    55\tif __name__ == \"__main__\":\n    56\t    main()\n    57\t\nTotal lines in file: 57\n","isError":false,"requestId":""}},"c8841e01-7194-4e2d-8353-764fd900d9b9;toolu_vrtx_01DdAo7KxKMiDh6yJVfzLRR4":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"43c7e231-94de-4f2d-a5f9-ee2144f23230;toolu_vrtx_01K29GR2jCGK2GD5rHBEBi3v":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"9d0c5801-8cd3-4af9-b0d0-f07e9b98c631;toolu_vrtx_01EWoWpPcmUzoZU2fHGvWHiz":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/database_handler.py:\n    50\t    \n    51\t    def get_eegs_for_experiment(self, experiment_id: str) -> List[Dict[str, Any]]:\n    52\t        \"\"\"\n    53\t        Get all EEGs associated with a specific experiment.\n    54\t        \n    55\t        Args:\n    56\t            experiment_id: ID of the experiment\n    57\t            \n    58\t        Returns:\n    59\t            List of dictionaries containing EEG information\n    60\t        \"\"\"\n    61\t        experiment = self.session.get(Alchemist.Experiment, experiment_id)\n    62\t        if not experiment:\n    63\t            return []\n    64\t        \n    65\t        return [{'id': eeg.id, 'filename': eeg.filename, 'filepath': eeg.filepath} for eeg in experiment.eegs]\n    66\t    \n    67\t    def get_metrics_data(self, experiment_id: str, eeg_id: str) -> pd.DataFrame:\n    68\t        \"\"\"\n    69\t        Get metrics data for a specific experiment and EEG.\n    70\t        \nTotal lines in file: 126\n","isError":false,"requestId":""}},"d4dd3f42-cab1-4dae-8867-b34fd52a9eae;toolu_vrtx_018FmspwBGmEV9CSyKnuG6Da":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   280\t        # Reset zoom button\n   281\t        self.reset_zoom_button = ctk.CTkButton(\n   282\t            self, \n   283\t            text=\"Reset Zoom\", \n   284\t            command=self.reset_time_window,\n   285\t            height=25,\n   286\t            font=dropdown_font\n   287\t        )\n   288\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   289\t        \n   290\t        # Update button - more compact\n   291\t        self.update_button = ctk.CTkButton(\n   292\t            self, \n   293\t            text=\"Update Plot\", \n   294\t            command=self.update_plot,\n   295\t            height=30,\n   296\t            font=get_button_font()\n   297\t        )\n   298\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 8), sticky=\"ew\")\n   299\t        \n   300\t        # Initialize with the first experiment if available\nTotal lines in file: 625\n","isError":false,"requestId":""}},"fef3f673-80cc-464b-afd2-24dce6df6a01;toolu_vrtx_016KYRrGbDHfhmcRUcCn7iQ8":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/app.py\n\"\"\"\nMain application class for the EEG Metrics Viewer.\n\"\"\"\n\nimport os\nimport sys\nimport customtkinter as ctk\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .selection_frame import SelectionFrame\n\n\nclass App(ctk.CTk):\n    \"\"\"\n    Main application class for the EEG Metrics Viewer.\n    \"\"\"\n    \n    def __init__(self, db_path: str):\n        \"\"\"\n        Initialize the application.\n        \n        Args:\n            db_path: Path to the SQLite database file\n        \"\"\"\n        super().__init__()\n        \n        # Configure window\n        self.title(\"EEG Metrics Viewer\")\n        self.geometry(\"1400x800\")  # Larger default size\n        \n        # Configure grid layout - give much more space to the plot\n        self.grid_columnconfigure(0, weight=1)    # Selection panel\n        self.grid_columnconfigure(1, weight=5)    # Plot area (significantly increased weight)\n        self.grid_rowconfigure(0, weight=1)\n        \n        # Initialize database handler\n        self.db_handler = DatabaseHandler(db_path)\n        \n        # Create plot frame with more space\n        self.plot_frame = MetricsPlotFrame(self, title=\"Metrics Visualization\")\n        self.plot_frame.grid(row=0, column=1, padx=(0, 10), pady=10, sticky=\"nsew\")\n        \n        # Create selection frame with narrower fixed width\n        self.selection_frame = SelectionFrame(self, self.db_handler, self.plot_frame, width=250)\n        self.selection_frame.grid(row=0, column=0, padx=5, pady=10, sticky=\"nsew\")\n        self.selection_frame.grid_propagate(False)  # Prevent the frame from resizing based on content\n...\n","isError":false,"requestId":""}},"9e858512-6674-45c8-af87-7de6c9d9272a;toolu_vrtx_013FoKbyPsXckNeTxV3LFCq8":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   336\t    def on_eeg_selected(self, selection: str):\n   337\t        \"\"\"\n   338\t        Handle EEG selection change.\n   339\t        \n   340\t        Args:\n   341\t            selection: Selected EEG name\n   342\t        \"\"\"\n   343\t        # Find the selected EEG\n   344\t        selected_eeg = None\n   345\t        for eeg in self.eegs:\n   346\t            if eeg['filename'] == selection:\n   347\t                selected_eeg = eeg\n   348\t                break\n   349\t        \n   350\t        if not selected_eeg:\n   351\t            return\n   352\t        \n   353\t        # Update metrics dropdown\n   354\t        self.current_eeg_id = selected_eeg['id']\n   355\t        self.update_metrics_dropdown()\n   356\t        self.update_channels_checkboxes()\nTotal lines in file: 625\n","isError":false,"requestId":""}},"d14fdbf5-1caa-4234-a058-4970853b4567;toolu_vrtx_01MYeYNLBGSK14wnwLBGrBf7":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   560\t    def update_plot(self):\n   561\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   562\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   563\t            return\n   564\t        \n   565\t        # Get selected channels\n   566\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   567\t        \n   568\t        # Get selected aggregation methods\n   569\t        selected_aggregations = [agg for agg, var in self.aggregation_vars.items() if var.get()]\n   570\t        \n   571\t        # Check if we should show only aggregations\n   572\t        aggregation_only = self.aggregation_only_var.get()\n   573\t        \n   574\t        # Check if we have valid selections\n   575\t        if (not selected_channels and not selected_aggregations) or \\\n   576\t           (aggregation_only and not selected_aggregations):\n   577\t            self.plot_frame.update_plot(None, None, None, \"No channels or aggregations selected\")\n   578\t            return\n   579\t        \n   580\t        # Get data for the selected experiment and EEG\nTotal lines in file: 625\n","isError":false,"requestId":""}},"1d3c243d-8260-4e5a-bbff-60a0ae342161;toolu_vrtx_01KyM8L8tmYFTeRkAHuJjq1n":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n   580\t        # Get data for the selected experiment and EEG\n   581\t        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n   582\t        \n   583\t        if df.empty:\n   584\t            self.plot_frame.update_plot(None, None, None, \"No data available\")\n   585\t            return\n   586\t        \n   587\t        # Get time window values\n   588\t        try:\n   589\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   590\t        except ValueError:\n   591\t            start_time = None\n   592\t            self.start_time_var.set(\"0\")\n   593\t        \n   594\t        try:\n   595\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   596\t        except ValueError:\n   597\t            end_time = None\n   598\t            self.end_time_var.set(\"\")\n   599\t        \n   600\t        # Update the plot\nTotal lines in file: 625\n","isError":false,"requestId":""}},"249913fa-ac0e-45b8-ab23-d6f60f245b21;toolu_vrtx_01CsR8Ke7cf43aamr8gRhrqj":{"phase":5,"result":{"text":"Successfully edited the file gui/install_dependencies.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    20\t    print(f\"{package_name} installed successfully.\")\n    21\t\n    22\tdef main():\n    23\t    \"\"\"Check and install required packages.\"\"\"\n    24\t    required_packages = [\n    25\t        \"customtkinter\",\n    26\t        \"matplotlib\",\n    27\t        \"numpy\",\n    28\t        \"pandas\",\n    29\t        \"sqlalchemy\",\n    30\t        \"mne\"\n    31\t    ]\n    32\t\n    33\t    missing_packages = []\n    34\t\n    35\t    # Check which packages are missing\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"242a338c-162b-4ebb-a1f9-991c635a38f3;toolu_vrtx_01N8D4SsBbcjo4gQxkskDfbt":{"phase":6,"result":{"text":"Failed to edit the file gui/run_metrics_viewer.py. See below for details.\nResult for str_replace_entries[0]:\nNo replacement was performed, oldStr did not appear verbatim in gui/run_metrics_viewer.py.\nThe content in the specified region is:\n    16\timport sys\n    17\timport importlib.util\n    18\t\n    19\tdef check_dependencies():\n    20\t    \"\"\"Check if all required dependencies are installed.\"\"\"\n    21\t    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\"]\n    22\t    missing_packages = []\n    23\t\n    24\t    for package in required_packages:\n    25\t        if importlib.util.find_spec(package) is None:\n\nDiff between oldStr and the specified region is:\n===================================================================\n--- oldStr\n+++ regionContent\n@@ -1,2 +1,2 @@\n-    \"Check if all required dependencies are installed.\"\"\"\n+    \"\"\"Check if all required dependencies are installed.\"\"\"\n     required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\"]\n\n\nFix failed str_replace_entries accordingly and try again.\n","isError":true,"requestId":""}},"caa2ce42-c23d-480b-ab32-40d665eb0d5a;toolu_vrtx_017Rqn2TYNdy69zCSt6oWmkA":{"phase":5,"result":{"text":"Successfully edited the file gui/run_metrics_viewer.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    17\timport importlib.util\n    18\t\n    19\tdef check_dependencies():\n    20\t    \"\"\"Check if all required dependencies are installed.\"\"\"\n    21\t    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\", \"mne\"]\n    22\t    missing_packages = []\n    23\t\n    24\t    for package in required_packages:\n    25\t        if importlib.util.find_spec(package) is None:\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"1cb98c1b-0160-48ed-a77a-41f01497b16a;toolu_vrtx_01KFFUrK2kre7zy6gfx9UScP":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport os\n    10\timport customtkinter as ctk\n    11\timport tkinter as tk\n    12\tfrom tkinter import messagebox\n    13\timport mne\n    14\timport numpy as np\n    15\t\n    16\tfrom .database_handler import DatabaseHandler\n    17\tfrom .plot_frame import MetricsPlotFrame\n    18\tfrom .utils import (\n    19\t    get_label_font,\n    20\t    get_dropdown_font,\n    21\t    get_button_font,\n    22\t    COMMON_CHANNELS,\n    23\t    ALTERNATIVE_CHANNEL_NAMES\n    24\t)\n    25\t\n    26\t\n    27\tclass SelectionFrame(ctk.CTkFrame):\n    28\t    \"\"\"\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"411025e3-39d2-48a8-9ed1-7435df69610c;toolu_vrtx_015KTSawzc3xWaQDYBKM5dMb":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   561\t        self.start_time_var.set(\"0\")\n   562\t        self.end_time_var.set(\"\")\n   563\t        self.update_plot()\n   564\t\n   565\t    def view_eeg(self):\n   566\t        \"\"\"Open the current EEG file with MNE and display it in a new window.\"\"\"\n   567\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n   568\t            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n   569\t            return\n   570\t\n   571\t        # Find the selected EEG to get its filepath\n   572\t        selected_eeg = None\n   573\t        for eeg in self.eegs:\n   574\t            if eeg['id'] == self.current_eeg_id:\n   575\t                selected_eeg = eeg\n   576\t                break\n   577\t\n   578\t        if not selected_eeg or not selected_eeg.get('filepath'):\n   579\t            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n   580\t            return\n   581\t\n   582\t        eeg_filepath = selected_eeg['filepath']\n   583\t\n   584\t        # Check if the file exists\n   585\t        if not os.path.exists(eeg_filepath):\n   586\t            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n   587\t            return\n   588\t\n   589\t        # Get the current time window\n   590\t        try:\n   591\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   592\t        except ValueError:\n   593\t            start_time = None\n   594\t\n   595\t        try:\n   596\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   597\t        except ValueError:\n   598\t            end_time = None\n   599\t\n   600\t        # Try to load the EEG file with MNE\n   601\t        try:\n   602\t            # Show a loading message\n   603\t            self.loading_window = tk.Toplevel(self)\n   604\t            self.loading_window.title(\"Loading EEG\")\n   605\t            self.loading_window.geometry(\"300x100\")\n   606\t            self.loading_window.transient(self.master)\n   607\t            self.loading_window.grab_set()\n   608\t\n   609\t            loading_label = tk.Label(self.loading_window, text=\"Loading EEG file...\\nThis may take a moment.\")\n   610\t            loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   611\t\n   612\t            self.loading_window.update()\n   613\t\n   614\t            # Load the EEG file\n   615\t            raw = mne.io.read_raw(eeg_filepath, preload=True)\n   616\t\n   617\t            # Close the loading window\n   618\t            self.loading_window.destroy()\n   619\t\n   620\t            # Set the time window if specified\n   621\t            if start_time is not None and end_time is not None:\n   622\t                # Convert from seconds to points if needed\n   623\t                start_idx = max(0, int(start_time * raw.info['sfreq']))\n   624\t                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\n   625\t\n   626\t                # Create a plot with the specified time window\n   627\t                fig = raw.plot(start=start_idx, duration=(end_idx-start_idx)/raw.info['sfreq'],\n   628\t                              scalings='auto', block=False, show=False)\n   629\t\n   630\t                # Set the window title to include the EEG filename\n   631\t                fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   632\t\n   633\t                # Show the plot\n   634\t                fig.show()\n   635\t            else:\n   636\t                # Just show the whole EEG\n   637\t                fig = raw.plot(scalings='auto', block=False, show=False)\n   638\t                fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   639\t                fig.show()\n   640\t\n   641\t        except Exception as e:\n   642\t            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n   643\t            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\n   644\t                self.loading_window.destroy()\n   645\t\n   646\t    def update_plot(self):\n   647\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   648\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   649\t            return\n   650\t\n   651\t        # Get selected channels\n   652\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   653\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"3281a6dd-7e69-49ec-8af3-899287a5a063;toolu_vrtx_011opMEsSVWoiEXrnQXUWhab":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   281\t            font=dropdown_font\n   282\t        )\n   283\t        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n   284\t\n   285\t        # Reset zoom button\n   286\t        self.reset_zoom_button = ctk.CTkButton(\n   287\t            self,\n   288\t            text=\"Reset Zoom\",\n   289\t            command=self.reset_time_window,\n   290\t            height=25,\n   291\t            font=dropdown_font\n   292\t        )\n   293\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   294\t\n   295\t        # Update button - more compact\n   296\t        self.update_button = ctk.CTkButton(\n   297\t            self,\n   298\t            text=\"Update Plot\",\n   299\t            command=self.update_plot,\n   300\t            height=30,\n   301\t            font=get_button_font()\n   302\t        )\n   303\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\"ew\")\n   304\t\n   305\t        # View EEG button\n   306\t        self.view_eeg_button = ctk.CTkButton(\n   307\t            self,\n   308\t            text=\"View EEG\",\n   309\t            command=self.view_eeg,\n   310\t            height=30,\n   311\t            font=get_button_font(),\n   312\t            fg_color=\"#2a6099\"  # Different color to distinguish it\n   313\t        )\n   314\t        self.view_eeg_button.grid(row=8, column=0, columnspan=2, padx=5, pady=(5, 8), sticky=\"ew\")\n   315\t\n   316\t        # Initialize with the first experiment if available\n   317\t        if self.experiments:\n   318\t            self.on_experiment_selected(experiment_names[0])\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"ad19e314-2730-4ddb-8d83-4b73ebde6d17;toolu_vrtx_017UvQFVGLGFCnY4Un7mxwPh":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    43\t\n    44\t        self.db_handler = db_handler\n    45\t        self.plot_frame = plot_frame\n    46\t\n    47\t        # Configure grid layout\n    48\t        self.grid_columnconfigure(0, weight=1)\n    49\t        self.grid_columnconfigure(1, weight=1)\n    50\t        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\n    51\t\n    52\t        # Create fonts\n    53\t        label_font = get_label_font()\n    54\t        dropdown_font = get_dropdown_font()\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"1eea3188-37dd-4c41-aeaa-3c2e8484e88c;toolu_vrtx_01A11bwGqxZ9fGwfzZJqd1Zm":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    23\t    ALTERNATIVE_CHANNEL_NAMES\n    24\t)\n    25\t\n    26\t\n    27\tclass SelectionFrame(ctk.CTkFrame):\n    28\t    \"\"\"\n    29\t    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    30\t    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\n    31\t    \"\"\"\n    32\t\n    33\t    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n    34\t        \"\"\"\n    35\t        Initialize the selection frame.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"741b8e19-2805-48ae-844f-14ffa7eae3a8;toolu_vrtx_01MrX6iEJQB4zw7dAH4G8VMA":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   623\t            loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   624\t\n   625\t            self.loading_window.update()\n   626\t\n   627\t            # Load the EEG file - try different readers based on file extension\n   628\t            file_ext = os.path.splitext(eeg_filepath)[1].lower()\n   629\t\n   630\t            if file_ext == '.edf':\n   631\t                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\n   632\t            elif file_ext == '.bdf':\n   633\t                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\n   634\t            elif file_ext == '.gdf':\n   635\t                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\n   636\t            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\n   637\t                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\n   638\t            elif file_ext == '.cnt':\n   639\t                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\n   640\t            elif file_ext == '.set':\n   641\t                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\n   642\t            else:\n   643\t                # Try the generic reader as a fallback\n   644\t                try:\n   645\t                    raw = mne.io.read_raw(eeg_filepath, preload=True)\n   646\t                except Exception as e:\n   647\t                    raise ValueError(f\"Unsupported file format: {file_ext}. Error: {str(e)}\")\n   648\t\n   649\t            # Close the loading window\n   650\t            self.loading_window.destroy()\n   651\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"draftActiveContextIds":["/home/soenkevl/Documents/EEGAnalyzer/gui/metrics_viewer/selection_frame.py","/gui","/home/soenkevl/Documents/EEGAnalyzerfalsefalse","agentMemories"],"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasDirtyEdits":true},"personaType":0},"39fead9d-0d2a-4bb8-9ebb-222baf09bb25":{"id":"39fead9d-0d2a-4bb8-9ebb-222baf09bb25","createdAtIso":"2025-04-16T19:54:41.590Z","lastInteractedAtIso":"2025-04-16T19:56:59.764Z","chatHistory":[{"request_id":"550b9f09-a094-48e3-86d0-f55662fe3afd","uuid":"04b6f579-13f5-4501-9ef5-b7b19aa65af0","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1744833281591,"seen_state":"seen"},{"status":"success","request_id":"2c9f4fcf-4d70-44a4-bfe2-c5310423c75e","request_message":"make it so that the plot from mne is kept alive in a subprocess instead of blocking the whole application","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"make it so that the plot from mne is kept alive in a subprocess instead of blocking the whole application"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01AMnZNuSNFPQJjvD3VNhHbA","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"gui/metrics_viewer/selection_frame.py\"}"}},{"id":0,"type":0,"content":"I'll help you modify the code to run the MNE plot in a subprocess so it doesn't block the main application. Let me first gather information about the current implementation to understand how the plotting is currently done.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"make it so that the plot from mne is kept alive in a subprocess instead of blocking the whole application"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"I'll help you modify the code to run the MNE plot in a subprocess so it doesn't block the main application. Let me first gather information about the current implementation to understand how the plotting is currently done.\n","workspace_file_chunks":[]},{"status":"success","request_id":"594088a6-3dd2-4508-ab5c-bcf1e62ff125","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01LTpZsxaFGeTMxWr3iSMvAC","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find any existing code in the codebase that uses multiprocessing, subprocess, or threading that might be helpful for running the MNE plot in a separate process.\"}"}},{"id":0,"type":0,"content":"Now I need to understand how the MNE plotting is currently implemented. Let me look at the `view_eeg` method in more detail. I can see that the MNE plot is being called with `block=True` which is causing it to block the main application. I'll need to modify this to run in a subprocess.\n\nLet me also check if there are any imports or utilities I might need to use for implementing the subprocess functionality:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n     1\t\"\"\"\n     2\tSelection frame for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport os\n    10\timport customtkinter as ctk\n    11\timport tkinter as tk\n    12\tfrom tkinter import messagebox\n    13\timport mne\n    14\timport numpy as np\n    15\t\n    16\tfrom .database_handler import DatabaseHandler\n    17\tfrom .plot_frame import MetricsPlotFrame\n    18\tfrom .utils import (\n    19\t    get_label_font,\n    20\t    get_dropdown_font,\n    21\t    get_button_font,\n    22\t    COMMON_CHANNELS,\n    23\t    ALTERNATIVE_CHANNEL_NAMES\n    24\t)\n    25\t\n    26\t\n    27\tclass SelectionFrame(ctk.CTkFrame):\n    28\t    \"\"\"\n    29\t    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    30\t    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\n    31\t    \"\"\"\n    32\t\n    33\t    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n    34\t        \"\"\"\n    35\t        Initialize the selection frame.\n    36\t\n    37\t        Args:\n    38\t            master: The parent widget\n    39\t            db_handler: DatabaseHandler instance for querying the database\n    40\t            plot_frame: MetricsPlotFrame instance for displaying plots\n    41\t            **kwargs: Additional arguments for the CTkFrame constructor\n    42\t        \"\"\"\n    43\t        super().__init__(master, **kwargs)\n    44\t\n    45\t        self.db_handler = db_handler\n    46\t        self.plot_frame = plot_frame\n    47\t\n    48\t        # Configure grid layout\n    49\t        self.grid_columnconfigure(0, weight=1)\n    50\t        self.grid_columnconfigure(1, weight=1)\n    51\t        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\n    52\t\n    53\t        # Create fonts\n    54\t        label_font = get_label_font()\n    55\t        dropdown_font = get_dropdown_font()\n    56\t\n    57\t        # Experiment selection - more compact\n    58\t        self.experiment_label = ctk.CTkLabel(self, text=\"Select Experiment:\", font=label_font)\n    59\t        self.experiment_label.grid(row=0, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    60\t\n    61\t        self.experiments = self.db_handler.get_experiments()\n    62\t        experiment_names = [f\"{exp['name']} ({exp['run_name']})\" for exp in self.experiments]\n    63\t\n    64\t        self.experiment_var = ctk.StringVar(value=experiment_names[0] if experiment_names else \"\")\n    65\t        self.experiment_dropdown = ctk.CTkOptionMenu(\n    66\t            self,\n    67\t            values=experiment_names,\n    68\t            variable=self.experiment_var,\n    69\t            command=self.on_experiment_selected,\n    70\t            height=28,\n    71\t            font=dropdown_font,\n    72\t            dropdown_font=dropdown_font\n    73\t        )\n    74\t        self.experiment_dropdown.grid(row=0, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    75\t\n    76\t        # EEG selection - more compact\n    77\t        self.eeg_label = ctk.CTkLabel(self, text=\"Select EEG:\", font=label_font)\n    78\t        self.eeg_label.grid(row=1, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    79\t\n    80\t        self.eeg_var = ctk.StringVar()\n    81\t        self.eeg_dropdown = ctk.CTkOptionMenu(\n    82\t            self,\n    83\t            values=[],\n    84\t            variable=self.eeg_var,\n    85\t            command=self.on_eeg_selected,\n    86\t            height=28,\n    87\t            font=dropdown_font,\n    88\t            dropdown_font=dropdown_font\n    89\t        )\n    90\t        self.eeg_dropdown.grid(row=1, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    91\t\n    92\t        # Metric selection - more compact\n    93\t        self.metric_label = ctk.CTkLabel(self, text=\"Select Metric:\", font=label_font)\n    94\t        self.metric_label.grid(row=2, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    95\t\n    96\t        self.metric_var = ctk.StringVar()\n    97\t        self.metric_dropdown = ctk.CTkOptionMenu(\n    98\t            self,\n    99\t            values=[],\n   100\t            variable=self.metric_var,\n   101\t            command=self.on_metric_selected,\n   102\t            height=28,\n   103\t            font=dropdown_font,\n   104\t            dropdown_font=dropdown_font\n   105\t        )\n   106\t        self.metric_dropdown.grid(row=2, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   107\t\n   108\t        # Channels selection with more compact layout\n   109\t        self.channels_label = ctk.CTkLabel(self, text=\"Select Channels:\", font=label_font)\n   110\t        self.channels_label.grid(row=3, column=0, padx=5, pady=(8, 0), sticky=\"nw\")\n   111\t\n   112\t        # Create a frame for channel selection buttons - more compact layout\n   113\t        self.channel_buttons_frame = ctk.CTkFrame(self)\n   114\t        self.channel_buttons_frame.grid(row=3, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   115\t        self.channel_buttons_frame.grid_columnconfigure(0, weight=1)\n   116\t        self.channel_buttons_frame.grid_columnconfigure(1, weight=1)\n   117\t        self.channel_buttons_frame.grid_columnconfigure(2, weight=1)\n   118\t\n   119\t        # Add select all and deselect all buttons with smaller font and more compact design\n   120\t        button_font = dropdown_font\n   121\t\n   122\t        self.select_all_button = ctk.CTkButton(\n   123\t            self.channel_buttons_frame,\n   124\t            text=\"Select All\",\n   125\t            command=self.select_all_channels,\n   126\t            height=22,\n   127\t            font=button_font\n   128\t        )\n   129\t        self.select_all_button.grid(row=0, column=0, padx=2, pady=3, sticky=\"ew\")\n   130\t\n   131\t        self.deselect_all_button = ctk.CTkButton(\n   132\t            self.channel_buttons_frame,\n   133\t            text=\"Deselect All\",\n   134\t            command=self.deselect_all_channels,\n   135\t            height=22,\n   136\t            font=button_font\n   137\t        )\n   138\t        self.deselect_all_button.grid(row=0, column=1, padx=2, pady=3, sticky=\"ew\")\n   139\t\n   140\t        # Add select common channels button\n   141\t        self.select_common_button = ctk.CTkButton(\n   142\t            self.channel_buttons_frame,\n   143\t            text=\"Common Channels\",\n   144\t            command=self.select_common_channels,\n   145\t            height=22,\n   146\t            font=button_font\n   147\t        )\n   148\t        self.select_common_button.grid(row=0, column=2, padx=2, pady=3, sticky=\"ew\")\n   149\t\n   150\t        # Create a scrollable frame for channel checkboxes - increased height for better usability\n   151\t        self.channels_frame = ctk.CTkScrollableFrame(self, width=180, height=200)\n   152\t        self.channels_frame.grid(row=4, column=1, padx=5, pady=(0, 8), sticky=\"ew\")\n   153\t\n   154\t        # Bind mouse wheel events to ensure scrolling works properly\n   155\t        self.bind_mouse_wheel(self.channels_frame)\n   156\t\n   157\t        self.channel_vars = {}  # Will hold the checkbox variables\n   158\t\n   159\t        # Aggregation methods frame\n   160\t        self.aggregation_frame = ctk.CTkFrame(self)\n   161\t        self.aggregation_frame.grid(row=5, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   162\t        self.aggregation_frame.grid_columnconfigure(0, weight=1)\n   163\t        self.aggregation_frame.grid_columnconfigure(1, weight=3)\n   164\t        self.aggregation_frame.grid_rowconfigure(0, weight=1)\n   165\t        self.aggregation_frame.grid_rowconfigure(1, weight=1)\n   166\t\n   167\t        # Aggregation label\n   168\t        self.aggregation_label = ctk.CTkLabel(\n   169\t            self.aggregation_frame,\n   170\t            text=\"Aggregation:\",\n   171\t            font=label_font\n   172\t        )\n   173\t        self.aggregation_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   174\t\n   175\t        # Aggregation checkboxes frame\n   176\t        self.aggregation_checkboxes_frame = ctk.CTkFrame(self.aggregation_frame, fg_color=\"transparent\")\n   177\t        self.aggregation_checkboxes_frame.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   178\t        self.aggregation_checkboxes_frame.grid_columnconfigure(0, weight=1)\n   179\t        self.aggregation_checkboxes_frame.grid_columnconfigure(1, weight=1)\n   180\t        self.aggregation_checkboxes_frame.grid_columnconfigure(2, weight=1)\n   181\t\n   182\t        # Aggregation method checkboxes\n   183\t        self.aggregation_vars = {}\n   184\t\n   185\t        # Mean checkbox\n   186\t        self.aggregation_vars['mean'] = ctk.BooleanVar(value=False)\n   187\t        self.mean_checkbox = ctk.CTkCheckBox(\n   188\t            self.aggregation_checkboxes_frame,\n   189\t            text=\"Mean\",\n   190\t            variable=self.aggregation_vars['mean'],\n   191\t            onvalue=True,\n   192\t            offvalue=False,\n   193\t            font=dropdown_font,\n   194\t            checkbox_width=16,\n   195\t            checkbox_height=16\n   196\t        )\n   197\t        self.mean_checkbox.grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n   198\t\n   199\t        # Std checkbox\n   200\t        self.aggregation_vars['std'] = ctk.BooleanVar(value=False)\n   201\t        self.std_checkbox = ctk.CTkCheckBox(\n   202\t            self.aggregation_checkboxes_frame,\n   203\t            text=\"Std Dev\",\n   204\t            variable=self.aggregation_vars['std'],\n   205\t            onvalue=True,\n   206\t            offvalue=False,\n   207\t            font=dropdown_font,\n   208\t            checkbox_width=16,\n   209\t            checkbox_height=16\n   210\t        )\n   211\t        self.std_checkbox.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n   212\t\n   213\t        # Median checkbox\n   214\t        self.aggregation_vars['median'] = ctk.BooleanVar(value=False)\n   215\t        self.median_checkbox = ctk.CTkCheckBox(\n   216\t            self.aggregation_checkboxes_frame,\n   217\t            text=\"Median\",\n   218\t            variable=self.aggregation_vars['median'],\n   219\t            onvalue=True,\n   220\t            offvalue=False,\n   221\t            font=dropdown_font,\n   222\t            checkbox_width=16,\n   223\t            checkbox_height=16\n   224\t        )\n   225\t        self.median_checkbox.grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n   226\t\n   227\t        # Aggregation only checkbox\n   228\t        self.aggregation_only_var = ctk.BooleanVar(value=False)\n   229\t        self.aggregation_only_checkbox = ctk.CTkCheckBox(\n   230\t            self.aggregation_frame,\n   231\t            text=\"Show Aggregation Only\",\n   232\t            variable=self.aggregation_only_var,\n   233\t            onvalue=True,\n   234\t            offvalue=False,\n   235\t            font=dropdown_font,\n   236\t            checkbox_width=16,\n   237\t            checkbox_height=16\n   238\t        )\n   239\t        self.aggregation_only_checkbox.grid(row=1, column=1, padx=5, pady=(0, 2), sticky=\"w\")\n   240\t\n   241\t        # Time window selection frame\n   242\t        self.time_window_frame = ctk.CTkFrame(self)\n   243\t        self.time_window_frame.grid(row=6, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   244\t        self.time_window_frame.grid_columnconfigure(0, weight=1)\n   245\t        self.time_window_frame.grid_columnconfigure(1, weight=1)\n   246\t        self.time_window_frame.grid_columnconfigure(2, weight=1)\n   247\t        self.time_window_frame.grid_columnconfigure(3, weight=1)\n   248\t\n   249\t        # Time window label\n   250\t        self.time_window_label = ctk.CTkLabel(\n   251\t            self.time_window_frame,\n   252\t            text=\"Time Window (s):\",\n   253\t            font=label_font\n   254\t        )\n   255\t        self.time_window_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   256\t\n   257\t        # Start time entry\n   258\t        self.start_time_var = ctk.StringVar(value=\"0\")\n   259\t        self.start_time_entry = ctk.CTkEntry(\n   260\t            self.time_window_frame,\n   261\t            textvariable=self.start_time_var,\n   262\t            width=60,\n   263\t            height=25,\n   264\t            font=dropdown_font\n   265\t        )\n   266\t        self.start_time_entry.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   267\t\n   268\t        # To label\n   269\t        self.to_label = ctk.CTkLabel(\n   270\t            self.time_window_frame,\n   271\t            text=\"to\",\n   272\t            font=label_font\n   273\t        )\n   274\t        self.to_label.grid(row=0, column=2, padx=2, pady=5)\n   275\t\n   276\t        # End time entry\n   277\t        self.end_time_var = ctk.StringVar(value=\"\")\n   278\t        self.end_time_entry = ctk.CTkEntry(\n   279\t            self.time_window_frame,\n   280\t            textvariable=self.end_time_var,\n   281\t            width=60,\n   282\t            height=25,\n   283\t            font=dropdown_font\n   284\t        )\n   285\t        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n   286\t\n   287\t        # Reset zoom button\n   288\t        self.reset_zoom_button = ctk.CTkButton(\n   289\t            self,\n   290\t            text=\"Reset Zoom\",\n   291\t            command=self.reset_time_window,\n   292\t            height=25,\n   293\t            font=dropdown_font\n   294\t        )\n   295\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   296\t\n   297\t        # Update button - more compact\n   298\t        self.update_button = ctk.CTkButton(\n   299\t            self,\n   300\t            text=\"Update Plot\",\n   301\t            command=self.update_plot,\n   302\t            height=30,\n   303\t            font=get_button_font()\n   304\t        )\n   305\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\"ew\")\n   306\t\n   307\t        # View EEG button\n   308\t        self.view_eeg_button = ctk.CTkButton(\n   309\t            self,\n   310\t            text=\"View EEG\",\n   311\t            command=self.view_eeg,\n   312\t            height=30,\n   313\t            font=get_button_font(),\n   314\t            fg_color=\"#2a6099\"  # Different color to distinguish it\n   315\t        )\n   316\t        self.view_eeg_button.grid(row=8, column=0, columnspan=2, padx=5, pady=(5, 8), sticky=\"ew\")\n   317\t\n   318\t        # Initialize with the first experiment if available\n   319\t        if self.experiments:\n   320\t            self.on_experiment_selected(experiment_names[0])\n   321\t\n   322\t    def on_experiment_selected(self, selection: str):\n   323\t        \"\"\"\n   324\t        Handle experiment selection change.\n   325\t\n   326\t        Args:\n   327\t            selection: Selected experiment name\n   328\t        \"\"\"\n   329\t        # Find the selected experiment\n   330\t        selected_exp = None\n   331\t        for exp in self.experiments:\n   332\t            if f\"{exp['name']} ({exp['run_name']})\" == selection:\n   333\t                selected_exp = exp\n   334\t                break\n   335\t\n   336\t        if not selected_exp:\n   337\t            return\n   338\t\n   339\t        # Update EEG dropdown\n   340\t        self.current_experiment_id = selected_exp['id']\n   341\t        eegs = self.db_handler.get_eegs_for_experiment(self.current_experiment_id)\n   342\t        eeg_names = [eeg['filename'] for eeg in eegs]\n   343\t\n   344\t        self.eegs = eegs\n   345\t        self.eeg_dropdown.configure(values=eeg_names)\n   346\t        if eeg_names:\n   347\t            self.eeg_var.set(eeg_names[0])\n   348\t            self.on_eeg_selected(eeg_names[0])\n   349\t        else:\n   350\t            self.eeg_var.set(\"\")\n   351\t            self.clear_metrics()\n   352\t            self.clear_channels()\n   353\t\n   354\t    def on_eeg_selected(self, selection: str):\n   355\t        \"\"\"\n   356\t        Handle EEG selection change.\n   357\t\n   358\t        Args:\n   359\t            selection: Selected EEG name\n   360\t        \"\"\"\n   361\t        # Find the selected EEG\n   362\t        selected_eeg = None\n   363\t        for eeg in self.eegs:\n   364\t            if eeg['filename'] == selection:\n   365\t                selected_eeg = eeg\n   366\t                break\n   367\t\n   368\t        if not selected_eeg:\n   369\t            return\n   370\t\n   371\t        # Update metrics dropdown\n   372\t        self.current_eeg_id = selected_eeg['id']\n   373\t        self.update_metrics_dropdown()\n   374\t        self.update_channels_checkboxes()\n   375\t\n   376\t    def on_metric_selected(self, selection: str):\n   377\t        \"\"\"\n   378\t        Handle metric selection change.\n   379\t\n   380\t        Args:\n   381\t            selection: Selected metric name\n   382\t        \"\"\"\n   383\t        self.current_metric = selection\n   384\t\n   385\t    def update_metrics_dropdown(self):\n   386\t        \"\"\"Update the metrics dropdown based on the selected experiment and EEG.\"\"\"\n   387\t        # Get available metrics\n   388\t        metrics = self.db_handler.get_available_metrics(self.current_experiment_id, self.current_eeg_id)\n   389\t\n   390\t        # Update dropdown\n   391\t        self.metric_dropdown.configure(values=metrics)\n   392\t        if metrics:\n   393\t            self.metric_var.set(metrics[0])\n   394\t            self.current_metric = metrics[0]\n   395\t        else:\n   396\t            self.metric_var.set(\"\")\n   397\t            self.current_metric = None\n   398\t\n   399\t    def update_channels_checkboxes(self):\n   400\t        \"\"\"Update the channel checkboxes based on the selected experiment and EEG.\"\"\"\n   401\t        # Clear existing checkboxes\n   402\t        self.clear_channels()\n   403\t\n   404\t        # Get available channels\n   405\t        self.available_channels = self.db_handler.get_available_channels(self.current_experiment_id, self.current_eeg_id)\n   406\t\n   407\t        # Add a search entry at the top of the channels frame\n   408\t        self.search_var = ctk.StringVar()\n   409\t        self.search_var.trace_add(\"write\", self.filter_channels)\n   410\t\n   411\t        self.search_frame = ctk.CTkFrame(self.channels_frame)\n   412\t        self.search_frame.grid(row=0, column=0, padx=5, pady=5, sticky=\"ew\")\n   413\t        self.search_frame.grid_columnconfigure(0, weight=1)\n   414\t\n   415\t        self.search_entry = ctk.CTkEntry(\n   416\t            self.search_frame,\n   417\t            placeholder_text=\"Search channels...\",\n   418\t            textvariable=self.search_var,\n   419\t            height=25,\n   420\t            font=get_dropdown_font()\n   421\t        )\n   422\t        self.search_entry.grid(row=0, column=0, padx=5, pady=3, sticky=\"ew\")\n   423\t\n   424\t        # Create the channels container frame\n   425\t        self.channels_container = ctk.CTkFrame(self.channels_frame, fg_color=\"transparent\")\n   426\t        self.channels_container.grid(row=1, column=0, padx=5, pady=5, sticky=\"ew\")\n   427\t\n   428\t        # Display all channels initially\n   429\t        self.display_channels(self.available_channels)\n   430\t\n   431\t    def display_channels(self, channels: List[str]):\n   432\t        \"\"\"\n   433\t        Display the given channels as checkboxes.\n   434\t\n   435\t        Args:\n   436\t            channels: List of channel names to display\n   437\t        \"\"\"\n   438\t        # Clear existing checkboxes in the container\n   439\t        for widget in self.channels_container.winfo_children():\n   440\t            widget.destroy()\n   441\t\n   442\t        # Configure the container for proper scrolling\n   443\t        self.channels_container.grid_columnconfigure(0, weight=1)\n   444\t\n   445\t        # Sort channels alphabetically to ensure consistent display\n   446\t        sorted_channels = sorted(channels)\n   447\t\n   448\t        # Create a checkbox for each channel\n   449\t        for i, channel in enumerate(sorted_channels):\n   450\t            var = self.channel_vars.get(channel, ctk.BooleanVar(value=False))\n   451\t            self.channel_vars[channel] = var\n   452\t\n   453\t            # Create more compact checkboxes\n   454\t            checkbox = ctk.CTkCheckBox(\n   455\t                self.channels_container,\n   456\t                text=channel,\n   457\t                variable=var,\n   458\t                onvalue=True,\n   459\t                offvalue=False,\n   460\t                height=20,\n   461\t                font=get_dropdown_font(),\n   462\t                checkbox_width=16,\n   463\t                checkbox_height=16\n   464\t            )\n   465\t            checkbox.grid(row=i, column=0, padx=8, pady=3, sticky=\"w\")\n   466\t\n   467\t            # Bind mouse wheel event to each checkbox for better scrolling\n   468\t            checkbox.bind(\"<MouseWheel>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   469\t            checkbox.bind(\"<Button-4>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   470\t            checkbox.bind(\"<Button-5>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   471\t\n   472\t    def filter_channels(self, *args):\n   473\t        \"\"\"Filter channels based on search text.\"\"\"\n   474\t        search_text = self.search_var.get().lower()\n   475\t\n   476\t        if not search_text:\n   477\t            # If search is empty, show all channels\n   478\t            filtered_channels = self.available_channels\n   479\t        else:\n   480\t            # Filter channels that contain the search text\n   481\t            filtered_channels = [ch for ch in self.available_channels if search_text in ch.lower()]\n   482\t\n   483\t            # Sort the filtered channels alphabetically\n   484\t            filtered_channels.sort()\n   485\t\n   486\t        # Update the displayed channels\n   487\t        self.display_channels(filtered_channels)\n   488\t\n   489\t    def bind_mouse_wheel(self, widget):\n   490\t        \"\"\"\n   491\t        Bind mouse wheel events to the widget for scrolling.\n   492\t\n   493\t        Args:\n   494\t            widget: The widget to bind mouse wheel events to\n   495\t        \"\"\"\n   496\t        # Bind for Windows and Linux (with mouse wheel)\n   497\t        widget.bind_all(\"<MouseWheel>\", lambda event: self._on_mouse_wheel(event, widget))\n   498\t        # Bind for Linux (with touchpad)\n   499\t        widget.bind_all(\"<Button-4>\", lambda event: self._on_mouse_wheel(event, widget))\n   500\t        widget.bind_all(\"<Button-5>\", lambda event: self._on_mouse_wheel(event, widget))\n   501\t\n   502\t    def _on_mouse_wheel(self, event, widget):\n   503\t        \"\"\"\n   504\t        Handle mouse wheel events for scrolling.\n   505\t\n   506\t        Args:\n   507\t            event: The mouse wheel event\n   508\t            widget: The widget to scroll\n   509\t        \"\"\"\n   510\t        # Get the widget under the cursor\n   511\t        x, y = event.x_root, event.y_root\n   512\t        target_widget = event.widget.winfo_containing(x, y)\n   513\t\n   514\t        # Check if the cursor is over our scrollable frame or its children\n   515\t        parent = target_widget\n   516\t        while parent is not None:\n   517\t            if parent == widget or parent == self.channels_container:\n   518\t                break\n   519\t            parent = parent.master\n   520\t\n   521\t        # If cursor is not over our scrollable area, don't scroll\n   522\t        if parent is None:\n   523\t            return\n   524\t\n   525\t        # Handle different event types\n   526\t        if event.num == 4 or event.delta > 0:  # Scroll up\n   527\t            widget._parent_canvas.yview_scroll(-1, \"units\")\n   528\t        elif event.num == 5 or event.delta < 0:  # Scroll down\n   529\t            widget._parent_canvas.yview_scroll(1, \"units\")\n   530\t\n   531\t    def clear_channels(self):\n   532\t        \"\"\"Clear all channel checkboxes and related widgets.\"\"\"\n   533\t        for widget in self.channels_frame.winfo_children():\n   534\t            widget.destroy()\n   535\t\n   536\t        self.channel_vars = {}\n   537\t        self.available_channels = []\n   538\t\n   539\t    def clear_metrics(self):\n   540\t        \"\"\"Clear the metrics dropdown.\"\"\"\n   541\t        self.metric_dropdown.configure(values=[])\n   542\t        self.metric_var.set(\"\")\n   543\t        self.current_metric = None\n   544\t\n   545\t    def select_all_channels(self):\n   546\t        \"\"\"Select all channel checkboxes.\"\"\"\n   547\t        for var in self.channel_vars.values():\n   548\t            var.set(True)\n   549\t\n   550\t    def deselect_all_channels(self):\n   551\t        \"\"\"Deselect all channel checkboxes.\"\"\"\n   552\t        for var in self.channel_vars.values():\n   553\t            var.set(False)\n   554\t\n   555\t    def select_common_channels(self):\n   556\t        \"\"\"Select common EEG channels (10-20 system).\"\"\"\n   557\t        # First deselect all\n   558\t        self.deselect_all_channels()\n   559\t\n   560\t        # Select the channels if they exist in our available channels\n   561\t        for channel in COMMON_CHANNELS:\n   562\t            if channel in self.channel_vars:\n   563\t                self.channel_vars[channel].set(True)\n   564\t            # Try alternative name if the channel doesn't exist\n   565\t            elif channel in ALTERNATIVE_CHANNEL_NAMES and ALTERNATIVE_CHANNEL_NAMES[channel] in self.channel_vars:\n   566\t                self.channel_vars[ALTERNATIVE_CHANNEL_NAMES[channel]].set(True)\n   567\t\n   568\t        # If we have a search filter active, update the display\n   569\t        if hasattr(self, 'search_var'):\n   570\t            self.filter_channels()\n   571\t\n   572\t    def reset_time_window(self):\n   573\t        \"\"\"Reset the time window to show all data.\"\"\"\n   574\t        self.start_time_var.set(\"0\")\n   575\t        self.end_time_var.set(\"\")\n   576\t        self.update_plot()\n   577\t\n   578\t    def view_eeg(self):\n   579\t        \"\"\"Open the current EEG file with MNE and display it in a new window.\"\"\"\n   580\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n   581\t            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n   582\t            return\n   583\t\n   584\t        # Find the selected EEG to get its filepath\n   585\t        selected_eeg = None\n   586\t        for eeg in self.eegs:\n   587\t            if eeg['id'] == self.current_eeg_id:\n   588\t                selected_eeg = eeg\n   589\t                break\n   590\t\n   591\t        if not selected_eeg or not selected_eeg.get('filepath'):\n   592\t            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n   593\t            return\n   594\t\n   595\t        eeg_filepath = selected_eeg['filepath']\n   596\t\n   597\t        # Check if the file exists\n   598\t        if not os.path.exists(eeg_filepath):\n   599\t            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n   600\t            return\n   601\t\n   602\t        # Get the current time window\n   603\t        try:\n   604\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   605\t        except ValueError:\n   606\t            start_time = None\n   607\t\n   608\t        try:\n   609\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   610\t        except ValueError:\n   611\t            end_time = None\n   612\t\n   613\t        # Try to load the EEG file with MNE\n   614\t        try:\n   615\t            # # Show a loading message\n   616\t            # self.loading_window = tk.Toplevel(self)\n   617\t            # self.loading_window.title(\"Loading EEG\")\n   618\t            # self.loading_window.geometry(\"300x100\")\n   619\t            # self.loading_window.transient(self.master)\n   620\t            # self.loading_window.grab_set()\n   621\t            #\n   622\t            # loading_label = tk.Label(self.loading_window, text=\"Loading EEG file...\\nThis may take a moment.\")\n   623\t            # loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   624\t            #\n   625\t            # self.loading_window.update()\n   626\t\n   627\t            # Load the EEG file - try different readers based on file extension\n   628\t            file_ext = os.path.splitext(eeg_filepath)[1].lower()\n   629\t\n   630\t            if file_ext == '.edf':\n   631\t                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\n   632\t            elif file_ext == '.bdf':\n   633\t                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\n   634\t            elif file_ext == '.gdf':\n   635\t                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\n   636\t            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\n   637\t                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\n   638\t            elif file_ext == '.cnt':\n   639\t                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\n   640\t            elif file_ext == '.set':\n   641\t                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\n   642\t            else:\n   643\t                # Try the generic reader as a fallback\n   644\t                try:\n   645\t                    raw = mne.io.read_raw(eeg_filepath, preload=True)\n   646\t                except Exception as e:\n   647\t                    raise ValueError(f\"Unsupported file format: {file_ext}. Error: {str(e)}\")\n   648\t\n   649\t            # Close the loading window\n   650\t            # self.loading_window.destroy()\n   651\t\n   652\t            # Set the time window if specified\n   653\t            if start_time is not None and end_time is not None:\n   654\t                # Convert from seconds to points if needed\n   655\t                start_idx = max(0, int(start_time * raw.info['sfreq']))\n   656\t                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\n   657\t\n   658\t                # Create a plot with the specified time window\n   659\t                raw.plot(start=start_time, duration=(end_idx-start_idx)/raw.info['sfreq'],\n   660\t                              scalings='auto', block=True, show=True)\n   661\t\n   662\t                # # Set the window title to include the EEG filename\n   663\t                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   664\t                #\n   665\t                # # Show the plot\n   666\t                # fig.show()\n   667\t            else:\n   668\t                # Just show the whole EEG\n   669\t                raw.plot(scalings='auto', block=True, show=True)\n   670\t                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   671\t                # fig.show()\n   672\t\n   673\t        except Exception as e:\n   674\t            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n   675\t            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\n   676\t                self.loading_window.destroy()\n   677\t\n   678\t    def update_plot(self):\n   679\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   680\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   681\t            return\n   682\t\n   683\t        # Get selected channels\n   684\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   685\t\n   686\t        # Get selected aggregation methods\n   687\t        selected_aggregations = [agg for agg, var in self.aggregation_vars.items() if var.get()]\n   688\t\n   689\t        # Check if we should show only aggregations\n   690\t        aggregation_only = self.aggregation_only_var.get()\n   691\t\n   692\t        # Check if we have valid selections\n   693\t        if (not selected_channels and not selected_aggregations) or \\\n   694\t           (aggregation_only and not selected_aggregations):\n   695\t            self.plot_frame.update_plot(None, None, None, \"No channels or aggregations selected\")\n   696\t            return\n   697\t\n   698\t        # Get data for the selected experiment and EEG\n   699\t        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n   700\t\n   701\t        if df.empty:\n   702\t            self.plot_frame.update_plot(None, None, None, \"No data available\")\n   703\t            return\n   704\t\n   705\t        # Get time window values\n   706\t        try:\n   707\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   708\t        except ValueError:\n   709\t            start_time = None\n   710\t            self.start_time_var.set(\"0\")\n   711\t\n   712\t        try:\n   713\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   714\t        except ValueError:\n   715\t            end_time = None\n   716\t            self.end_time_var.set(\"\")\n   717\t\n   718\t        # Update the plot\n   719\t        experiment_name = next((exp['name'] for exp in self.experiments if exp['id'] == self.current_experiment_id), \"\")\n   720\t        eeg_name = next((eeg['filename'] for eeg in self.eegs if eeg['id'] == self.current_eeg_id), \"\")\n   721\t\n   722\t        title = f\"{self.current_metric} for {experiment_name} - {eeg_name}\"\n   723\t\n   724\t        # Add aggregation-only info to title if specified\n   725\t        if aggregation_only and selected_aggregations:\n   726\t            title += \" (Aggregation Only)\"\n   727\t\n   728\t        # Add time window info to title if specified\n   729\t        if start_time is not None and end_time is not None:\n   730\t            title += f\" (Time: {start_time}s to {end_time}s)\"\n   731\t        elif start_time is not None:\n   732\t            title += f\" (Time: {start_time}s+)\"\n   733\t\n   734\t        self.plot_frame.update_plot(\n   735\t            df,\n   736\t            self.current_metric,\n   737\t            selected_channels,\n   738\t            title,\n   739\t            time_window=(start_time, end_time),\n   740\t            aggregations=selected_aggregations,\n   741\t            aggregation_only=aggregation_only\n   742\t        )\n   743\t\nTotal lines in file: 743\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01AMnZNuSNFPQJjvD3VNhHbA"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now I need to understand how the MNE plotting is currently implemented. Let me look at the `view_eeg` method in more detail. I can see that the MNE plot is being called with `block=True` which is causing it to block the main application. I'll need to modify this to run in a subprocess.\n\nLet me also check if there are any imports or utilities I might need to use for implementing the subprocess functionality:\n","workspace_file_chunks":[]},{"status":"success","request_id":"bb616b79-1e15-4be7-8f3d-5d0f258f61b4","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_0165LoNwt821DBjuy81HZSDd","tool_name":"save-file","input_json":"{\"file_path\": \"gui/metrics_viewer/mne_plot_helper.py\", \"file_content\": \"#!/usr/bin/env python3\\n\\\"\\\"\\\"\\nHelper script to display MNE plots in a separate process.\\n\\nThis script is called by the main application to display MNE plots without blocking\\nthe main application thread.\\n\\\"\\\"\\\"\\n\\nimport sys\\nimport os\\nimport mne\\nimport argparse\\n\\n\\ndef main():\\n    \\\"\\\"\\\"Parse arguments and display the MNE plot.\\\"\\\"\\\"\\n    parser = argparse.ArgumentParser(description='Display MNE plot in a separate process')\\n    parser.add_argument('--filepath', type=str, required=True, help='Path to the EEG file')\\n    parser.add_argument('--start-time', type=float, help='Start time in seconds')\\n    parser.add_argument('--end-time', type=float, help='End time in seconds')\\n    parser.add_argument('--title', type=str, help='Window title')\\n\\n    args = parser.parse_args()\\n\\n    # Check if the file exists\\n    if not os.path.exists(args.filepath):\\n        print(f\\\"Error: File not found at {args.filepath}\\\", file=sys.stderr)\\n        return 1\\n\\n    try:\\n        # Load the EEG file based on file extension\\n        file_ext = os.path.splitext(args.filepath)[1].lower()\\n\\n        if file_ext == '.edf':\\n            raw = mne.io.read_raw_edf(args.filepath, preload=True)\\n        elif file_ext == '.bdf':\\n            raw = mne.io.read_raw_bdf(args.filepath, preload=True)\\n        elif file_ext == '.gdf':\\n            raw = mne.io.read_raw_gdf(args.filepath, preload=True)\\n        elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\\n            raw = mne.io.read_raw_brainvision(args.filepath, preload=True)\\n        elif file_ext == '.cnt':\\n            raw = mne.io.read_raw_cnt(args.filepath, preload=True)\\n        elif file_ext == '.set':\\n            raw = mne.io.read_raw_eeglab(args.filepath, preload=True)\\n        else:\\n            # Try the generic reader as a fallback\\n            try:\\n                raw = mne.io.read_raw(args.filepath, preload=True)\\n            except Exception as e:\\n                print(f\\\"Unsupported file format: {file_ext}. Error: {str(e)}\\\", file=sys.stderr)\\n                return 1\\n\\n        # Set the time window if specified\\n        if args.start_time is not None and args.end_time is not None:\\n            # Convert from seconds to points if needed\\n            start_idx = max(0, int(args.start_time * raw.info['sfreq']))\\n            end_idx = min(len(raw.times), int(args.end_time * raw.info['sfreq']))\\n            duration = (end_idx - start_idx) / raw.info['sfreq']\\n\\n            # Create a plot with the specified time window\\n            fig = raw.plot(start=args.start_time, duration=duration,\\n                          scalings='auto', block=True, show=True)\\n        else:\\n            # Just show the whole EEG\\n            fig = raw.plot(scalings='auto', block=True, show=True)\\n\\n        # Set the window title if provided\\n        if args.title and hasattr(fig, 'canvas') and hasattr(fig.canvas, 'manager'):\\n            fig.canvas.manager.set_window_title(args.title)\\n\\n        return 0\\n\\n    except Exception as e:\\n        print(f\\\"Error displaying MNE plot: {str(e)}\\\", file=sys.stderr)\\n        return 1\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    sys.exit(main())\"}"}},{"id":0,"type":0,"content":"I don't see any existing code in the codebase that uses multiprocessing or subprocess for running processes in the background. Let me create a solution to run the MNE plot in a subprocess.\n\nHere's my plan:\n\n1. Create a helper script that will be run as a subprocess to display the MNE plot\n2. Modify the `view_eeg` method to launch this script as a subprocess instead of running the MNE plot directly\n\nLet's start by creating the helper script:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: gui/metrics_viewer/selection_frame.py\n\"\"\"\nSelection frame for the EEG Metrics Viewer.\n\nThis module provides the SelectionFrame class for selecting experiments, EEGs,\nmetrics, channels, and other visualization options.\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Optional, Any, Callable\nimport os\nimport customtkinter as ctk\nimport tkinter as tk\nfrom tkinter import messagebox\nimport mne\nimport numpy as np\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .utils import (\n    get_label_font,\n    get_dropdown_font,\n    get_button_font,\n    COMMON_CHANNELS,\n    ALTERNATIVE_CHANNEL_NAMES\n)\n\n\nclass SelectionFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\n    \"\"\"\n\n    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n        \"\"\"\n        Initialize the selection frame.\n\n        Args:\n            master: The parent widget\n            db_handler: DatabaseHandler instance for querying the database\n            plot_frame: MetricsPlotFrame instance for displaying plots\n            **kwargs: Additional arguments for the CTkFrame constructor\n        \"\"\"\n        super().__init__(master, **kwargs)\n\n        self.db_handler = db_handler\n        self.plot_frame = plot_frame\n\n        # Configure grid layout\n        self.grid_columnconfigure(0, weight=1)\n        self.grid_columnconfigure(1, weight=1)\n        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\n\n        # Create fonts\n        label_font = get_label_font()\n        dropdown_font = get_dropdown_font()\n\n        # Experiment selection - more compact\n        self.experiment_label = ctk.CTkLabel(self, text=\"Select Experiment:\", font=label_font)\n        self.experiment_label.grid(row=0, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n\n        self.experiments = self.db_handler.get_experiments()\n        experiment_names = [f\"{exp['name']} ({exp['run_name']})\" for exp in self.experiments]\n\n        self.experiment_var = ctk.StringVar(value=experiment_names[0] if experiment_names else \"\")\n        self.experiment_dropdown = ctk.CTkOptionMenu(\n            self,\n            values=experiment_names,\n            variable=self.experiment_var,\n            command=self.on_experiment_selected,\n            height=28,\n            font=dropdown_font,\n            dropdown_font=dropdown_font\n        )\n...\n        self.deselect_all_button.grid(row=0, column=1, padx=2, pady=3, sticky=\"ew\")\n\n        # Add select common channels button\n        self.select_common_button = ctk.CTkButton(\n            self.channel_buttons_frame,\n            text=\"Common Channels\",\n            command=self.select_common_channels,\n            height=22,\n            font=button_font\n        )\n        self.select_common_button.grid(row=0, column=2, padx=2, pady=3, sticky=\"ew\")\n\n        # Create a scrollable frame for channel checkboxes - increased height for better usability\n        self.channels_frame = ctk.CTkScrollableFrame(self, width=180, height=200)\n        self.channels_frame.grid(row=4, column=1, padx=5, pady=(0, 8), sticky=\"ew\")\n\n        # Bind mouse wheel events to ensure scrolling works properly\n        self.bind_mouse_wheel(self.channels_frame)\n\n        self.channel_vars = {}  # Will hold the checkbox variables\n...\n        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n\n        # Reset zoom button\n        self.reset_zoom_button = ctk.CTkButton(\n            self,\n            text=\"Reset Zoom\",\n            command=self.reset_time_window,\n            height=25,\n            font=dropdown_font\n        )\n        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n\n        # Update button - more compact\n        self.update_button = ctk.CTkButton(\n            self,\n            text=\"Update Plot\",\n            command=self.update_plot,\n            height=30,\n            font=get_button_font()\n        )\n        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\"ew\")\n\n        # View EEG button\n        self.view_eeg_button = ctk.CTkButton(\n            self,\n            text=\"View EEG\",\n            command=self.view_eeg,\n            height=30,\n            font=get_button_font(),\n            fg_color=\"#2a6099\"  # Different color to distinguish it\n        )\n...\n\n    def on_experiment_selected(self, selection: str):\n        \"\"\"\n        Handle experiment selection change.\n\n        Args:\n            selection: Selected experiment name\n        \"\"\"\n        # Find the selected experiment\n        selected_exp = None\n        for exp in self.experiments:\n            if f\"{exp['name']} ({exp['run_name']})\" == selection:\n                selected_exp = exp\n                break\n\n        if not selected_exp:\n            return\n\n        # Update EEG dropdown\n        self.current_experiment_id = selected_exp['id']\n        eegs = self.db_handler.get_eegs_for_experiment(self.current_experiment_id)\n        eeg_names = [eeg['filename'] for eeg in eegs]\n\n        self.eegs = eegs\n        self.eeg_dropdown.configure(values=eeg_names)\n        if eeg_names:\n            self.eeg_var.set(eeg_names[0])\n            self.on_eeg_selected(eeg_names[0])\n        else:\n            self.eeg_var.set(\"\")\n            self.clear_metrics()\n            self.clear_channels()\n...\n\n    def update_channels_checkboxes(self):\n        \"\"\"Update the channel checkboxes based on the selected experiment and EEG.\"\"\"\n        # Clear existing checkboxes\n        self.clear_channels()\n\n        # Get available channels\n        self.available_channels = self.db_handler.get_available_channels(self.current_experiment_id, self.current_eeg_id)\n\n        # Add a search entry at the top of the channels frame\n        self.search_var = ctk.StringVar()\n        self.search_var.trace_add(\"write\", self.filter_channels)\n\n        self.search_frame = ctk.CTkFrame(self.channels_frame)\n        self.search_frame.grid(row=0, column=0, padx=5, pady=5, sticky=\"ew\")\n        self.search_frame.grid_columnconfigure(0, weight=1)\n\n        self.search_entry = ctk.CTkEntry(\n            self.search_frame,\n            placeholder_text=\"Search channels...\",\n            textvariable=self.search_var,\n            height=25,\n            font=get_dropdown_font()\n        )\n        self.search_entry.grid(row=0, column=0, padx=5, pady=3, sticky=\"ew\")\n\n        # Create the channels container frame\n        self.channels_container = ctk.CTkFrame(self.channels_frame, fg_color=\"transparent\")\n        self.channels_container.grid(row=1, column=0, padx=5, pady=5, sticky=\"ew\")\n\n        # Display all channels initially\n        self.display_channels(self.available_channels)\n...\n\n        # Create a checkbox for each channel\n        for i, channel in enumerate(sorted_channels):\n            var = self.channel_vars.get(channel, ctk.BooleanVar(value=False))\n            self.channel_vars[channel] = var\n\n            # Create more compact checkboxes\n            checkbox = ctk.CTkCheckBox(\n                self.channels_container,\n                text=channel,\n                variable=var,\n                onvalue=True,\n                offvalue=False,\n                height=20,\n                font=get_dropdown_font(),\n                checkbox_width=16,\n                checkbox_height=16\n            )\n            checkbox.grid(row=i, column=0, padx=8, pady=3, sticky=\"w\")\n\n            # Bind mouse wheel event to each checkbox for better scrolling\n            checkbox.bind(\"<MouseWheel>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n            checkbox.bind(\"<Button-4>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n            checkbox.bind(\"<Button-5>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n\n    def filter_channels(self, *args):\n        \"\"\"Filter channels based on search text.\"\"\"\n        search_text = self.search_var.get().lower()\n\n        if not search_text:\n            # If search is empty, show all channels\n            filtered_channels = self.available_channels\n        else:\n            # Filter channels that contain the search text\n            filtered_channels = [ch for ch in self.available_channels if search_text in ch.lower()]\n\n            # Sort the filtered channels alphabetically\n            filtered_channels.sort()\n\n        # Update the displayed channels\n        self.display_channels(filtered_channels)\n\n    def bind_mouse_wheel(self, widget):\n        \"\"\"\n        Bind mouse wheel events to the widget for scrolling.\n\n        Args:\n            widget: The widget to bind mouse wheel events to\n        \"\"\"\n        # Bind for Windows and Linux (with mouse wheel)\n        widget.bind_all(\"<MouseWheel>\", lambda event: self._on_mouse_wheel(event, widget))\n        # Bind for Linux (with touchpad)\n        widget.bind_all(\"<Button-4>\", lambda event: self._on_mouse_wheel(event, widget))\n        widget.bind_all(\"<Button-5>\", lambda event: self._on_mouse_wheel(event, widget))\n\n    def _on_mouse_wheel(self, event, widget):\n        \"\"\"\n        Handle mouse wheel events for scrolling.\n\n        Args:\n            event: The mouse wheel event\n            widget: The widget to scroll\n        \"\"\"\n        # Get the widget under the cursor\n        x, y = event.x_root, event.y_root\n        target_widget = event.widget.winfo_containing(x, y)\n\n        # Check if the cursor is over our scrollable frame or its children\n        parent = target_widget\n        while parent is not None:\n            if parent == widget or parent == self.channels_container:\n                break\n            parent = parent.master\n\n        # If cursor is not over our scrollable area, don't scroll\n        if parent is None:\n            return\n...\n\n    def deselect_all_channels(self):\n        \"\"\"Deselect all channel checkboxes.\"\"\"\n        for var in self.channel_vars.values():\n            var.set(False)\n\n    def select_common_channels(self):\n        \"\"\"Select common EEG channels (10-20 system).\"\"\"\n        # First deselect all\n        self.deselect_all_channels()\n\n        # Select the channels if they exist in our available channels\n        for channel in COMMON_CHANNELS:\n            if channel in self.channel_vars:\n                self.channel_vars[channel].set(True)\n            # Try alternative name if the channel doesn't exist\n            elif channel in ALTERNATIVE_CHANNEL_NAMES and ALTERNATIVE_CHANNEL_NAMES[channel] in self.channel_vars:\n                self.channel_vars[ALTERNATIVE_CHANNEL_NAMES[channel]].set(True)\n\n        # If we have a search filter active, update the display\n        if hasattr(self, 'search_var'):\n            self.filter_channels()\n...\n\n    def view_eeg(self):\n        \"\"\"Open the current EEG file with MNE and display it in a new window.\"\"\"\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n            return\n\n        # Find the selected EEG to get its filepath\n        selected_eeg = None\n        for eeg in self.eegs:\n            if eeg['id'] == self.current_eeg_id:\n                selected_eeg = eeg\n                break\n\n        if not selected_eeg or not selected_eeg.get('filepath'):\n            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n            return\n\n        eeg_filepath = selected_eeg['filepath']\n\n        # Check if the file exists\n        if not os.path.exists(eeg_filepath):\n            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n            return\n...\n\n        # Try to load the EEG file with MNE\n        try:\n            # # Show a loading message\n            # self.loading_window = tk.Toplevel(self)\n            # self.loading_window.title(\"Loading EEG\")\n            # self.loading_window.geometry(\"300x100\")\n            # self.loading_window.transient(self.master)\n            # self.loading_window.grab_set()\n            #\n            # loading_label = tk.Label(self.loading_window, text=\"Loading EEG file...\\nThis may take a moment.\")\n            # loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n            #\n            # self.loading_window.update()\n\n            # Load the EEG file - try different readers based on file extension\n            file_ext = os.path.splitext(eeg_filepath)[1].lower()\n\n            if file_ext == '.edf':\n                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\n            elif file_ext == '.bdf':\n                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\n            elif file_ext == '.gdf':\n                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\n            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\n                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\n            elif file_ext == '.cnt':\n                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\n            elif file_ext == '.set':\n                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\n            else:\n                # Try the generic reader as a fallback\n                try:\n                    raw = mne.io.read_raw(eeg_filepath, preload=True)\n                except Exception as e:\n                    raise ValueError(f\"Unsupported file format: {file_ext}. Error: {str(e)}\")\n\n            # Close the loading window\n            # self.loading_window.destroy()\n\n            # Set the time window if specified\n            if start_time is not None and end_time is not None:\n                # Convert from seconds to points if needed\n                start_idx = max(0, int(start_time * raw.info['sfreq']))\n                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\n\n                # Create a plot with the specified time window\n                raw.plot(start=start_time, duration=(end_idx-start_idx)/raw.info['sfreq'],\n                              scalings='auto', block=True, show=True)\n\n                # # Set the window title to include the EEG filename\n                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n                #\n                # # Show the plot\n                # fig.show()\n            else:\n                # Just show the whole EEG\n                raw.plot(scalings='auto', block=True, show=True)\n                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n                # fig.show()\n\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\n                self.loading_window.destroy()\n\n    def update_plot(self):\n        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n            return\n...\n\n        # Get data for the selected experiment and EEG\n        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n\n        if df.empty:\n            self.plot_frame.update_plot(None, None, None, \"No data available\")\n            return\n\n        # Get time window values\n        try:\n            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n        except ValueError:\n            start_time = None\n            self.start_time_var.set(\"0\")\n\n        try:\n            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n        except ValueError:\n            end_time = None\n            self.end_time_var.set(\"\")\n...\n\n        self.plot_frame.update_plot(\n            df,\n            self.current_metric,\n            selected_channels,\n            title,\n            time_window=(start_time, end_time),\n            aggregations=selected_aggregations,\n            aggregation_only=aggregation_only\n        )\n...\nPath: gui/run_metrics_viewer.py\n#!/usr/bin/env python3\n\"\"\"\nRun script for the EEG Metrics Viewer.\n\nThis script provides a simple way to launch the EEG Metrics Viewer application\nwith a specified database path.\n\nUsage:\n    python run_metrics_viewer.py [path_to_database]\n\nIf no database path is provided, the script will look for the default database\nat \"../example/EEGAnalyzer.sqlite\".\n\"\"\"\n\nimport os\nimport sys\nimport importlib.util\n\ndef check_dependencies():\n    \"\"\"Check if all required dependencies are installed.\"\"\"\n    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\", \"mne\"]\n    missing_packages = []\n\n    for package in required_packages:\n        if importlib.util.find_spec(package) is None:\n            missing_packages.append(package)\n\n    if missing_packages:\n        print(\"The following required packages are missing:\")\n        for package in missing_packages:\n            print(f\"  - {package}\")\n        print(\"\\nPlease install them using:\")\n        print(\"  python install_dependencies.py\")\n        print(\"or\")\n        print(f\"  pip install {' '.join(missing_packages)}\")\n        return False\n\n    return True\n\ndef main():\n    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    # Check dependencies first\n    if not check_dependencies():\n        sys.exit(1)\n\n    # Import App only after checking dependencies\n    from metrics_viewer import App\n\n    # Check if a database path is provided as a command-line argument\n    if len(sys.argv) > 1:\n        db_path = sys.argv[1]\n    else:\n        # Default database path\n        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                              \"example\", \"EEGAnalyzer.sqlite\")\n\n    # Ensure the database file exists\n    if not os.path.exists(db_path):\n        print(f\"Error: Database file not found at {db_path}\")\n        print(\"Please provide a valid path to the EEGAnalyzer.sqlite database.\")\n        sys.exit(1)\n\n    print(f\"Starting EEG Metrics Viewer with database: {db_path}\")\n\n    # Start the application\n    app = App(db_path)\n    app.mainloop()\n\nif __name__ == \"__main__\":\n    main()\n...\nPath: gui/install_dependencies.py\n#!/usr/bin/env python3\n\"\"\"\nScript to install the required dependencies for the EEG Metrics Viewer.\n\nThis script checks if the required packages are installed and installs them if needed.\n\"\"\"\n\nimport sys\nimport subprocess\nimport importlib.util\n\ndef check_package(package_name):\n    \"\"\"Check if a package is installed.\"\"\"\n    return importlib.util.find_spec(package_name) is not None\n\ndef install_package(package_name):\n    \"\"\"Install a package using pip.\"\"\"\n    print(f\"Installing {package_name}...\")\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package_name])\n    print(f\"{package_name} installed successfully.\")\n\ndef main():\n    \"\"\"Check and install required packages.\"\"\"\n    required_packages = [\n        \"customtkinter\",\n        \"matplotlib\",\n        \"numpy\",\n        \"pandas\",\n        \"sqlalchemy\",\n        \"mne\"\n    ]\n\n    missing_packages = []\n\n    # Check which packages are missing\n    for package in required_packages:\n        if not check_package(package):\n            missing_packages.append(package)\n\n    # Install missing packages\n    if missing_packages:\n        print(f\"The following packages need to be installed: {', '.join(missing_packages)}\")\n        try:\n            for package in missing_packages:\n                install_package(package)\n            print(\"All required packages have been installed.\")\n        except Exception as e:\n            print(f\"Error installing packages: {e}\")\n            print(\"Please install the required packages manually:\")\n            for package in missing_packages:\n                print(f\"  pip install {package}\")\n       ...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01LTpZsxaFGeTMxWr3iSMvAC"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"I don't see any existing code in the codebase that uses multiprocessing or subprocess for running processes in the background. Let me create a solution to run the MNE plot in a subprocess.\n\nHere's my plan:\n\n1. Create a helper script that will be run as a subprocess to display the MNE plot\n2. Modify the `view_eeg` method to launch this script as a subprocess instead of running the MNE plot directly\n\nLet's start by creating the helper script:\n","workspace_file_chunks":[]},{"status":"success","request_id":"0eef779e-ee08-442a-9676-0364203da09f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_012HBKJoyWAE9LwMSUYR6dQK","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"gui/metrics_viewer/selection_frame.py\", \"str_replace_entries\": [{\"old_str\": \"from typing import List, Dict, Tuple, Optional, Any, Callable\\nimport os\\nimport customtkinter as ctk\\nimport tkinter as tk\\nfrom tkinter import messagebox\\nimport mne\\nimport numpy as np\", \"new_str\": \"from typing import List, Dict, Tuple, Optional, Any, Callable\\nimport os\\nimport sys\\nimport subprocess\\nimport customtkinter as ctk\\nimport tkinter as tk\\nfrom tkinter import messagebox\\nimport mne\\nimport numpy as np\", \"old_str_start_line_number\": 8, \"old_str_end_line_number\": 14}, {\"old_str\": \"    def view_eeg(self):\\n        \\\"\\\"\\\"Open the current EEG file with MNE and display it in a new window.\\\"\\\"\\\"\\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\\n            messagebox.showinfo(\\\"No EEG Selected\\\", \\\"Please select an experiment and EEG file first.\\\")\\n            return\\n\\n        # Find the selected EEG to get its filepath\\n        selected_eeg = None\\n        for eeg in self.eegs:\\n            if eeg['id'] == self.current_eeg_id:\\n                selected_eeg = eeg\\n                break\\n\\n        if not selected_eeg or not selected_eeg.get('filepath'):\\n            messagebox.showerror(\\\"Error\\\", \\\"Could not find the EEG file path.\\\")\\n            return\\n\\n        eeg_filepath = selected_eeg['filepath']\\n\\n        # Check if the file exists\\n        if not os.path.exists(eeg_filepath):\\n            messagebox.showerror(\\\"File Not Found\\\", f\\\"The EEG file was not found at:\\\\n{eeg_filepath}\\\")\\n            return\\n\\n        # Get the current time window\\n        try:\\n            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\\n        except ValueError:\\n            start_time = None\\n\\n        try:\\n            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\\n        except ValueError:\\n            end_time = None\\n\\n        # Try to load the EEG file with MNE\\n        try:\\n            # # Show a loading message\\n            # self.loading_window = tk.Toplevel(self)\\n            # self.loading_window.title(\\\"Loading EEG\\\")\\n            # self.loading_window.geometry(\\\"300x100\\\")\\n            # self.loading_window.transient(self.master)\\n            # self.loading_window.grab_set()\\n            #\\n            # loading_label = tk.Label(self.loading_window, text=\\\"Loading EEG file...\\\\nThis may take a moment.\\\")\\n            # loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\\n            #\\n            # self.loading_window.update()\\n\\n            # Load the EEG file - try different readers based on file extension\\n            file_ext = os.path.splitext(eeg_filepath)[1].lower()\\n\\n            if file_ext == '.edf':\\n                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\\n            elif file_ext == '.bdf':\\n                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\\n            elif file_ext == '.gdf':\\n                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\\n            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\\n                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\\n            elif file_ext == '.cnt':\\n                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\\n            elif file_ext == '.set':\\n                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\\n            else:\\n                # Try the generic reader as a fallback\\n                try:\\n                    raw = mne.io.read_raw(eeg_filepath, preload=True)\\n                except Exception as e:\\n                    raise ValueError(f\\\"Unsupported file format: {file_ext}. Error: {str(e)}\\\")\\n\\n            # Close the loading window\\n            # self.loading_window.destroy()\\n\\n            # Set the time window if specified\\n            if start_time is not None and end_time is not None:\\n                # Convert from seconds to points if needed\\n                start_idx = max(0, int(start_time * raw.info['sfreq']))\\n                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\\n\\n                # Create a plot with the specified time window\\n                raw.plot(start=start_time, duration=(end_idx-start_idx)/raw.info['sfreq'],\\n                              scalings='auto', block=True, show=True)\\n\\n                # # Set the window title to include the EEG filename\\n                # fig.canvas.manager.set_window_title(f\\\"MNE EEG Viewer - {selected_eeg['filename']}\\\")\\n                #\\n                # # Show the plot\\n                # fig.show()\\n            else:\\n                # Just show the whole EEG\\n                raw.plot(scalings='auto', block=True, show=True)\\n                # fig.canvas.manager.set_window_title(f\\\"MNE EEG Viewer - {selected_eeg['filename']}\\\")\\n                # fig.show()\\n\\n        except Exception as e:\\n            messagebox.showerror(\\\"Error\\\", f\\\"Failed to open the EEG file with MNE:\\\\n{str(e)}\\\")\\n            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\\n                self.loading_window.destroy()\", \"new_str\": \"    def view_eeg(self):\\n        \\\"\\\"\\\"Open the current EEG file with MNE and display it in a new window using a subprocess.\\\"\\\"\\\"\\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\\n            messagebox.showinfo(\\\"No EEG Selected\\\", \\\"Please select an experiment and EEG file first.\\\")\\n            return\\n\\n        # Find the selected EEG to get its filepath\\n        selected_eeg = None\\n        for eeg in self.eegs:\\n            if eeg['id'] == self.current_eeg_id:\\n                selected_eeg = eeg\\n                break\\n\\n        if not selected_eeg or not selected_eeg.get('filepath'):\\n            messagebox.showerror(\\\"Error\\\", \\\"Could not find the EEG file path.\\\")\\n            return\\n\\n        eeg_filepath = selected_eeg['filepath']\\n\\n        # Check if the file exists\\n        if not os.path.exists(eeg_filepath):\\n            messagebox.showerror(\\\"File Not Found\\\", f\\\"The EEG file was not found at:\\\\n{eeg_filepath}\\\")\\n            return\\n\\n        # Get the current time window\\n        try:\\n            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\\n        except ValueError:\\n            start_time = None\\n\\n        try:\\n            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\\n        except ValueError:\\n            end_time = None\\n\\n        # Show a loading message\\n        loading_window = tk.Toplevel(self)\\n        loading_window.title(\\\"Loading EEG\\\")\\n        loading_window.geometry(\\\"300x100\\\")\\n        loading_window.transient(self.master)\\n        loading_window.grab_set()\\n\\n        loading_label = tk.Label(loading_window, text=\\\"Starting MNE viewer...\\\\nThis may take a moment.\\\")\\n        loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\\n        loading_window.update()\\n\\n        try:\\n            # Get the path to the helper script\\n            helper_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \\\"mne_plot_helper.py\\\")\\n            \\n            # Make sure the helper script is executable\\n            if not os.access(helper_script_path, os.X_OK) and sys.platform != 'win32':\\n                os.chmod(helper_script_path, 0o755)\\n            \\n            # Build the command to run the helper script\\n            cmd = [sys.executable, helper_script_path, \\\"--filepath\\\", eeg_filepath]\\n            \\n            # Add time window parameters if specified\\n            if start_time is not None:\\n                cmd.extend([\\\"--start-time\\\", str(start_time)])\\n            if end_time is not None:\\n                cmd.extend([\\\"--end-time\\\", str(end_time)])\\n                \\n            # Add title\\n            window_title = f\\\"MNE EEG Viewer - {selected_eeg['filename']}\\\"\\n            cmd.extend([\\\"--title\\\", window_title])\\n            \\n            # Launch the subprocess\\n            subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\\n            \\n            # Close the loading window after a short delay\\n            self.after(1000, loading_window.destroy)\\n            \\n        except Exception as e:\\n            loading_window.destroy()\\n            messagebox.showerror(\\\"Error\\\", f\\\"Failed to open the EEG file with MNE:\\\\n{str(e)}\\\")\", \"old_str_start_line_number\": 578, \"old_str_end_line_number\": 676}]}"}},{"id":0,"type":0,"content":"Now, let's modify the `view_eeg` method in `selection_frame.py` to use this helper script:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"File saved successfully.","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_0165LoNwt821DBjuy81HZSDd"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now, let's modify the `view_eeg` method in `selection_frame.py` to use this helper script:\n","workspace_file_chunks":[]},{"status":"success","request_id":"8d1dc34a-ce50-414e-8b37-9ea5a5b52d56","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01RYwc8vym2vqowZhiirShMF","tool_name":"launch-process","input_json":"{\"command\": \"cd /home/soenkevl/Documents/EEGAnalyzer && python -m gui.run_metrics_viewer\", \"wait\": false, \"max_wait_seconds\": 10}"}},{"id":0,"type":0,"content":"Now let's test our implementation to make sure it works correctly:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport os\n    10\timport sys\n    11\timport subprocess\n    12\timport customtkinter as ctk\n    13\timport tkinter as tk\n    14\tfrom tkinter import messagebox\n    15\timport mne\n    16\timport numpy as np\n    17\t\n    18\tfrom .database_handler import DatabaseHandler\n    19\tfrom .plot_frame import MetricsPlotFrame\n    20\tfrom .utils import (\n\nResult for str_replace_entries[1]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   576\t        self.start_time_var.set(\"0\")\n   577\t        self.end_time_var.set(\"\")\n   578\t        self.update_plot()\n   579\t\n   580\t    def view_eeg(self):\n   581\t        \"\"\"Open the current EEG file with MNE and display it in a new window using a subprocess.\"\"\"\n   582\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n   583\t            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n   584\t            return\n   585\t\n   586\t        # Find the selected EEG to get its filepath\n   587\t        selected_eeg = None\n   588\t        for eeg in self.eegs:\n   589\t            if eeg['id'] == self.current_eeg_id:\n   590\t                selected_eeg = eeg\n   591\t                break\n   592\t\n   593\t        if not selected_eeg or not selected_eeg.get('filepath'):\n   594\t            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n   595\t            return\n   596\t\n   597\t        eeg_filepath = selected_eeg['filepath']\n   598\t\n   599\t        # Check if the file exists\n   600\t        if not os.path.exists(eeg_filepath):\n   601\t            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n   602\t            return\n   603\t\n   604\t        # Get the current time window\n   605\t        try:\n   606\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   607\t        except ValueError:\n   608\t            start_time = None\n   609\t\n   610\t        try:\n   611\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   612\t        except ValueError:\n   613\t            end_time = None\n   614\t\n   615\t        # Show a loading message\n   616\t        loading_window = tk.Toplevel(self)\n   617\t        loading_window.title(\"Loading EEG\")\n   618\t        loading_window.geometry(\"300x100\")\n   619\t        loading_window.transient(self.master)\n   620\t        loading_window.grab_set()\n   621\t\n   622\t        loading_label = tk.Label(loading_window, text=\"Starting MNE viewer...\\nThis may take a moment.\")\n   623\t        loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   624\t        loading_window.update()\n   625\t\n   626\t        try:\n   627\t            # Get the path to the helper script\n   628\t            helper_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"mne_plot_helper.py\")\n   629\t\n   630\t            # Make sure the helper script is executable\n   631\t            if not os.access(helper_script_path, os.X_OK) and sys.platform != 'win32':\n   632\t                os.chmod(helper_script_path, 0o755)\n   633\t\n   634\t            # Build the command to run the helper script\n   635\t            cmd = [sys.executable, helper_script_path, \"--filepath\", eeg_filepath]\n   636\t\n   637\t            # Add time window parameters if specified\n   638\t            if start_time is not None:\n   639\t                cmd.extend([\"--start-time\", str(start_time)])\n   640\t            if end_time is not None:\n   641\t                cmd.extend([\"--end-time\", str(end_time)])\n   642\t\n   643\t            # Add title\n   644\t            window_title = f\"MNE EEG Viewer - {selected_eeg['filename']}\"\n   645\t            cmd.extend([\"--title\", window_title])\n   646\t\n   647\t            # Launch the subprocess\n   648\t            subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n   649\t\n   650\t            # Close the loading window after a short delay\n   651\t            self.after(1000, loading_window.destroy)\n   652\t\n   653\t        except Exception as e:\n   654\t            loading_window.destroy()\n   655\t            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n   656\t\n   657\t    def update_plot(self):\n   658\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   659\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_012HBKJoyWAE9LwMSUYR6dQK"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's test our implementation to make sure it works correctly:\n","workspace_file_chunks":[]},{"status":"success","request_id":"f8f054fd-26f8-4930-8d22-fb741c93a309","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"Let me explain the changes I've made to implement the MNE plot in a subprocess:\n\n1. **Created a Helper Script (`mne_plot_helper.py`)**:\n   - This script is designed to be run as a standalone Python process\n   - It accepts command-line arguments for the EEG file path, time window, and window title\n   - It handles loading the EEG file and displaying the plot using MNE\n   - The script runs independently from the main application\n\n2. **Modified the `view_eeg` Method in `selection_frame.py`**:\n   - Added imports for `sys` and `subprocess` modules\n   - Replaced the direct MNE plotting code with code to launch the helper script as a subprocess\n   - Added a loading window that shows briefly while the subprocess is starting\n   - Used `subprocess.Popen` to launch the helper script without blocking the main application\n   - Added code to make the helper script executable on Unix-like systems\n\n3. **Key Benefits of This Approach**:\n   - The MNE plot now runs in a separate process, so it doesn't block the main application\n   - Users can continue to interact with the main application while viewing the EEG\n   - If the MNE plot crashes, it won't affect the main application\n   - The implementation is clean and maintainable\n\nThe helper script (`mne_plot_helper.py`) handles all the same functionality that was previously in the `view_eeg` method, including:\n- Loading different EEG file formats\n- Setting the time window if specified\n- Setting the window title\n- Error handling\n\nThis implementation should work well across different platforms (Windows, macOS, Linux) and provides a much better user experience by keeping the main application responsive while the MNE plot is displayed.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Process launched with PID 11","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01RYwc8vym2vqowZhiirShMF"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/home/soenkevl/Documents/EEGAnalyzer","folderRoot":"/home/soenkevl/Documents/EEGAnalyzer"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me explain the changes I've made to implement the MNE plot in a subprocess:\n\n1. **Created a Helper Script (`mne_plot_helper.py`)**:\n   - This script is designed to be run as a standalone Python process\n   - It accepts command-line arguments for the EEG file path, time window, and window title\n   - It handles loading the EEG file and displaying the plot using MNE\n   - The script runs independently from the main application\n\n2. **Modified the `view_eeg` Method in `selection_frame.py`**:\n   - Added imports for `sys` and `subprocess` modules\n   - Replaced the direct MNE plotting code with code to launch the helper script as a subprocess\n   - Added a loading window that shows briefly while the subprocess is starting\n   - Used `subprocess.Popen` to launch the helper script without blocking the main application\n   - Added code to make the helper script executable on Unix-like systems\n\n3. **Key Benefits of This Approach**:\n   - The MNE plot now runs in a separate process, so it doesn't block the main application\n   - Users can continue to interact with the main application while viewing the EEG\n   - If the MNE plot crashes, it won't affect the main application\n   - The implementation is clean and maintainable\n\nThe helper script (`mne_plot_helper.py`) handles all the same functionality that was previously in the `view_eeg` method, including:\n- Loading different EEG file formats\n- Setting the time window if specified\n- Setting the window title\n- Error handling\n\nThis implementation should work well across different platforms (Windows, macOS, Linux) and provides a much better user experience by keeping the main application responsive while the MNE plot is displayed.\n","workspace_file_chunks":[]}],"feedbackStates":{"temp-fe-079b8868-aad0-4129-847c-2598e85afbf2":{"selectedRating":0,"feedbackNote":""},"temp-fe-d64be9b3-05d6-43d5-a9e1-e45e6ef64fad":{"selectedRating":0,"feedbackNote":""},"temp-fe-d3be3813-24ac-4f3b-a98b-af1670d8c3ac":{"selectedRating":0,"feedbackNote":""},"temp-fe-fa987075-7746-4d70-82ed-9319c2cde5e2":{"selectedRating":0,"feedbackNote":""},"temp-fe-e16b92a0-efed-4b6b-8e92-702db0445e0d":{"selectedRating":0,"feedbackNote":""},"temp-fe-79c5b863-6d37-4ca5-b180-7d2dc3f3068c":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"2c9f4fcf-4d70-44a4-bfe2-c5310423c75e;toolu_vrtx_01AMnZNuSNFPQJjvD3VNhHbA":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on gui/metrics_viewer/selection_frame.py:\n     1\t\"\"\"\n     2\tSelection frame for the EEG Metrics Viewer.\n     3\t\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport os\n    10\timport customtkinter as ctk\n    11\timport tkinter as tk\n    12\tfrom tkinter import messagebox\n    13\timport mne\n    14\timport numpy as np\n    15\t\n    16\tfrom .database_handler import DatabaseHandler\n    17\tfrom .plot_frame import MetricsPlotFrame\n    18\tfrom .utils import (\n    19\t    get_label_font,\n    20\t    get_dropdown_font,\n    21\t    get_button_font,\n    22\t    COMMON_CHANNELS,\n    23\t    ALTERNATIVE_CHANNEL_NAMES\n    24\t)\n    25\t\n    26\t\n    27\tclass SelectionFrame(ctk.CTkFrame):\n    28\t    \"\"\"\n    29\t    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    30\t    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\n    31\t    \"\"\"\n    32\t\n    33\t    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n    34\t        \"\"\"\n    35\t        Initialize the selection frame.\n    36\t\n    37\t        Args:\n    38\t            master: The parent widget\n    39\t            db_handler: DatabaseHandler instance for querying the database\n    40\t            plot_frame: MetricsPlotFrame instance for displaying plots\n    41\t            **kwargs: Additional arguments for the CTkFrame constructor\n    42\t        \"\"\"\n    43\t        super().__init__(master, **kwargs)\n    44\t\n    45\t        self.db_handler = db_handler\n    46\t        self.plot_frame = plot_frame\n    47\t\n    48\t        # Configure grid layout\n    49\t        self.grid_columnconfigure(0, weight=1)\n    50\t        self.grid_columnconfigure(1, weight=1)\n    51\t        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\n    52\t\n    53\t        # Create fonts\n    54\t        label_font = get_label_font()\n    55\t        dropdown_font = get_dropdown_font()\n    56\t\n    57\t        # Experiment selection - more compact\n    58\t        self.experiment_label = ctk.CTkLabel(self, text=\"Select Experiment:\", font=label_font)\n    59\t        self.experiment_label.grid(row=0, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    60\t\n    61\t        self.experiments = self.db_handler.get_experiments()\n    62\t        experiment_names = [f\"{exp['name']} ({exp['run_name']})\" for exp in self.experiments]\n    63\t\n    64\t        self.experiment_var = ctk.StringVar(value=experiment_names[0] if experiment_names else \"\")\n    65\t        self.experiment_dropdown = ctk.CTkOptionMenu(\n    66\t            self,\n    67\t            values=experiment_names,\n    68\t            variable=self.experiment_var,\n    69\t            command=self.on_experiment_selected,\n    70\t            height=28,\n    71\t            font=dropdown_font,\n    72\t            dropdown_font=dropdown_font\n    73\t        )\n    74\t        self.experiment_dropdown.grid(row=0, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    75\t\n    76\t        # EEG selection - more compact\n    77\t        self.eeg_label = ctk.CTkLabel(self, text=\"Select EEG:\", font=label_font)\n    78\t        self.eeg_label.grid(row=1, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    79\t\n    80\t        self.eeg_var = ctk.StringVar()\n    81\t        self.eeg_dropdown = ctk.CTkOptionMenu(\n    82\t            self,\n    83\t            values=[],\n    84\t            variable=self.eeg_var,\n    85\t            command=self.on_eeg_selected,\n    86\t            height=28,\n    87\t            font=dropdown_font,\n    88\t            dropdown_font=dropdown_font\n    89\t        )\n    90\t        self.eeg_dropdown.grid(row=1, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n    91\t\n    92\t        # Metric selection - more compact\n    93\t        self.metric_label = ctk.CTkLabel(self, text=\"Select Metric:\", font=label_font)\n    94\t        self.metric_label.grid(row=2, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n    95\t\n    96\t        self.metric_var = ctk.StringVar()\n    97\t        self.metric_dropdown = ctk.CTkOptionMenu(\n    98\t            self,\n    99\t            values=[],\n   100\t            variable=self.metric_var,\n   101\t            command=self.on_metric_selected,\n   102\t            height=28,\n   103\t            font=dropdown_font,\n   104\t            dropdown_font=dropdown_font\n   105\t        )\n   106\t        self.metric_dropdown.grid(row=2, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   107\t\n   108\t        # Channels selection with more compact layout\n   109\t        self.channels_label = ctk.CTkLabel(self, text=\"Select Channels:\", font=label_font)\n   110\t        self.channels_label.grid(row=3, column=0, padx=5, pady=(8, 0), sticky=\"nw\")\n   111\t\n   112\t        # Create a frame for channel selection buttons - more compact layout\n   113\t        self.channel_buttons_frame = ctk.CTkFrame(self)\n   114\t        self.channel_buttons_frame.grid(row=3, column=1, padx=5, pady=(8, 0), sticky=\"ew\")\n   115\t        self.channel_buttons_frame.grid_columnconfigure(0, weight=1)\n   116\t        self.channel_buttons_frame.grid_columnconfigure(1, weight=1)\n   117\t        self.channel_buttons_frame.grid_columnconfigure(2, weight=1)\n   118\t\n   119\t        # Add select all and deselect all buttons with smaller font and more compact design\n   120\t        button_font = dropdown_font\n   121\t\n   122\t        self.select_all_button = ctk.CTkButton(\n   123\t            self.channel_buttons_frame,\n   124\t            text=\"Select All\",\n   125\t            command=self.select_all_channels,\n   126\t            height=22,\n   127\t            font=button_font\n   128\t        )\n   129\t        self.select_all_button.grid(row=0, column=0, padx=2, pady=3, sticky=\"ew\")\n   130\t\n   131\t        self.deselect_all_button = ctk.CTkButton(\n   132\t            self.channel_buttons_frame,\n   133\t            text=\"Deselect All\",\n   134\t            command=self.deselect_all_channels,\n   135\t            height=22,\n   136\t            font=button_font\n   137\t        )\n   138\t        self.deselect_all_button.grid(row=0, column=1, padx=2, pady=3, sticky=\"ew\")\n   139\t\n   140\t        # Add select common channels button\n   141\t        self.select_common_button = ctk.CTkButton(\n   142\t            self.channel_buttons_frame,\n   143\t            text=\"Common Channels\",\n   144\t            command=self.select_common_channels,\n   145\t            height=22,\n   146\t            font=button_font\n   147\t        )\n   148\t        self.select_common_button.grid(row=0, column=2, padx=2, pady=3, sticky=\"ew\")\n   149\t\n   150\t        # Create a scrollable frame for channel checkboxes - increased height for better usability\n   151\t        self.channels_frame = ctk.CTkScrollableFrame(self, width=180, height=200)\n   152\t        self.channels_frame.grid(row=4, column=1, padx=5, pady=(0, 8), sticky=\"ew\")\n   153\t\n   154\t        # Bind mouse wheel events to ensure scrolling works properly\n   155\t        self.bind_mouse_wheel(self.channels_frame)\n   156\t\n   157\t        self.channel_vars = {}  # Will hold the checkbox variables\n   158\t\n   159\t        # Aggregation methods frame\n   160\t        self.aggregation_frame = ctk.CTkFrame(self)\n   161\t        self.aggregation_frame.grid(row=5, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   162\t        self.aggregation_frame.grid_columnconfigure(0, weight=1)\n   163\t        self.aggregation_frame.grid_columnconfigure(1, weight=3)\n   164\t        self.aggregation_frame.grid_rowconfigure(0, weight=1)\n   165\t        self.aggregation_frame.grid_rowconfigure(1, weight=1)\n   166\t\n   167\t        # Aggregation label\n   168\t        self.aggregation_label = ctk.CTkLabel(\n   169\t            self.aggregation_frame,\n   170\t            text=\"Aggregation:\",\n   171\t            font=label_font\n   172\t        )\n   173\t        self.aggregation_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   174\t\n   175\t        # Aggregation checkboxes frame\n   176\t        self.aggregation_checkboxes_frame = ctk.CTkFrame(self.aggregation_frame, fg_color=\"transparent\")\n   177\t        self.aggregation_checkboxes_frame.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   178\t        self.aggregation_checkboxes_frame.grid_columnconfigure(0, weight=1)\n   179\t        self.aggregation_checkboxes_frame.grid_columnconfigure(1, weight=1)\n   180\t        self.aggregation_checkboxes_frame.grid_columnconfigure(2, weight=1)\n   181\t\n   182\t        # Aggregation method checkboxes\n   183\t        self.aggregation_vars = {}\n   184\t\n   185\t        # Mean checkbox\n   186\t        self.aggregation_vars['mean'] = ctk.BooleanVar(value=False)\n   187\t        self.mean_checkbox = ctk.CTkCheckBox(\n   188\t            self.aggregation_checkboxes_frame,\n   189\t            text=\"Mean\",\n   190\t            variable=self.aggregation_vars['mean'],\n   191\t            onvalue=True,\n   192\t            offvalue=False,\n   193\t            font=dropdown_font,\n   194\t            checkbox_width=16,\n   195\t            checkbox_height=16\n   196\t        )\n   197\t        self.mean_checkbox.grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n   198\t\n   199\t        # Std checkbox\n   200\t        self.aggregation_vars['std'] = ctk.BooleanVar(value=False)\n   201\t        self.std_checkbox = ctk.CTkCheckBox(\n   202\t            self.aggregation_checkboxes_frame,\n   203\t            text=\"Std Dev\",\n   204\t            variable=self.aggregation_vars['std'],\n   205\t            onvalue=True,\n   206\t            offvalue=False,\n   207\t            font=dropdown_font,\n   208\t            checkbox_width=16,\n   209\t            checkbox_height=16\n   210\t        )\n   211\t        self.std_checkbox.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n   212\t\n   213\t        # Median checkbox\n   214\t        self.aggregation_vars['median'] = ctk.BooleanVar(value=False)\n   215\t        self.median_checkbox = ctk.CTkCheckBox(\n   216\t            self.aggregation_checkboxes_frame,\n   217\t            text=\"Median\",\n   218\t            variable=self.aggregation_vars['median'],\n   219\t            onvalue=True,\n   220\t            offvalue=False,\n   221\t            font=dropdown_font,\n   222\t            checkbox_width=16,\n   223\t            checkbox_height=16\n   224\t        )\n   225\t        self.median_checkbox.grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n   226\t\n   227\t        # Aggregation only checkbox\n   228\t        self.aggregation_only_var = ctk.BooleanVar(value=False)\n   229\t        self.aggregation_only_checkbox = ctk.CTkCheckBox(\n   230\t            self.aggregation_frame,\n   231\t            text=\"Show Aggregation Only\",\n   232\t            variable=self.aggregation_only_var,\n   233\t            onvalue=True,\n   234\t            offvalue=False,\n   235\t            font=dropdown_font,\n   236\t            checkbox_width=16,\n   237\t            checkbox_height=16\n   238\t        )\n   239\t        self.aggregation_only_checkbox.grid(row=1, column=1, padx=5, pady=(0, 2), sticky=\"w\")\n   240\t\n   241\t        # Time window selection frame\n   242\t        self.time_window_frame = ctk.CTkFrame(self)\n   243\t        self.time_window_frame.grid(row=6, column=0, columnspan=2, padx=5, pady=(5, 0), sticky=\"ew\")\n   244\t        self.time_window_frame.grid_columnconfigure(0, weight=1)\n   245\t        self.time_window_frame.grid_columnconfigure(1, weight=1)\n   246\t        self.time_window_frame.grid_columnconfigure(2, weight=1)\n   247\t        self.time_window_frame.grid_columnconfigure(3, weight=1)\n   248\t\n   249\t        # Time window label\n   250\t        self.time_window_label = ctk.CTkLabel(\n   251\t            self.time_window_frame,\n   252\t            text=\"Time Window (s):\",\n   253\t            font=label_font\n   254\t        )\n   255\t        self.time_window_label.grid(row=0, column=0, padx=5, pady=5, sticky=\"w\")\n   256\t\n   257\t        # Start time entry\n   258\t        self.start_time_var = ctk.StringVar(value=\"0\")\n   259\t        self.start_time_entry = ctk.CTkEntry(\n   260\t            self.time_window_frame,\n   261\t            textvariable=self.start_time_var,\n   262\t            width=60,\n   263\t            height=25,\n   264\t            font=dropdown_font\n   265\t        )\n   266\t        self.start_time_entry.grid(row=0, column=1, padx=5, pady=5, sticky=\"ew\")\n   267\t\n   268\t        # To label\n   269\t        self.to_label = ctk.CTkLabel(\n   270\t            self.time_window_frame,\n   271\t            text=\"to\",\n   272\t            font=label_font\n   273\t        )\n   274\t        self.to_label.grid(row=0, column=2, padx=2, pady=5)\n   275\t\n   276\t        # End time entry\n   277\t        self.end_time_var = ctk.StringVar(value=\"\")\n   278\t        self.end_time_entry = ctk.CTkEntry(\n   279\t            self.time_window_frame,\n   280\t            textvariable=self.end_time_var,\n   281\t            width=60,\n   282\t            height=25,\n   283\t            font=dropdown_font\n   284\t        )\n   285\t        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n   286\t\n   287\t        # Reset zoom button\n   288\t        self.reset_zoom_button = ctk.CTkButton(\n   289\t            self,\n   290\t            text=\"Reset Zoom\",\n   291\t            command=self.reset_time_window,\n   292\t            height=25,\n   293\t            font=dropdown_font\n   294\t        )\n   295\t        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n   296\t\n   297\t        # Update button - more compact\n   298\t        self.update_button = ctk.CTkButton(\n   299\t            self,\n   300\t            text=\"Update Plot\",\n   301\t            command=self.update_plot,\n   302\t            height=30,\n   303\t            font=get_button_font()\n   304\t        )\n   305\t        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\"ew\")\n   306\t\n   307\t        # View EEG button\n   308\t        self.view_eeg_button = ctk.CTkButton(\n   309\t            self,\n   310\t            text=\"View EEG\",\n   311\t            command=self.view_eeg,\n   312\t            height=30,\n   313\t            font=get_button_font(),\n   314\t            fg_color=\"#2a6099\"  # Different color to distinguish it\n   315\t        )\n   316\t        self.view_eeg_button.grid(row=8, column=0, columnspan=2, padx=5, pady=(5, 8), sticky=\"ew\")\n   317\t\n   318\t        # Initialize with the first experiment if available\n   319\t        if self.experiments:\n   320\t            self.on_experiment_selected(experiment_names[0])\n   321\t\n   322\t    def on_experiment_selected(self, selection: str):\n   323\t        \"\"\"\n   324\t        Handle experiment selection change.\n   325\t\n   326\t        Args:\n   327\t            selection: Selected experiment name\n   328\t        \"\"\"\n   329\t        # Find the selected experiment\n   330\t        selected_exp = None\n   331\t        for exp in self.experiments:\n   332\t            if f\"{exp['name']} ({exp['run_name']})\" == selection:\n   333\t                selected_exp = exp\n   334\t                break\n   335\t\n   336\t        if not selected_exp:\n   337\t            return\n   338\t\n   339\t        # Update EEG dropdown\n   340\t        self.current_experiment_id = selected_exp['id']\n   341\t        eegs = self.db_handler.get_eegs_for_experiment(self.current_experiment_id)\n   342\t        eeg_names = [eeg['filename'] for eeg in eegs]\n   343\t\n   344\t        self.eegs = eegs\n   345\t        self.eeg_dropdown.configure(values=eeg_names)\n   346\t        if eeg_names:\n   347\t            self.eeg_var.set(eeg_names[0])\n   348\t            self.on_eeg_selected(eeg_names[0])\n   349\t        else:\n   350\t            self.eeg_var.set(\"\")\n   351\t            self.clear_metrics()\n   352\t            self.clear_channels()\n   353\t\n   354\t    def on_eeg_selected(self, selection: str):\n   355\t        \"\"\"\n   356\t        Handle EEG selection change.\n   357\t\n   358\t        Args:\n   359\t            selection: Selected EEG name\n   360\t        \"\"\"\n   361\t        # Find the selected EEG\n   362\t        selected_eeg = None\n   363\t        for eeg in self.eegs:\n   364\t            if eeg['filename'] == selection:\n   365\t                selected_eeg = eeg\n   366\t                break\n   367\t\n   368\t        if not selected_eeg:\n   369\t            return\n   370\t\n   371\t        # Update metrics dropdown\n   372\t        self.current_eeg_id = selected_eeg['id']\n   373\t        self.update_metrics_dropdown()\n   374\t        self.update_channels_checkboxes()\n   375\t\n   376\t    def on_metric_selected(self, selection: str):\n   377\t        \"\"\"\n   378\t        Handle metric selection change.\n   379\t\n   380\t        Args:\n   381\t            selection: Selected metric name\n   382\t        \"\"\"\n   383\t        self.current_metric = selection\n   384\t\n   385\t    def update_metrics_dropdown(self):\n   386\t        \"\"\"Update the metrics dropdown based on the selected experiment and EEG.\"\"\"\n   387\t        # Get available metrics\n   388\t        metrics = self.db_handler.get_available_metrics(self.current_experiment_id, self.current_eeg_id)\n   389\t\n   390\t        # Update dropdown\n   391\t        self.metric_dropdown.configure(values=metrics)\n   392\t        if metrics:\n   393\t            self.metric_var.set(metrics[0])\n   394\t            self.current_metric = metrics[0]\n   395\t        else:\n   396\t            self.metric_var.set(\"\")\n   397\t            self.current_metric = None\n   398\t\n   399\t    def update_channels_checkboxes(self):\n   400\t        \"\"\"Update the channel checkboxes based on the selected experiment and EEG.\"\"\"\n   401\t        # Clear existing checkboxes\n   402\t        self.clear_channels()\n   403\t\n   404\t        # Get available channels\n   405\t        self.available_channels = self.db_handler.get_available_channels(self.current_experiment_id, self.current_eeg_id)\n   406\t\n   407\t        # Add a search entry at the top of the channels frame\n   408\t        self.search_var = ctk.StringVar()\n   409\t        self.search_var.trace_add(\"write\", self.filter_channels)\n   410\t\n   411\t        self.search_frame = ctk.CTkFrame(self.channels_frame)\n   412\t        self.search_frame.grid(row=0, column=0, padx=5, pady=5, sticky=\"ew\")\n   413\t        self.search_frame.grid_columnconfigure(0, weight=1)\n   414\t\n   415\t        self.search_entry = ctk.CTkEntry(\n   416\t            self.search_frame,\n   417\t            placeholder_text=\"Search channels...\",\n   418\t            textvariable=self.search_var,\n   419\t            height=25,\n   420\t            font=get_dropdown_font()\n   421\t        )\n   422\t        self.search_entry.grid(row=0, column=0, padx=5, pady=3, sticky=\"ew\")\n   423\t\n   424\t        # Create the channels container frame\n   425\t        self.channels_container = ctk.CTkFrame(self.channels_frame, fg_color=\"transparent\")\n   426\t        self.channels_container.grid(row=1, column=0, padx=5, pady=5, sticky=\"ew\")\n   427\t\n   428\t        # Display all channels initially\n   429\t        self.display_channels(self.available_channels)\n   430\t\n   431\t    def display_channels(self, channels: List[str]):\n   432\t        \"\"\"\n   433\t        Display the given channels as checkboxes.\n   434\t\n   435\t        Args:\n   436\t            channels: List of channel names to display\n   437\t        \"\"\"\n   438\t        # Clear existing checkboxes in the container\n   439\t        for widget in self.channels_container.winfo_children():\n   440\t            widget.destroy()\n   441\t\n   442\t        # Configure the container for proper scrolling\n   443\t        self.channels_container.grid_columnconfigure(0, weight=1)\n   444\t\n   445\t        # Sort channels alphabetically to ensure consistent display\n   446\t        sorted_channels = sorted(channels)\n   447\t\n   448\t        # Create a checkbox for each channel\n   449\t        for i, channel in enumerate(sorted_channels):\n   450\t            var = self.channel_vars.get(channel, ctk.BooleanVar(value=False))\n   451\t            self.channel_vars[channel] = var\n   452\t\n   453\t            # Create more compact checkboxes\n   454\t            checkbox = ctk.CTkCheckBox(\n   455\t                self.channels_container,\n   456\t                text=channel,\n   457\t                variable=var,\n   458\t                onvalue=True,\n   459\t                offvalue=False,\n   460\t                height=20,\n   461\t                font=get_dropdown_font(),\n   462\t                checkbox_width=16,\n   463\t                checkbox_height=16\n   464\t            )\n   465\t            checkbox.grid(row=i, column=0, padx=8, pady=3, sticky=\"w\")\n   466\t\n   467\t            # Bind mouse wheel event to each checkbox for better scrolling\n   468\t            checkbox.bind(\"<MouseWheel>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   469\t            checkbox.bind(\"<Button-4>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   470\t            checkbox.bind(\"<Button-5>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n   471\t\n   472\t    def filter_channels(self, *args):\n   473\t        \"\"\"Filter channels based on search text.\"\"\"\n   474\t        search_text = self.search_var.get().lower()\n   475\t\n   476\t        if not search_text:\n   477\t            # If search is empty, show all channels\n   478\t            filtered_channels = self.available_channels\n   479\t        else:\n   480\t            # Filter channels that contain the search text\n   481\t            filtered_channels = [ch for ch in self.available_channels if search_text in ch.lower()]\n   482\t\n   483\t            # Sort the filtered channels alphabetically\n   484\t            filtered_channels.sort()\n   485\t\n   486\t        # Update the displayed channels\n   487\t        self.display_channels(filtered_channels)\n   488\t\n   489\t    def bind_mouse_wheel(self, widget):\n   490\t        \"\"\"\n   491\t        Bind mouse wheel events to the widget for scrolling.\n   492\t\n   493\t        Args:\n   494\t            widget: The widget to bind mouse wheel events to\n   495\t        \"\"\"\n   496\t        # Bind for Windows and Linux (with mouse wheel)\n   497\t        widget.bind_all(\"<MouseWheel>\", lambda event: self._on_mouse_wheel(event, widget))\n   498\t        # Bind for Linux (with touchpad)\n   499\t        widget.bind_all(\"<Button-4>\", lambda event: self._on_mouse_wheel(event, widget))\n   500\t        widget.bind_all(\"<Button-5>\", lambda event: self._on_mouse_wheel(event, widget))\n   501\t\n   502\t    def _on_mouse_wheel(self, event, widget):\n   503\t        \"\"\"\n   504\t        Handle mouse wheel events for scrolling.\n   505\t\n   506\t        Args:\n   507\t            event: The mouse wheel event\n   508\t            widget: The widget to scroll\n   509\t        \"\"\"\n   510\t        # Get the widget under the cursor\n   511\t        x, y = event.x_root, event.y_root\n   512\t        target_widget = event.widget.winfo_containing(x, y)\n   513\t\n   514\t        # Check if the cursor is over our scrollable frame or its children\n   515\t        parent = target_widget\n   516\t        while parent is not None:\n   517\t            if parent == widget or parent == self.channels_container:\n   518\t                break\n   519\t            parent = parent.master\n   520\t\n   521\t        # If cursor is not over our scrollable area, don't scroll\n   522\t        if parent is None:\n   523\t            return\n   524\t\n   525\t        # Handle different event types\n   526\t        if event.num == 4 or event.delta > 0:  # Scroll up\n   527\t            widget._parent_canvas.yview_scroll(-1, \"units\")\n   528\t        elif event.num == 5 or event.delta < 0:  # Scroll down\n   529\t            widget._parent_canvas.yview_scroll(1, \"units\")\n   530\t\n   531\t    def clear_channels(self):\n   532\t        \"\"\"Clear all channel checkboxes and related widgets.\"\"\"\n   533\t        for widget in self.channels_frame.winfo_children():\n   534\t            widget.destroy()\n   535\t\n   536\t        self.channel_vars = {}\n   537\t        self.available_channels = []\n   538\t\n   539\t    def clear_metrics(self):\n   540\t        \"\"\"Clear the metrics dropdown.\"\"\"\n   541\t        self.metric_dropdown.configure(values=[])\n   542\t        self.metric_var.set(\"\")\n   543\t        self.current_metric = None\n   544\t\n   545\t    def select_all_channels(self):\n   546\t        \"\"\"Select all channel checkboxes.\"\"\"\n   547\t        for var in self.channel_vars.values():\n   548\t            var.set(True)\n   549\t\n   550\t    def deselect_all_channels(self):\n   551\t        \"\"\"Deselect all channel checkboxes.\"\"\"\n   552\t        for var in self.channel_vars.values():\n   553\t            var.set(False)\n   554\t\n   555\t    def select_common_channels(self):\n   556\t        \"\"\"Select common EEG channels (10-20 system).\"\"\"\n   557\t        # First deselect all\n   558\t        self.deselect_all_channels()\n   559\t\n   560\t        # Select the channels if they exist in our available channels\n   561\t        for channel in COMMON_CHANNELS:\n   562\t            if channel in self.channel_vars:\n   563\t                self.channel_vars[channel].set(True)\n   564\t            # Try alternative name if the channel doesn't exist\n   565\t            elif channel in ALTERNATIVE_CHANNEL_NAMES and ALTERNATIVE_CHANNEL_NAMES[channel] in self.channel_vars:\n   566\t                self.channel_vars[ALTERNATIVE_CHANNEL_NAMES[channel]].set(True)\n   567\t\n   568\t        # If we have a search filter active, update the display\n   569\t        if hasattr(self, 'search_var'):\n   570\t            self.filter_channels()\n   571\t\n   572\t    def reset_time_window(self):\n   573\t        \"\"\"Reset the time window to show all data.\"\"\"\n   574\t        self.start_time_var.set(\"0\")\n   575\t        self.end_time_var.set(\"\")\n   576\t        self.update_plot()\n   577\t\n   578\t    def view_eeg(self):\n   579\t        \"\"\"Open the current EEG file with MNE and display it in a new window.\"\"\"\n   580\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n   581\t            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n   582\t            return\n   583\t\n   584\t        # Find the selected EEG to get its filepath\n   585\t        selected_eeg = None\n   586\t        for eeg in self.eegs:\n   587\t            if eeg['id'] == self.current_eeg_id:\n   588\t                selected_eeg = eeg\n   589\t                break\n   590\t\n   591\t        if not selected_eeg or not selected_eeg.get('filepath'):\n   592\t            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n   593\t            return\n   594\t\n   595\t        eeg_filepath = selected_eeg['filepath']\n   596\t\n   597\t        # Check if the file exists\n   598\t        if not os.path.exists(eeg_filepath):\n   599\t            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n   600\t            return\n   601\t\n   602\t        # Get the current time window\n   603\t        try:\n   604\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   605\t        except ValueError:\n   606\t            start_time = None\n   607\t\n   608\t        try:\n   609\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   610\t        except ValueError:\n   611\t            end_time = None\n   612\t\n   613\t        # Try to load the EEG file with MNE\n   614\t        try:\n   615\t            # # Show a loading message\n   616\t            # self.loading_window = tk.Toplevel(self)\n   617\t            # self.loading_window.title(\"Loading EEG\")\n   618\t            # self.loading_window.geometry(\"300x100\")\n   619\t            # self.loading_window.transient(self.master)\n   620\t            # self.loading_window.grab_set()\n   621\t            #\n   622\t            # loading_label = tk.Label(self.loading_window, text=\"Loading EEG file...\\nThis may take a moment.\")\n   623\t            # loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   624\t            #\n   625\t            # self.loading_window.update()\n   626\t\n   627\t            # Load the EEG file - try different readers based on file extension\n   628\t            file_ext = os.path.splitext(eeg_filepath)[1].lower()\n   629\t\n   630\t            if file_ext == '.edf':\n   631\t                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\n   632\t            elif file_ext == '.bdf':\n   633\t                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\n   634\t            elif file_ext == '.gdf':\n   635\t                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\n   636\t            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\n   637\t                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\n   638\t            elif file_ext == '.cnt':\n   639\t                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\n   640\t            elif file_ext == '.set':\n   641\t                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\n   642\t            else:\n   643\t                # Try the generic reader as a fallback\n   644\t                try:\n   645\t                    raw = mne.io.read_raw(eeg_filepath, preload=True)\n   646\t                except Exception as e:\n   647\t                    raise ValueError(f\"Unsupported file format: {file_ext}. Error: {str(e)}\")\n   648\t\n   649\t            # Close the loading window\n   650\t            # self.loading_window.destroy()\n   651\t\n   652\t            # Set the time window if specified\n   653\t            if start_time is not None and end_time is not None:\n   654\t                # Convert from seconds to points if needed\n   655\t                start_idx = max(0, int(start_time * raw.info['sfreq']))\n   656\t                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\n   657\t\n   658\t                # Create a plot with the specified time window\n   659\t                raw.plot(start=start_time, duration=(end_idx-start_idx)/raw.info['sfreq'],\n   660\t                              scalings='auto', block=True, show=True)\n   661\t\n   662\t                # # Set the window title to include the EEG filename\n   663\t                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   664\t                #\n   665\t                # # Show the plot\n   666\t                # fig.show()\n   667\t            else:\n   668\t                # Just show the whole EEG\n   669\t                raw.plot(scalings='auto', block=True, show=True)\n   670\t                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n   671\t                # fig.show()\n   672\t\n   673\t        except Exception as e:\n   674\t            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n   675\t            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\n   676\t                self.loading_window.destroy()\n   677\t\n   678\t    def update_plot(self):\n   679\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   680\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n   681\t            return\n   682\t\n   683\t        # Get selected channels\n   684\t        selected_channels = [channel for channel, var in self.channel_vars.items() if var.get()]\n   685\t\n   686\t        # Get selected aggregation methods\n   687\t        selected_aggregations = [agg for agg, var in self.aggregation_vars.items() if var.get()]\n   688\t\n   689\t        # Check if we should show only aggregations\n   690\t        aggregation_only = self.aggregation_only_var.get()\n   691\t\n   692\t        # Check if we have valid selections\n   693\t        if (not selected_channels and not selected_aggregations) or \\\n   694\t           (aggregation_only and not selected_aggregations):\n   695\t            self.plot_frame.update_plot(None, None, None, \"No channels or aggregations selected\")\n   696\t            return\n   697\t\n   698\t        # Get data for the selected experiment and EEG\n   699\t        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n   700\t\n   701\t        if df.empty:\n   702\t            self.plot_frame.update_plot(None, None, None, \"No data available\")\n   703\t            return\n   704\t\n   705\t        # Get time window values\n   706\t        try:\n   707\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   708\t        except ValueError:\n   709\t            start_time = None\n   710\t            self.start_time_var.set(\"0\")\n   711\t\n   712\t        try:\n   713\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   714\t        except ValueError:\n   715\t            end_time = None\n   716\t            self.end_time_var.set(\"\")\n   717\t\n   718\t        # Update the plot\n   719\t        experiment_name = next((exp['name'] for exp in self.experiments if exp['id'] == self.current_experiment_id), \"\")\n   720\t        eeg_name = next((eeg['filename'] for eeg in self.eegs if eeg['id'] == self.current_eeg_id), \"\")\n   721\t\n   722\t        title = f\"{self.current_metric} for {experiment_name} - {eeg_name}\"\n   723\t\n   724\t        # Add aggregation-only info to title if specified\n   725\t        if aggregation_only and selected_aggregations:\n   726\t            title += \" (Aggregation Only)\"\n   727\t\n   728\t        # Add time window info to title if specified\n   729\t        if start_time is not None and end_time is not None:\n   730\t            title += f\" (Time: {start_time}s to {end_time}s)\"\n   731\t        elif start_time is not None:\n   732\t            title += f\" (Time: {start_time}s+)\"\n   733\t\n   734\t        self.plot_frame.update_plot(\n   735\t            df,\n   736\t            self.current_metric,\n   737\t            selected_channels,\n   738\t            title,\n   739\t            time_window=(start_time, end_time),\n   740\t            aggregations=selected_aggregations,\n   741\t            aggregation_only=aggregation_only\n   742\t        )\n   743\t\nTotal lines in file: 743\n","isError":false,"requestId":""}},"594088a6-3dd2-4508-ab5c-bcf1e62ff125;toolu_vrtx_01LTpZsxaFGeTMxWr3iSMvAC":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: gui/metrics_viewer/selection_frame.py\n\"\"\"\nSelection frame for the EEG Metrics Viewer.\n\nThis module provides the SelectionFrame class for selecting experiments, EEGs,\nmetrics, channels, and other visualization options.\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Optional, Any, Callable\nimport os\nimport customtkinter as ctk\nimport tkinter as tk\nfrom tkinter import messagebox\nimport mne\nimport numpy as np\n\nfrom .database_handler import DatabaseHandler\nfrom .plot_frame import MetricsPlotFrame\nfrom .utils import (\n    get_label_font,\n    get_dropdown_font,\n    get_button_font,\n    COMMON_CHANNELS,\n    ALTERNATIVE_CHANNEL_NAMES\n)\n\n\nclass SelectionFrame(ctk.CTkFrame):\n    \"\"\"\n    A frame containing controls for selecting experiments, EEGs, metrics, channels, and other options.\n    Also provides functionality to view the original EEG file using MNE, synchronized with the current time window.\n    \"\"\"\n\n    def __init__(self, master, db_handler: DatabaseHandler, plot_frame: MetricsPlotFrame, **kwargs):\n        \"\"\"\n        Initialize the selection frame.\n\n        Args:\n            master: The parent widget\n            db_handler: DatabaseHandler instance for querying the database\n            plot_frame: MetricsPlotFrame instance for displaying plots\n            **kwargs: Additional arguments for the CTkFrame constructor\n        \"\"\"\n        super().__init__(master, **kwargs)\n\n        self.db_handler = db_handler\n        self.plot_frame = plot_frame\n\n        # Configure grid layout\n        self.grid_columnconfigure(0, weight=1)\n        self.grid_columnconfigure(1, weight=1)\n        self.grid_rowconfigure(8, weight=0)  # Row for the View EEG button\n\n        # Create fonts\n        label_font = get_label_font()\n        dropdown_font = get_dropdown_font()\n\n        # Experiment selection - more compact\n        self.experiment_label = ctk.CTkLabel(self, text=\"Select Experiment:\", font=label_font)\n        self.experiment_label.grid(row=0, column=0, padx=5, pady=(8, 0), sticky=\"w\")\n\n        self.experiments = self.db_handler.get_experiments()\n        experiment_names = [f\"{exp['name']} ({exp['run_name']})\" for exp in self.experiments]\n\n        self.experiment_var = ctk.StringVar(value=experiment_names[0] if experiment_names else \"\")\n        self.experiment_dropdown = ctk.CTkOptionMenu(\n            self,\n            values=experiment_names,\n            variable=self.experiment_var,\n            command=self.on_experiment_selected,\n            height=28,\n            font=dropdown_font,\n            dropdown_font=dropdown_font\n        )\n...\n        self.deselect_all_button.grid(row=0, column=1, padx=2, pady=3, sticky=\"ew\")\n\n        # Add select common channels button\n        self.select_common_button = ctk.CTkButton(\n            self.channel_buttons_frame,\n            text=\"Common Channels\",\n            command=self.select_common_channels,\n            height=22,\n            font=button_font\n        )\n        self.select_common_button.grid(row=0, column=2, padx=2, pady=3, sticky=\"ew\")\n\n        # Create a scrollable frame for channel checkboxes - increased height for better usability\n        self.channels_frame = ctk.CTkScrollableFrame(self, width=180, height=200)\n        self.channels_frame.grid(row=4, column=1, padx=5, pady=(0, 8), sticky=\"ew\")\n\n        # Bind mouse wheel events to ensure scrolling works properly\n        self.bind_mouse_wheel(self.channels_frame)\n\n        self.channel_vars = {}  # Will hold the checkbox variables\n...\n        self.end_time_entry.grid(row=0, column=3, padx=5, pady=5, sticky=\"ew\")\n\n        # Reset zoom button\n        self.reset_zoom_button = ctk.CTkButton(\n            self,\n            text=\"Reset Zoom\",\n            command=self.reset_time_window,\n            height=25,\n            font=dropdown_font\n        )\n        self.reset_zoom_button.grid(row=7, column=0, padx=5, pady=(5, 0), sticky=\"ew\")\n\n        # Update button - more compact\n        self.update_button = ctk.CTkButton(\n            self,\n            text=\"Update Plot\",\n            command=self.update_plot,\n            height=30,\n            font=get_button_font()\n        )\n        self.update_button.grid(row=7, column=1, padx=5, pady=(5, 0), sticky=\"ew\")\n\n        # View EEG button\n        self.view_eeg_button = ctk.CTkButton(\n            self,\n            text=\"View EEG\",\n            command=self.view_eeg,\n            height=30,\n            font=get_button_font(),\n            fg_color=\"#2a6099\"  # Different color to distinguish it\n        )\n...\n\n    def on_experiment_selected(self, selection: str):\n        \"\"\"\n        Handle experiment selection change.\n\n        Args:\n            selection: Selected experiment name\n        \"\"\"\n        # Find the selected experiment\n        selected_exp = None\n        for exp in self.experiments:\n            if f\"{exp['name']} ({exp['run_name']})\" == selection:\n                selected_exp = exp\n                break\n\n        if not selected_exp:\n            return\n\n        # Update EEG dropdown\n        self.current_experiment_id = selected_exp['id']\n        eegs = self.db_handler.get_eegs_for_experiment(self.current_experiment_id)\n        eeg_names = [eeg['filename'] for eeg in eegs]\n\n        self.eegs = eegs\n        self.eeg_dropdown.configure(values=eeg_names)\n        if eeg_names:\n            self.eeg_var.set(eeg_names[0])\n            self.on_eeg_selected(eeg_names[0])\n        else:\n            self.eeg_var.set(\"\")\n            self.clear_metrics()\n            self.clear_channels()\n...\n\n    def update_channels_checkboxes(self):\n        \"\"\"Update the channel checkboxes based on the selected experiment and EEG.\"\"\"\n        # Clear existing checkboxes\n        self.clear_channels()\n\n        # Get available channels\n        self.available_channels = self.db_handler.get_available_channels(self.current_experiment_id, self.current_eeg_id)\n\n        # Add a search entry at the top of the channels frame\n        self.search_var = ctk.StringVar()\n        self.search_var.trace_add(\"write\", self.filter_channels)\n\n        self.search_frame = ctk.CTkFrame(self.channels_frame)\n        self.search_frame.grid(row=0, column=0, padx=5, pady=5, sticky=\"ew\")\n        self.search_frame.grid_columnconfigure(0, weight=1)\n\n        self.search_entry = ctk.CTkEntry(\n            self.search_frame,\n            placeholder_text=\"Search channels...\",\n            textvariable=self.search_var,\n            height=25,\n            font=get_dropdown_font()\n        )\n        self.search_entry.grid(row=0, column=0, padx=5, pady=3, sticky=\"ew\")\n\n        # Create the channels container frame\n        self.channels_container = ctk.CTkFrame(self.channels_frame, fg_color=\"transparent\")\n        self.channels_container.grid(row=1, column=0, padx=5, pady=5, sticky=\"ew\")\n\n        # Display all channels initially\n        self.display_channels(self.available_channels)\n...\n\n        # Create a checkbox for each channel\n        for i, channel in enumerate(sorted_channels):\n            var = self.channel_vars.get(channel, ctk.BooleanVar(value=False))\n            self.channel_vars[channel] = var\n\n            # Create more compact checkboxes\n            checkbox = ctk.CTkCheckBox(\n                self.channels_container,\n                text=channel,\n                variable=var,\n                onvalue=True,\n                offvalue=False,\n                height=20,\n                font=get_dropdown_font(),\n                checkbox_width=16,\n                checkbox_height=16\n            )\n            checkbox.grid(row=i, column=0, padx=8, pady=3, sticky=\"w\")\n\n            # Bind mouse wheel event to each checkbox for better scrolling\n            checkbox.bind(\"<MouseWheel>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n            checkbox.bind(\"<Button-4>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n            checkbox.bind(\"<Button-5>\", lambda event, w=self.channels_frame: self._on_mouse_wheel(event, w))\n\n    def filter_channels(self, *args):\n        \"\"\"Filter channels based on search text.\"\"\"\n        search_text = self.search_var.get().lower()\n\n        if not search_text:\n            # If search is empty, show all channels\n            filtered_channels = self.available_channels\n        else:\n            # Filter channels that contain the search text\n            filtered_channels = [ch for ch in self.available_channels if search_text in ch.lower()]\n\n            # Sort the filtered channels alphabetically\n            filtered_channels.sort()\n\n        # Update the displayed channels\n        self.display_channels(filtered_channels)\n\n    def bind_mouse_wheel(self, widget):\n        \"\"\"\n        Bind mouse wheel events to the widget for scrolling.\n\n        Args:\n            widget: The widget to bind mouse wheel events to\n        \"\"\"\n        # Bind for Windows and Linux (with mouse wheel)\n        widget.bind_all(\"<MouseWheel>\", lambda event: self._on_mouse_wheel(event, widget))\n        # Bind for Linux (with touchpad)\n        widget.bind_all(\"<Button-4>\", lambda event: self._on_mouse_wheel(event, widget))\n        widget.bind_all(\"<Button-5>\", lambda event: self._on_mouse_wheel(event, widget))\n\n    def _on_mouse_wheel(self, event, widget):\n        \"\"\"\n        Handle mouse wheel events for scrolling.\n\n        Args:\n            event: The mouse wheel event\n            widget: The widget to scroll\n        \"\"\"\n        # Get the widget under the cursor\n        x, y = event.x_root, event.y_root\n        target_widget = event.widget.winfo_containing(x, y)\n\n        # Check if the cursor is over our scrollable frame or its children\n        parent = target_widget\n        while parent is not None:\n            if parent == widget or parent == self.channels_container:\n                break\n            parent = parent.master\n\n        # If cursor is not over our scrollable area, don't scroll\n        if parent is None:\n            return\n...\n\n    def deselect_all_channels(self):\n        \"\"\"Deselect all channel checkboxes.\"\"\"\n        for var in self.channel_vars.values():\n            var.set(False)\n\n    def select_common_channels(self):\n        \"\"\"Select common EEG channels (10-20 system).\"\"\"\n        # First deselect all\n        self.deselect_all_channels()\n\n        # Select the channels if they exist in our available channels\n        for channel in COMMON_CHANNELS:\n            if channel in self.channel_vars:\n                self.channel_vars[channel].set(True)\n            # Try alternative name if the channel doesn't exist\n            elif channel in ALTERNATIVE_CHANNEL_NAMES and ALTERNATIVE_CHANNEL_NAMES[channel] in self.channel_vars:\n                self.channel_vars[ALTERNATIVE_CHANNEL_NAMES[channel]].set(True)\n\n        # If we have a search filter active, update the display\n        if hasattr(self, 'search_var'):\n            self.filter_channels()\n...\n\n    def view_eeg(self):\n        \"\"\"Open the current EEG file with MNE and display it in a new window.\"\"\"\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n            return\n\n        # Find the selected EEG to get its filepath\n        selected_eeg = None\n        for eeg in self.eegs:\n            if eeg['id'] == self.current_eeg_id:\n                selected_eeg = eeg\n                break\n\n        if not selected_eeg or not selected_eeg.get('filepath'):\n            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n            return\n\n        eeg_filepath = selected_eeg['filepath']\n\n        # Check if the file exists\n        if not os.path.exists(eeg_filepath):\n            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n            return\n...\n\n        # Try to load the EEG file with MNE\n        try:\n            # # Show a loading message\n            # self.loading_window = tk.Toplevel(self)\n            # self.loading_window.title(\"Loading EEG\")\n            # self.loading_window.geometry(\"300x100\")\n            # self.loading_window.transient(self.master)\n            # self.loading_window.grab_set()\n            #\n            # loading_label = tk.Label(self.loading_window, text=\"Loading EEG file...\\nThis may take a moment.\")\n            # loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n            #\n            # self.loading_window.update()\n\n            # Load the EEG file - try different readers based on file extension\n            file_ext = os.path.splitext(eeg_filepath)[1].lower()\n\n            if file_ext == '.edf':\n                raw = mne.io.read_raw_edf(eeg_filepath, preload=True)\n            elif file_ext == '.bdf':\n                raw = mne.io.read_raw_bdf(eeg_filepath, preload=True)\n            elif file_ext == '.gdf':\n                raw = mne.io.read_raw_gdf(eeg_filepath, preload=True)\n            elif file_ext in ['.vhdr', '.vmrk', '.eeg']:\n                raw = mne.io.read_raw_brainvision(eeg_filepath, preload=True)\n            elif file_ext == '.cnt':\n                raw = mne.io.read_raw_cnt(eeg_filepath, preload=True)\n            elif file_ext == '.set':\n                raw = mne.io.read_raw_eeglab(eeg_filepath, preload=True)\n            else:\n                # Try the generic reader as a fallback\n                try:\n                    raw = mne.io.read_raw(eeg_filepath, preload=True)\n                except Exception as e:\n                    raise ValueError(f\"Unsupported file format: {file_ext}. Error: {str(e)}\")\n\n            # Close the loading window\n            # self.loading_window.destroy()\n\n            # Set the time window if specified\n            if start_time is not None and end_time is not None:\n                # Convert from seconds to points if needed\n                start_idx = max(0, int(start_time * raw.info['sfreq']))\n                end_idx = min(len(raw.times), int(end_time * raw.info['sfreq']))\n\n                # Create a plot with the specified time window\n                raw.plot(start=start_time, duration=(end_idx-start_idx)/raw.info['sfreq'],\n                              scalings='auto', block=True, show=True)\n\n                # # Set the window title to include the EEG filename\n                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n                #\n                # # Show the plot\n                # fig.show()\n            else:\n                # Just show the whole EEG\n                raw.plot(scalings='auto', block=True, show=True)\n                # fig.canvas.manager.set_window_title(f\"MNE EEG Viewer - {selected_eeg['filename']}\")\n                # fig.show()\n\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n            if hasattr(self, 'loading_window') and self.loading_window.winfo_exists():\n                self.loading_window.destroy()\n\n    def update_plot(self):\n        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n            return\n...\n\n        # Get data for the selected experiment and EEG\n        df = self.db_handler.get_metrics_data(self.current_experiment_id, self.current_eeg_id)\n\n        if df.empty:\n            self.plot_frame.update_plot(None, None, None, \"No data available\")\n            return\n\n        # Get time window values\n        try:\n            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n        except ValueError:\n            start_time = None\n            self.start_time_var.set(\"0\")\n\n        try:\n            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n        except ValueError:\n            end_time = None\n            self.end_time_var.set(\"\")\n...\n\n        self.plot_frame.update_plot(\n            df,\n            self.current_metric,\n            selected_channels,\n            title,\n            time_window=(start_time, end_time),\n            aggregations=selected_aggregations,\n            aggregation_only=aggregation_only\n        )\n...\nPath: gui/run_metrics_viewer.py\n#!/usr/bin/env python3\n\"\"\"\nRun script for the EEG Metrics Viewer.\n\nThis script provides a simple way to launch the EEG Metrics Viewer application\nwith a specified database path.\n\nUsage:\n    python run_metrics_viewer.py [path_to_database]\n\nIf no database path is provided, the script will look for the default database\nat \"../example/EEGAnalyzer.sqlite\".\n\"\"\"\n\nimport os\nimport sys\nimport importlib.util\n\ndef check_dependencies():\n    \"\"\"Check if all required dependencies are installed.\"\"\"\n    required_packages = [\"customtkinter\", \"matplotlib\", \"numpy\", \"pandas\", \"sqlalchemy\", \"mne\"]\n    missing_packages = []\n\n    for package in required_packages:\n        if importlib.util.find_spec(package) is None:\n            missing_packages.append(package)\n\n    if missing_packages:\n        print(\"The following required packages are missing:\")\n        for package in missing_packages:\n            print(f\"  - {package}\")\n        print(\"\\nPlease install them using:\")\n        print(\"  python install_dependencies.py\")\n        print(\"or\")\n        print(f\"  pip install {' '.join(missing_packages)}\")\n        return False\n\n    return True\n\ndef main():\n    \"\"\"Run the EEG Metrics Viewer application.\"\"\"\n    # Check dependencies first\n    if not check_dependencies():\n        sys.exit(1)\n\n    # Import App only after checking dependencies\n    from metrics_viewer import App\n\n    # Check if a database path is provided as a command-line argument\n    if len(sys.argv) > 1:\n        db_path = sys.argv[1]\n    else:\n        # Default database path\n        db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                              \"example\", \"EEGAnalyzer.sqlite\")\n\n    # Ensure the database file exists\n    if not os.path.exists(db_path):\n        print(f\"Error: Database file not found at {db_path}\")\n        print(\"Please provide a valid path to the EEGAnalyzer.sqlite database.\")\n        sys.exit(1)\n\n    print(f\"Starting EEG Metrics Viewer with database: {db_path}\")\n\n    # Start the application\n    app = App(db_path)\n    app.mainloop()\n\nif __name__ == \"__main__\":\n    main()\n...\nPath: gui/install_dependencies.py\n#!/usr/bin/env python3\n\"\"\"\nScript to install the required dependencies for the EEG Metrics Viewer.\n\nThis script checks if the required packages are installed and installs them if needed.\n\"\"\"\n\nimport sys\nimport subprocess\nimport importlib.util\n\ndef check_package(package_name):\n    \"\"\"Check if a package is installed.\"\"\"\n    return importlib.util.find_spec(package_name) is not None\n\ndef install_package(package_name):\n    \"\"\"Install a package using pip.\"\"\"\n    print(f\"Installing {package_name}...\")\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package_name])\n    print(f\"{package_name} installed successfully.\")\n\ndef main():\n    \"\"\"Check and install required packages.\"\"\"\n    required_packages = [\n        \"customtkinter\",\n        \"matplotlib\",\n        \"numpy\",\n        \"pandas\",\n        \"sqlalchemy\",\n        \"mne\"\n    ]\n\n    missing_packages = []\n\n    # Check which packages are missing\n    for package in required_packages:\n        if not check_package(package):\n            missing_packages.append(package)\n\n    # Install missing packages\n    if missing_packages:\n        print(f\"The following packages need to be installed: {', '.join(missing_packages)}\")\n        try:\n            for package in missing_packages:\n                install_package(package)\n            print(\"All required packages have been installed.\")\n        except Exception as e:\n            print(f\"Error installing packages: {e}\")\n            print(\"Please install the required packages manually:\")\n            for package in missing_packages:\n                print(f\"  pip install {package}\")\n       ...","isError":false,"requestId":""}},"bb616b79-1e15-4be7-8f3d-5d0f258f61b4;toolu_vrtx_0165LoNwt821DBjuy81HZSDd":{"phase":5,"result":{"text":"File saved successfully.","isError":false,"requestId":""}},"0eef779e-ee08-442a-9676-0364203da09f;toolu_vrtx_012HBKJoyWAE9LwMSUYR6dQK":{"phase":5,"result":{"text":"Successfully edited the file gui/metrics_viewer/selection_frame.py.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n     4\tThis module provides the SelectionFrame class for selecting experiments, EEGs,\n     5\tmetrics, channels, and other visualization options.\n     6\t\"\"\"\n     7\t\n     8\tfrom typing import List, Dict, Tuple, Optional, Any, Callable\n     9\timport os\n    10\timport sys\n    11\timport subprocess\n    12\timport customtkinter as ctk\n    13\timport tkinter as tk\n    14\tfrom tkinter import messagebox\n    15\timport mne\n    16\timport numpy as np\n    17\t\n    18\tfrom .database_handler import DatabaseHandler\n    19\tfrom .plot_frame import MetricsPlotFrame\n    20\tfrom .utils import (\n\nResult for str_replace_entries[1]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   576\t        self.start_time_var.set(\"0\")\n   577\t        self.end_time_var.set(\"\")\n   578\t        self.update_plot()\n   579\t\n   580\t    def view_eeg(self):\n   581\t        \"\"\"Open the current EEG file with MNE and display it in a new window using a subprocess.\"\"\"\n   582\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id'):\n   583\t            messagebox.showinfo(\"No EEG Selected\", \"Please select an experiment and EEG file first.\")\n   584\t            return\n   585\t\n   586\t        # Find the selected EEG to get its filepath\n   587\t        selected_eeg = None\n   588\t        for eeg in self.eegs:\n   589\t            if eeg['id'] == self.current_eeg_id:\n   590\t                selected_eeg = eeg\n   591\t                break\n   592\t\n   593\t        if not selected_eeg or not selected_eeg.get('filepath'):\n   594\t            messagebox.showerror(\"Error\", \"Could not find the EEG file path.\")\n   595\t            return\n   596\t\n   597\t        eeg_filepath = selected_eeg['filepath']\n   598\t\n   599\t        # Check if the file exists\n   600\t        if not os.path.exists(eeg_filepath):\n   601\t            messagebox.showerror(\"File Not Found\", f\"The EEG file was not found at:\\n{eeg_filepath}\")\n   602\t            return\n   603\t\n   604\t        # Get the current time window\n   605\t        try:\n   606\t            start_time = float(self.start_time_var.get()) if self.start_time_var.get() else None\n   607\t        except ValueError:\n   608\t            start_time = None\n   609\t\n   610\t        try:\n   611\t            end_time = float(self.end_time_var.get()) if self.end_time_var.get() else None\n   612\t        except ValueError:\n   613\t            end_time = None\n   614\t\n   615\t        # Show a loading message\n   616\t        loading_window = tk.Toplevel(self)\n   617\t        loading_window.title(\"Loading EEG\")\n   618\t        loading_window.geometry(\"300x100\")\n   619\t        loading_window.transient(self.master)\n   620\t        loading_window.grab_set()\n   621\t\n   622\t        loading_label = tk.Label(loading_window, text=\"Starting MNE viewer...\\nThis may take a moment.\")\n   623\t        loading_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)\n   624\t        loading_window.update()\n   625\t\n   626\t        try:\n   627\t            # Get the path to the helper script\n   628\t            helper_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"mne_plot_helper.py\")\n   629\t\n   630\t            # Make sure the helper script is executable\n   631\t            if not os.access(helper_script_path, os.X_OK) and sys.platform != 'win32':\n   632\t                os.chmod(helper_script_path, 0o755)\n   633\t\n   634\t            # Build the command to run the helper script\n   635\t            cmd = [sys.executable, helper_script_path, \"--filepath\", eeg_filepath]\n   636\t\n   637\t            # Add time window parameters if specified\n   638\t            if start_time is not None:\n   639\t                cmd.extend([\"--start-time\", str(start_time)])\n   640\t            if end_time is not None:\n   641\t                cmd.extend([\"--end-time\", str(end_time)])\n   642\t\n   643\t            # Add title\n   644\t            window_title = f\"MNE EEG Viewer - {selected_eeg['filename']}\"\n   645\t            cmd.extend([\"--title\", window_title])\n   646\t\n   647\t            # Launch the subprocess\n   648\t            subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n   649\t\n   650\t            # Close the loading window after a short delay\n   651\t            self.after(1000, loading_window.destroy)\n   652\t\n   653\t        except Exception as e:\n   654\t            loading_window.destroy()\n   655\t            messagebox.showerror(\"Error\", f\"Failed to open the EEG file with MNE:\\n{str(e)}\")\n   656\t\n   657\t    def update_plot(self):\n   658\t        \"\"\"Update the plot with the selected metric and channels.\"\"\"\n   659\t        if not hasattr(self, 'current_experiment_id') or not hasattr(self, 'current_eeg_id') or not self.current_metric:\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"8d1dc34a-ce50-414e-8b37-9ea5a5b52d56;toolu_vrtx_01RYwc8vym2vqowZhiirShMF":{"phase":5,"result":{"text":"Process launched with PID 11","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasDirtyEdits":false},"personaType":0}},"agentExecutionMode":"manual","isAgentEditsCollapsed":false}" />
      </map>
    </option>
  </component>
</project>